// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: company_inteligence.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCompanyIntelligence = `-- name: CreateCompanyIntelligence :one

INSERT INTO company_intelligence (
    brief_id, company_name, company_overview, industry_sector, company_revenue, employee_count,
    geographic_footprint, parent_company, market_position, recent_news_events, financial_health,
    growth_trajectory, market_pressures, regulatory_environment, merger_acquisition_activity,
    competitive_landscape
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
RETURNING id, brief_id, company_name, company_overview, industry_sector, company_revenue, employee_count,
    geographic_footprint, parent_company, market_position, recent_news_events, financial_health,
    growth_trajectory, market_pressures, regulatory_environment, merger_acquisition_activity,
    competitive_landscape, created_at, updated_at
`

type CreateCompanyIntelligenceParams struct {
	BriefID                   uuid.NullUUID  `json:"brief_id"`
	CompanyName               sql.NullString `json:"company_name"`
	CompanyOverview           sql.NullString `json:"company_overview"`
	IndustrySector            sql.NullString `json:"industry_sector"`
	CompanyRevenue            sql.NullString `json:"company_revenue"`
	EmployeeCount             sql.NullInt32  `json:"employee_count"`
	GeographicFootprint       sql.NullString `json:"geographic_footprint"`
	ParentCompany             sql.NullString `json:"parent_company"`
	MarketPosition            sql.NullString `json:"market_position"`
	RecentNewsEvents          sql.NullString `json:"recent_news_events"`
	FinancialHealth           sql.NullString `json:"financial_health"`
	GrowthTrajectory          sql.NullString `json:"growth_trajectory"`
	MarketPressures           sql.NullString `json:"market_pressures"`
	RegulatoryEnvironment     sql.NullString `json:"regulatory_environment"`
	MergerAcquisitionActivity sql.NullString `json:"merger_acquisition_activity"`
	CompetitiveLandscape      sql.NullString `json:"competitive_landscape"`
}

// =============================================================================
// COMPANY INTELLIGENCE QUERIES
// =============================================================================
func (q *Queries) CreateCompanyIntelligence(ctx context.Context, arg CreateCompanyIntelligenceParams) (CompanyIntelligence, error) {
	row := q.db.QueryRowContext(ctx, createCompanyIntelligence,
		arg.BriefID,
		arg.CompanyName,
		arg.CompanyOverview,
		arg.IndustrySector,
		arg.CompanyRevenue,
		arg.EmployeeCount,
		arg.GeographicFootprint,
		arg.ParentCompany,
		arg.MarketPosition,
		arg.RecentNewsEvents,
		arg.FinancialHealth,
		arg.GrowthTrajectory,
		arg.MarketPressures,
		arg.RegulatoryEnvironment,
		arg.MergerAcquisitionActivity,
		arg.CompetitiveLandscape,
	)
	var i CompanyIntelligence
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.CompanyName,
		&i.CompanyOverview,
		&i.IndustrySector,
		&i.CompanyRevenue,
		&i.EmployeeCount,
		&i.GeographicFootprint,
		&i.ParentCompany,
		&i.MarketPosition,
		&i.RecentNewsEvents,
		&i.FinancialHealth,
		&i.GrowthTrajectory,
		&i.MarketPressures,
		&i.RegulatoryEnvironment,
		&i.MergerAcquisitionActivity,
		&i.CompetitiveLandscape,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompanyIntelligence = `-- name: DeleteCompanyIntelligence :exec
DELETE FROM company_intelligence
WHERE brief_id = $1
`

func (q *Queries) DeleteCompanyIntelligence(ctx context.Context, briefID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteCompanyIntelligence, briefID)
	return err
}

const getCompanyIntelligenceByBriefID = `-- name: GetCompanyIntelligenceByBriefID :one
SELECT id, brief_id, company_name, company_overview, industry_sector, company_revenue, employee_count,
    geographic_footprint, parent_company, market_position, recent_news_events, financial_health,
    growth_trajectory, market_pressures, regulatory_environment, merger_acquisition_activity,
    competitive_landscape, created_at, updated_at
FROM company_intelligence
WHERE brief_id = $1
`

func (q *Queries) GetCompanyIntelligenceByBriefID(ctx context.Context, briefID uuid.NullUUID) (CompanyIntelligence, error) {
	row := q.db.QueryRowContext(ctx, getCompanyIntelligenceByBriefID, briefID)
	var i CompanyIntelligence
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.CompanyName,
		&i.CompanyOverview,
		&i.IndustrySector,
		&i.CompanyRevenue,
		&i.EmployeeCount,
		&i.GeographicFootprint,
		&i.ParentCompany,
		&i.MarketPosition,
		&i.RecentNewsEvents,
		&i.FinancialHealth,
		&i.GrowthTrajectory,
		&i.MarketPressures,
		&i.RegulatoryEnvironment,
		&i.MergerAcquisitionActivity,
		&i.CompetitiveLandscape,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCompanyIntelligence = `-- name: UpdateCompanyIntelligence :one
UPDATE company_intelligence
SET company_name = $2,
    company_overview = $3,
    industry_sector = $4,
    company_revenue = $5,
    employee_count = $6,
    geographic_footprint = $7,
    parent_company = $8,
    market_position = $9,
    recent_news_events = $10,
    financial_health = $11,
    growth_trajectory = $12,
    market_pressures = $13,
    regulatory_environment = $14,
    merger_acquisition_activity = $15,
    competitive_landscape = $16,
    updated_at = CURRENT_TIMESTAMP
WHERE brief_id = $1
RETURNING id, brief_id, company_name, company_overview, industry_sector, company_revenue, employee_count,
    geographic_footprint, parent_company, market_position, recent_news_events, financial_health,
    growth_trajectory, market_pressures, regulatory_environment, merger_acquisition_activity,
    competitive_landscape, created_at, updated_at
`

type UpdateCompanyIntelligenceParams struct {
	BriefID                   uuid.NullUUID  `json:"brief_id"`
	CompanyName               sql.NullString `json:"company_name"`
	CompanyOverview           sql.NullString `json:"company_overview"`
	IndustrySector            sql.NullString `json:"industry_sector"`
	CompanyRevenue            sql.NullString `json:"company_revenue"`
	EmployeeCount             sql.NullInt32  `json:"employee_count"`
	GeographicFootprint       sql.NullString `json:"geographic_footprint"`
	ParentCompany             sql.NullString `json:"parent_company"`
	MarketPosition            sql.NullString `json:"market_position"`
	RecentNewsEvents          sql.NullString `json:"recent_news_events"`
	FinancialHealth           sql.NullString `json:"financial_health"`
	GrowthTrajectory          sql.NullString `json:"growth_trajectory"`
	MarketPressures           sql.NullString `json:"market_pressures"`
	RegulatoryEnvironment     sql.NullString `json:"regulatory_environment"`
	MergerAcquisitionActivity sql.NullString `json:"merger_acquisition_activity"`
	CompetitiveLandscape      sql.NullString `json:"competitive_landscape"`
}

func (q *Queries) UpdateCompanyIntelligence(ctx context.Context, arg UpdateCompanyIntelligenceParams) (CompanyIntelligence, error) {
	row := q.db.QueryRowContext(ctx, updateCompanyIntelligence,
		arg.BriefID,
		arg.CompanyName,
		arg.CompanyOverview,
		arg.IndustrySector,
		arg.CompanyRevenue,
		arg.EmployeeCount,
		arg.GeographicFootprint,
		arg.ParentCompany,
		arg.MarketPosition,
		arg.RecentNewsEvents,
		arg.FinancialHealth,
		arg.GrowthTrajectory,
		arg.MarketPressures,
		arg.RegulatoryEnvironment,
		arg.MergerAcquisitionActivity,
		arg.CompetitiveLandscape,
	)
	var i CompanyIntelligence
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.CompanyName,
		&i.CompanyOverview,
		&i.IndustrySector,
		&i.CompanyRevenue,
		&i.EmployeeCount,
		&i.GeographicFootprint,
		&i.ParentCompany,
		&i.MarketPosition,
		&i.RecentNewsEvents,
		&i.FinancialHealth,
		&i.GrowthTrajectory,
		&i.MarketPressures,
		&i.RegulatoryEnvironment,
		&i.MergerAcquisitionActivity,
		&i.CompetitiveLandscape,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
