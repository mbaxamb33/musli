// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: meetings.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createMeeting = `-- name: CreateMeeting :one
INSERT INTO meetings (
    sales_process_id, contact_id, task_id, meeting_time, meeting_place, notes
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING meeting_id, sales_process_id, contact_id, task_id, meeting_time, meeting_place, notes, created_at
`

type CreateMeetingParams struct {
	SalesProcessID int32          `json:"sales_process_id"`
	ContactID      int32          `json:"contact_id"`
	TaskID         sql.NullInt32  `json:"task_id"`
	MeetingTime    time.Time      `json:"meeting_time"`
	MeetingPlace   sql.NullString `json:"meeting_place"`
	Notes          sql.NullString `json:"notes"`
}

func (q *Queries) CreateMeeting(ctx context.Context, arg CreateMeetingParams) (Meeting, error) {
	row := q.db.QueryRowContext(ctx, createMeeting,
		arg.SalesProcessID,
		arg.ContactID,
		arg.TaskID,
		arg.MeetingTime,
		arg.MeetingPlace,
		arg.Notes,
	)
	var i Meeting
	err := row.Scan(
		&i.MeetingID,
		&i.SalesProcessID,
		&i.ContactID,
		&i.TaskID,
		&i.MeetingTime,
		&i.MeetingPlace,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMeeting = `-- name: DeleteMeeting :exec
DELETE FROM meetings
WHERE meeting_id = $1
`

func (q *Queries) DeleteMeeting(ctx context.Context, meetingID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMeeting, meetingID)
	return err
}

const getMeetingByID = `-- name: GetMeetingByID :one
SELECT meeting_id, sales_process_id, contact_id, task_id, meeting_time, meeting_place, notes, created_at
FROM meetings
WHERE meeting_id = $1
`

func (q *Queries) GetMeetingByID(ctx context.Context, meetingID int32) (Meeting, error) {
	row := q.db.QueryRowContext(ctx, getMeetingByID, meetingID)
	var i Meeting
	err := row.Scan(
		&i.MeetingID,
		&i.SalesProcessID,
		&i.ContactID,
		&i.TaskID,
		&i.MeetingTime,
		&i.MeetingPlace,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const listMeetingsByContact = `-- name: ListMeetingsByContact :many
SELECT meeting_id, sales_process_id, contact_id, task_id, meeting_time, meeting_place, notes, created_at
FROM meetings
WHERE contact_id = $1
ORDER BY meeting_time DESC
LIMIT $2 OFFSET $3
`

type ListMeetingsByContactParams struct {
	ContactID int32 `json:"contact_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListMeetingsByContact(ctx context.Context, arg ListMeetingsByContactParams) ([]Meeting, error) {
	rows, err := q.db.QueryContext(ctx, listMeetingsByContact, arg.ContactID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meeting
	for rows.Next() {
		var i Meeting
		if err := rows.Scan(
			&i.MeetingID,
			&i.SalesProcessID,
			&i.ContactID,
			&i.TaskID,
			&i.MeetingTime,
			&i.MeetingPlace,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMeetingsBySalesProcess = `-- name: ListMeetingsBySalesProcess :many
SELECT meeting_id, sales_process_id, contact_id, task_id, meeting_time, meeting_place, notes, created_at
FROM meetings
WHERE sales_process_id = $1
ORDER BY meeting_time DESC
LIMIT $2 OFFSET $3
`

type ListMeetingsBySalesProcessParams struct {
	SalesProcessID int32 `json:"sales_process_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListMeetingsBySalesProcess(ctx context.Context, arg ListMeetingsBySalesProcessParams) ([]Meeting, error) {
	rows, err := q.db.QueryContext(ctx, listMeetingsBySalesProcess, arg.SalesProcessID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meeting
	for rows.Next() {
		var i Meeting
		if err := rows.Scan(
			&i.MeetingID,
			&i.SalesProcessID,
			&i.ContactID,
			&i.TaskID,
			&i.MeetingTime,
			&i.MeetingPlace,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMeetingsByTask = `-- name: ListMeetingsByTask :many
SELECT meeting_id, sales_process_id, contact_id, task_id, meeting_time, meeting_place, notes, created_at
FROM meetings
WHERE task_id = $1
ORDER BY meeting_time DESC
`

func (q *Queries) ListMeetingsByTask(ctx context.Context, taskID sql.NullInt32) ([]Meeting, error) {
	rows, err := q.db.QueryContext(ctx, listMeetingsByTask, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meeting
	for rows.Next() {
		var i Meeting
		if err := rows.Scan(
			&i.MeetingID,
			&i.SalesProcessID,
			&i.ContactID,
			&i.TaskID,
			&i.MeetingTime,
			&i.MeetingPlace,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMeeting = `-- name: UpdateMeeting :one
UPDATE meetings
SET meeting_time = $2,
    meeting_place = $3,
    notes = $4
WHERE meeting_id = $1
RETURNING meeting_id, sales_process_id, contact_id, task_id, meeting_time, meeting_place, notes, created_at
`

type UpdateMeetingParams struct {
	MeetingID    int32          `json:"meeting_id"`
	MeetingTime  time.Time      `json:"meeting_time"`
	MeetingPlace sql.NullString `json:"meeting_place"`
	Notes        sql.NullString `json:"notes"`
}

func (q *Queries) UpdateMeeting(ctx context.Context, arg UpdateMeetingParams) (Meeting, error) {
	row := q.db.QueryRowContext(ctx, updateMeeting,
		arg.MeetingID,
		arg.MeetingTime,
		arg.MeetingPlace,
		arg.Notes,
	)
	var i Meeting
	err := row.Scan(
		&i.MeetingID,
		&i.SalesProcessID,
		&i.ContactID,
		&i.TaskID,
		&i.MeetingTime,
		&i.MeetingPlace,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}
