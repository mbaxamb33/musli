// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contacts.sql

package db

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
  first_name,
  last_name,
  title,
  email,
  phone
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING contact_id, first_name, last_name, title, email, phone, created_at, updated_at
`

type CreateContactParams struct {
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Title     sql.NullString `json:"title"`
	Email     sql.NullString `json:"email"`
	Phone     sql.NullString `json:"phone"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.Title,
		arg.Email,
		arg.Phone,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.Title,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE contact_id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, contactID int32) error {
	_, err := q.db.ExecContext(ctx, deleteContact, contactID)
	return err
}

const getContact = `-- name: GetContact :one
SELECT contact_id, first_name, last_name, title, email, phone, created_at, updated_at FROM contacts
WHERE contact_id = $1 LIMIT 1
`

func (q *Queries) GetContact(ctx context.Context, contactID int32) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContact, contactID)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.Title,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContactsByCompany = `-- name: GetContactsByCompany :many
SELECT 
  c.contact_id, c.first_name, c.last_name, c.title, c.email, c.phone, c.created_at, c.updated_at,
  cc.is_primary
FROM contacts c
JOIN company_contacts cc ON c.contact_id = cc.contact_id
WHERE cc.company_id = $1
ORDER BY cc.is_primary DESC, c.last_name, c.first_name
LIMIT $2 OFFSET $3
`

type GetContactsByCompanyParams struct {
	CompanyID int32 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetContactsByCompanyRow struct {
	ContactID int32          `json:"contact_id"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Title     sql.NullString `json:"title"`
	Email     sql.NullString `json:"email"`
	Phone     sql.NullString `json:"phone"`
	CreatedAt sql.NullTime   `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	IsPrimary sql.NullBool   `json:"is_primary"`
}

func (q *Queries) GetContactsByCompany(ctx context.Context, arg GetContactsByCompanyParams) ([]GetContactsByCompanyRow, error) {
	rows, err := q.db.QueryContext(ctx, getContactsByCompany, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetContactsByCompanyRow
	for rows.Next() {
		var i GetContactsByCompanyRow
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.Title,
			&i.Email,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPrimary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPrimaryContactForCompany = `-- name: GetPrimaryContactForCompany :one
SELECT c.contact_id, c.first_name, c.last_name, c.title, c.email, c.phone, c.created_at, c.updated_at 
FROM contacts c
JOIN company_contacts cc ON c.contact_id = cc.contact_id
WHERE cc.company_id = $1 AND cc.is_primary = TRUE
LIMIT 1
`

func (q *Queries) GetPrimaryContactForCompany(ctx context.Context, companyID int32) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getPrimaryContactForCompany, companyID)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.Title,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listContacts = `-- name: ListContacts :many
SELECT contact_id, first_name, last_name, title, email, phone, created_at, updated_at FROM contacts
ORDER BY last_name, first_name
LIMIT $1 OFFSET $2
`

type ListContactsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.Title,
			&i.Email,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContacts = `-- name: SearchContacts :many
SELECT contact_id, first_name, last_name, title, email, phone, created_at, updated_at FROM contacts
WHERE 
  first_name ILIKE '%' || $1 || '%' OR 
  last_name ILIKE '%' || $1 || '%' OR
  email ILIKE '%' || $1 || '%'
ORDER BY last_name, first_name
LIMIT $2 OFFSET $3
`

type SearchContactsParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchContacts(ctx context.Context, arg SearchContactsParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, searchContacts, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.Title,
			&i.Email,
			&i.Phone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET
  first_name = COALESCE($2, first_name),
  last_name = COALESCE($3, last_name),
  title = COALESCE($4, title),
  email = COALESCE($5, email),
  phone = COALESCE($6, phone),
  updated_at = CURRENT_TIMESTAMP
WHERE contact_id = $1
RETURNING contact_id, first_name, last_name, title, email, phone, created_at, updated_at
`

type UpdateContactParams struct {
	ContactID int32          `json:"contact_id"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Title     sql.NullString `json:"title"`
	Email     sql.NullString `json:"email"`
	Phone     sql.NullString `json:"phone"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ContactID,
		arg.FirstName,
		arg.LastName,
		arg.Title,
		arg.Email,
		arg.Phone,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.Title,
		&i.Email,
		&i.Phone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
