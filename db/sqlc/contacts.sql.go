// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contacts.sql

package db

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
    company_id, first_name, last_name, position, email, phone, notes
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING contact_id, company_id, first_name, last_name, position, email, phone, notes, created_at
`

type CreateContactParams struct {
	CompanyID int32          `json:"company_id"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Position  sql.NullString `json:"position"`
	Email     sql.NullString `json:"email"`
	Phone     sql.NullString `json:"phone"`
	Notes     sql.NullString `json:"notes"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.CompanyID,
		arg.FirstName,
		arg.LastName,
		arg.Position,
		arg.Email,
		arg.Phone,
		arg.Notes,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.CompanyID,
		&i.FirstName,
		&i.LastName,
		&i.Position,
		&i.Email,
		&i.Phone,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE contact_id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, contactID int32) error {
	_, err := q.db.ExecContext(ctx, deleteContact, contactID)
	return err
}

const getContactByID = `-- name: GetContactByID :one
SELECT contact_id, company_id, first_name, last_name, position, email, phone, notes, created_at
FROM contacts
WHERE contact_id = $1
`

func (q *Queries) GetContactByID(ctx context.Context, contactID int32) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContactByID, contactID)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.CompanyID,
		&i.FirstName,
		&i.LastName,
		&i.Position,
		&i.Email,
		&i.Phone,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const listContactsByCompanyID = `-- name: ListContactsByCompanyID :many
SELECT contact_id, company_id, first_name, last_name, position, email, phone, notes, created_at
FROM contacts
WHERE company_id = $1
ORDER BY last_name, first_name ASC
LIMIT $2 OFFSET $3
`

type ListContactsByCompanyIDParams struct {
	CompanyID int32 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListContactsByCompanyID(ctx context.Context, arg ListContactsByCompanyIDParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContactsByCompanyID, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.CompanyID,
			&i.FirstName,
			&i.LastName,
			&i.Position,
			&i.Email,
			&i.Phone,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContactsByCompanyAndName = `-- name: SearchContactsByCompanyAndName :many
SELECT contact_id, company_id, first_name, last_name, position, email, phone, notes, created_at
FROM contacts
WHERE company_id = $1 AND (first_name ILIKE '%' || $2 || '%' OR last_name ILIKE '%' || $2 || '%')
ORDER BY last_name, first_name ASC
LIMIT $3 OFFSET $4
`

type SearchContactsByCompanyAndNameParams struct {
	CompanyID int32          `json:"company_id"`
	Column2   sql.NullString `json:"column_2"`
	Limit     int32          `json:"limit"`
	Offset    int32          `json:"offset"`
}

func (q *Queries) SearchContactsByCompanyAndName(ctx context.Context, arg SearchContactsByCompanyAndNameParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, searchContactsByCompanyAndName,
		arg.CompanyID,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.CompanyID,
			&i.FirstName,
			&i.LastName,
			&i.Position,
			&i.Email,
			&i.Phone,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContactsByName = `-- name: SearchContactsByName :many
SELECT contact_id, company_id, first_name, last_name, position, email, phone, notes, created_at
FROM contacts
WHERE (first_name ILIKE '%' || $1 || '%' OR last_name ILIKE '%' || $1 || '%')
ORDER BY last_name, first_name ASC
LIMIT $2 OFFSET $3
`

type SearchContactsByNameParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchContactsByName(ctx context.Context, arg SearchContactsByNameParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, searchContactsByName, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.CompanyID,
			&i.FirstName,
			&i.LastName,
			&i.Position,
			&i.Email,
			&i.Phone,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET first_name = $2,
    last_name = $3,
    position = $4,
    email = $5,
    phone = $6,
    notes = $7
WHERE contact_id = $1
RETURNING contact_id, company_id, first_name, last_name, position, email, phone, notes, created_at
`

type UpdateContactParams struct {
	ContactID int32          `json:"contact_id"`
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Position  sql.NullString `json:"position"`
	Email     sql.NullString `json:"email"`
	Phone     sql.NullString `json:"phone"`
	Notes     sql.NullString `json:"notes"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ContactID,
		arg.FirstName,
		arg.LastName,
		arg.Position,
		arg.Email,
		arg.Phone,
		arg.Notes,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.CompanyID,
		&i.FirstName,
		&i.LastName,
		&i.Position,
		&i.Email,
		&i.Phone,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}
