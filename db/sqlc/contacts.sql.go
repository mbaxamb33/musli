// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contacts.sql

package db

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (
    first_name, last_name, email, phone, linkedin_profile,
    job_title, company_id, location, bio
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING contact_id, first_name, last_name, email, phone, linkedin_profile,
          job_title, company_id, location, bio, scrape_timestamp
`

type CreateContactParams struct {
	FirstName       sql.NullString `json:"first_name"`
	LastName        sql.NullString `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	LinkedinProfile sql.NullString `json:"linkedin_profile"`
	JobTitle        sql.NullString `json:"job_title"`
	CompanyID       sql.NullInt32  `json:"company_id"`
	Location        sql.NullString `json:"location"`
	Bio             sql.NullString `json:"bio"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, createContact,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.LinkedinProfile,
		arg.JobTitle,
		arg.CompanyID,
		arg.Location,
		arg.Bio,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.LinkedinProfile,
		&i.JobTitle,
		&i.CompanyID,
		&i.Location,
		&i.Bio,
		&i.ScrapeTimestamp,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE contact_id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, contactID int32) error {
	_, err := q.db.ExecContext(ctx, deleteContact, contactID)
	return err
}

const getContactByID = `-- name: GetContactByID :one
SELECT contact_id, first_name, last_name, email, phone, linkedin_profile,
       job_title, company_id, location, bio, scrape_timestamp
FROM contacts
WHERE contact_id = $1
`

func (q *Queries) GetContactByID(ctx context.Context, contactID int32) (Contact, error) {
	row := q.db.QueryRowContext(ctx, getContactByID, contactID)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.LinkedinProfile,
		&i.JobTitle,
		&i.CompanyID,
		&i.Location,
		&i.Bio,
		&i.ScrapeTimestamp,
	)
	return i, err
}

const listContactsByCompany = `-- name: ListContactsByCompany :many
SELECT contact_id, first_name, last_name, email, phone, linkedin_profile,
       job_title, company_id, location, bio, scrape_timestamp
FROM contacts
WHERE company_id = $1
ORDER BY scrape_timestamp DESC
LIMIT $2 OFFSET $3
`

type ListContactsByCompanyParams struct {
	CompanyID sql.NullInt32 `json:"company_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListContactsByCompany(ctx context.Context, arg ListContactsByCompanyParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, listContactsByCompany, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.LinkedinProfile,
			&i.JobTitle,
			&i.CompanyID,
			&i.Location,
			&i.Bio,
			&i.ScrapeTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchContactsByName = `-- name: SearchContactsByName :many
SELECT contact_id, first_name, last_name, email, phone, linkedin_profile,
       job_title, company_id, location, bio, scrape_timestamp
FROM contacts
WHERE LOWER(first_name) LIKE LOWER($1) OR LOWER(last_name) LIKE LOWER($1)
ORDER BY scrape_timestamp DESC
LIMIT $2 OFFSET $3
`

type SearchContactsByNameParams struct {
	Lower  string `json:"lower"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) SearchContactsByName(ctx context.Context, arg SearchContactsByNameParams) ([]Contact, error) {
	rows, err := q.db.QueryContext(ctx, searchContactsByName, arg.Lower, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contact
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ContactID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.LinkedinProfile,
			&i.JobTitle,
			&i.CompanyID,
			&i.Location,
			&i.Bio,
			&i.ScrapeTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContact = `-- name: UpdateContact :one
UPDATE contacts
SET first_name = $2,
    last_name = $3,
    email = $4,
    phone = $5,
    linkedin_profile = $6,
    job_title = $7,
    company_id = $8,
    location = $9,
    bio = $10,
    scrape_timestamp = CURRENT_TIMESTAMP
WHERE contact_id = $1
RETURNING contact_id, first_name, last_name, email, phone, linkedin_profile,
          job_title, company_id, location, bio, scrape_timestamp
`

type UpdateContactParams struct {
	ContactID       int32          `json:"contact_id"`
	FirstName       sql.NullString `json:"first_name"`
	LastName        sql.NullString `json:"last_name"`
	Email           sql.NullString `json:"email"`
	Phone           sql.NullString `json:"phone"`
	LinkedinProfile sql.NullString `json:"linkedin_profile"`
	JobTitle        sql.NullString `json:"job_title"`
	CompanyID       sql.NullInt32  `json:"company_id"`
	Location        sql.NullString `json:"location"`
	Bio             sql.NullString `json:"bio"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.db.QueryRowContext(ctx, updateContact,
		arg.ContactID,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.LinkedinProfile,
		arg.JobTitle,
		arg.CompanyID,
		arg.Location,
		arg.Bio,
	)
	var i Contact
	err := row.Scan(
		&i.ContactID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.LinkedinProfile,
		&i.JobTitle,
		&i.CompanyID,
		&i.Location,
		&i.Bio,
		&i.ScrapeTimestamp,
	)
	return i, err
}
