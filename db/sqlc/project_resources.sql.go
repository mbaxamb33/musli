// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_resources.sql

package db

import (
	"context"
	"database/sql"
)

const addResourceToProject = `-- name: AddResourceToProject :one
INSERT INTO project_resources (
  project_id,
  resource_id,
  quantity,
  notes
) VALUES (
  $1, $2, $3, $4
) RETURNING project_resource_id, project_id, resource_id, quantity, notes, created_at, updated_at
`

type AddResourceToProjectParams struct {
	ProjectID  int32          `json:"project_id"`
	ResourceID int32          `json:"resource_id"`
	Quantity   string         `json:"quantity"`
	Notes      sql.NullString `json:"notes"`
}

func (q *Queries) AddResourceToProject(ctx context.Context, arg AddResourceToProjectParams) (ProjectResource, error) {
	row := q.db.QueryRowContext(ctx, addResourceToProject,
		arg.ProjectID,
		arg.ResourceID,
		arg.Quantity,
		arg.Notes,
	)
	var i ProjectResource
	err := row.Scan(
		&i.ProjectResourceID,
		&i.ProjectID,
		&i.ResourceID,
		&i.Quantity,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectResource = `-- name: GetProjectResource :one
SELECT project_resource_id, project_id, resource_id, quantity, notes, created_at, updated_at FROM project_resources
WHERE project_id = $1 AND resource_id = $2
LIMIT 1
`

type GetProjectResourceParams struct {
	ProjectID  int32 `json:"project_id"`
	ResourceID int32 `json:"resource_id"`
}

func (q *Queries) GetProjectResource(ctx context.Context, arg GetProjectResourceParams) (ProjectResource, error) {
	row := q.db.QueryRowContext(ctx, getProjectResource, arg.ProjectID, arg.ResourceID)
	var i ProjectResource
	err := row.Scan(
		&i.ProjectResourceID,
		&i.ProjectID,
		&i.ResourceID,
		&i.Quantity,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectResourceById = `-- name: GetProjectResourceById :one
SELECT project_resource_id, project_id, resource_id, quantity, notes, created_at, updated_at FROM project_resources
WHERE project_resource_id = $1
LIMIT 1
`

func (q *Queries) GetProjectResourceById(ctx context.Context, projectResourceID int32) (ProjectResource, error) {
	row := q.db.QueryRowContext(ctx, getProjectResourceById, projectResourceID)
	var i ProjectResource
	err := row.Scan(
		&i.ProjectResourceID,
		&i.ProjectID,
		&i.ResourceID,
		&i.Quantity,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResourcesNotInProject = `-- name: GetResourcesNotInProject :many
SELECT 
  r.resource_id, r.name, r.description, r.category_id, r.unit, r.cost_per_unit, r.created_at, r.updated_at
FROM resources r
WHERE r.resource_id NOT IN (
  SELECT resource_id FROM project_resources WHERE project_id = $1
)
ORDER BY r.name
LIMIT $2 OFFSET $3
`

type GetResourcesNotInProjectParams struct {
	ProjectID int32 `json:"project_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetResourcesNotInProject(ctx context.Context, arg GetResourcesNotInProjectParams) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, getResourcesNotInProject, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ResourceID,
			&i.Name,
			&i.Description,
			&i.CategoryID,
			&i.Unit,
			&i.CostPerUnit,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalProjectCost = `-- name: GetTotalProjectCost :one
SELECT 
  SUM(pr.quantity * r.cost_per_unit) AS total_cost
FROM project_resources pr
JOIN resources r ON pr.resource_id = r.resource_id
WHERE pr.project_id = $1
`

func (q *Queries) GetTotalProjectCost(ctx context.Context, projectID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalProjectCost, projectID)
	var total_cost int64
	err := row.Scan(&total_cost)
	return total_cost, err
}

const listProjectResources = `-- name: ListProjectResources :many
SELECT 
  pr.project_resource_id, pr.project_id, pr.resource_id, pr.quantity, pr.notes, pr.created_at, pr.updated_at,
  r.name AS resource_name,
  r.unit,
  r.cost_per_unit,
  (pr.quantity * r.cost_per_unit) AS total_cost
FROM project_resources pr
JOIN resources r ON pr.resource_id = r.resource_id
WHERE pr.project_id = $1
ORDER BY r.name
LIMIT $2 OFFSET $3
`

type ListProjectResourcesParams struct {
	ProjectID int32 `json:"project_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type ListProjectResourcesRow struct {
	ProjectResourceID int32          `json:"project_resource_id"`
	ProjectID         int32          `json:"project_id"`
	ResourceID        int32          `json:"resource_id"`
	Quantity          string         `json:"quantity"`
	Notes             sql.NullString `json:"notes"`
	CreatedAt         sql.NullTime   `json:"created_at"`
	UpdatedAt         sql.NullTime   `json:"updated_at"`
	ResourceName      string         `json:"resource_name"`
	Unit              sql.NullString `json:"unit"`
	CostPerUnit       sql.NullString `json:"cost_per_unit"`
	TotalCost         int32          `json:"total_cost"`
}

func (q *Queries) ListProjectResources(ctx context.Context, arg ListProjectResourcesParams) ([]ListProjectResourcesRow, error) {
	rows, err := q.db.QueryContext(ctx, listProjectResources, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListProjectResourcesRow
	for rows.Next() {
		var i ListProjectResourcesRow
		if err := rows.Scan(
			&i.ProjectResourceID,
			&i.ProjectID,
			&i.ResourceID,
			&i.Quantity,
			&i.Notes,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ResourceName,
			&i.Unit,
			&i.CostPerUnit,
			&i.TotalCost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProjectResourceById = `-- name: RemoveProjectResourceById :exec
DELETE FROM project_resources
WHERE project_resource_id = $1
`

func (q *Queries) RemoveProjectResourceById(ctx context.Context, projectResourceID int32) error {
	_, err := q.db.ExecContext(ctx, removeProjectResourceById, projectResourceID)
	return err
}

const removeResourceFromProject = `-- name: RemoveResourceFromProject :exec
DELETE FROM project_resources
WHERE project_id = $1 AND resource_id = $2
`

type RemoveResourceFromProjectParams struct {
	ProjectID  int32 `json:"project_id"`
	ResourceID int32 `json:"resource_id"`
}

func (q *Queries) RemoveResourceFromProject(ctx context.Context, arg RemoveResourceFromProjectParams) error {
	_, err := q.db.ExecContext(ctx, removeResourceFromProject, arg.ProjectID, arg.ResourceID)
	return err
}

const updateProjectResource = `-- name: UpdateProjectResource :one
UPDATE project_resources
SET
  quantity = COALESCE($3, quantity),
  notes = COALESCE($4, notes),
  updated_at = CURRENT_TIMESTAMP
WHERE project_id = $1 AND resource_id = $2
RETURNING project_resource_id, project_id, resource_id, quantity, notes, created_at, updated_at
`

type UpdateProjectResourceParams struct {
	ProjectID  int32          `json:"project_id"`
	ResourceID int32          `json:"resource_id"`
	Quantity   string         `json:"quantity"`
	Notes      sql.NullString `json:"notes"`
}

func (q *Queries) UpdateProjectResource(ctx context.Context, arg UpdateProjectResourceParams) (ProjectResource, error) {
	row := q.db.QueryRowContext(ctx, updateProjectResource,
		arg.ProjectID,
		arg.ResourceID,
		arg.Quantity,
		arg.Notes,
	)
	var i ProjectResource
	err := row.Scan(
		&i.ProjectResourceID,
		&i.ProjectID,
		&i.ResourceID,
		&i.Quantity,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProjectResourceById = `-- name: UpdateProjectResourceById :one
UPDATE project_resources
SET
  quantity = COALESCE($2, quantity),
  notes = COALESCE($3, notes),
  updated_at = CURRENT_TIMESTAMP
WHERE project_resource_id = $1
RETURNING project_resource_id, project_id, resource_id, quantity, notes, created_at, updated_at
`

type UpdateProjectResourceByIdParams struct {
	ProjectResourceID int32          `json:"project_resource_id"`
	Quantity          string         `json:"quantity"`
	Notes             sql.NullString `json:"notes"`
}

func (q *Queries) UpdateProjectResourceById(ctx context.Context, arg UpdateProjectResourceByIdParams) (ProjectResource, error) {
	row := q.db.QueryRowContext(ctx, updateProjectResourceById, arg.ProjectResourceID, arg.Quantity, arg.Notes)
	var i ProjectResource
	err := row.Scan(
		&i.ProjectResourceID,
		&i.ProjectID,
		&i.ResourceID,
		&i.Quantity,
		&i.Notes,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
