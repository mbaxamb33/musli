// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project_requirements.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createProjectRequirements = `-- name: CreateProjectRequirements :one

INSERT INTO project_requirements (
    brief_id, project_scope, success_criteria, implementation_timeline, resource_allocation,
    project_team_structure, change_management_approach, training_requirements, rollout_strategy,
    pilot_phase_design, risk_mitigation_plan, communication_plan, stakeholder_engagement,
    performance_metrics, governance_structure, escalation_procedures
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
RETURNING id, brief_id, project_scope, success_criteria, implementation_timeline, resource_allocation,
    project_team_structure, change_management_approach, training_requirements, rollout_strategy,
    pilot_phase_design, risk_mitigation_plan, communication_plan, stakeholder_engagement,
    performance_metrics, governance_structure, escalation_procedures, created_at, updated_at
`

type CreateProjectRequirementsParams struct {
	BriefID                  uuid.NullUUID  `json:"brief_id"`
	ProjectScope             sql.NullString `json:"project_scope"`
	SuccessCriteria          sql.NullString `json:"success_criteria"`
	ImplementationTimeline   sql.NullString `json:"implementation_timeline"`
	ResourceAllocation       sql.NullString `json:"resource_allocation"`
	ProjectTeamStructure     sql.NullString `json:"project_team_structure"`
	ChangeManagementApproach sql.NullString `json:"change_management_approach"`
	TrainingRequirements     sql.NullString `json:"training_requirements"`
	RolloutStrategy          sql.NullString `json:"rollout_strategy"`
	PilotPhaseDesign         sql.NullString `json:"pilot_phase_design"`
	RiskMitigationPlan       sql.NullString `json:"risk_mitigation_plan"`
	CommunicationPlan        sql.NullString `json:"communication_plan"`
	StakeholderEngagement    sql.NullString `json:"stakeholder_engagement"`
	PerformanceMetrics       sql.NullString `json:"performance_metrics"`
	GovernanceStructure      sql.NullString `json:"governance_structure"`
	EscalationProcedures     sql.NullString `json:"escalation_procedures"`
}

// =============================================================================
// PROJECT REQUIREMENTS QUERIES
// =============================================================================
func (q *Queries) CreateProjectRequirements(ctx context.Context, arg CreateProjectRequirementsParams) (ProjectRequirement, error) {
	row := q.db.QueryRowContext(ctx, createProjectRequirements,
		arg.BriefID,
		arg.ProjectScope,
		arg.SuccessCriteria,
		arg.ImplementationTimeline,
		arg.ResourceAllocation,
		arg.ProjectTeamStructure,
		arg.ChangeManagementApproach,
		arg.TrainingRequirements,
		arg.RolloutStrategy,
		arg.PilotPhaseDesign,
		arg.RiskMitigationPlan,
		arg.CommunicationPlan,
		arg.StakeholderEngagement,
		arg.PerformanceMetrics,
		arg.GovernanceStructure,
		arg.EscalationProcedures,
	)
	var i ProjectRequirement
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.ProjectScope,
		&i.SuccessCriteria,
		&i.ImplementationTimeline,
		&i.ResourceAllocation,
		&i.ProjectTeamStructure,
		&i.ChangeManagementApproach,
		&i.TrainingRequirements,
		&i.RolloutStrategy,
		&i.PilotPhaseDesign,
		&i.RiskMitigationPlan,
		&i.CommunicationPlan,
		&i.StakeholderEngagement,
		&i.PerformanceMetrics,
		&i.GovernanceStructure,
		&i.EscalationProcedures,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProjectRequirements = `-- name: DeleteProjectRequirements :exec
DELETE FROM project_requirements
WHERE brief_id = $1
`

func (q *Queries) DeleteProjectRequirements(ctx context.Context, briefID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteProjectRequirements, briefID)
	return err
}

const getProjectRequirementsByBriefID = `-- name: GetProjectRequirementsByBriefID :one
SELECT id, brief_id, project_scope, success_criteria, implementation_timeline, resource_allocation,
    project_team_structure, change_management_approach, training_requirements, rollout_strategy,
    pilot_phase_design, risk_mitigation_plan, communication_plan, stakeholder_engagement,
    performance_metrics, governance_structure, escalation_procedures, created_at, updated_at
FROM project_requirements
WHERE brief_id = $1
`

func (q *Queries) GetProjectRequirementsByBriefID(ctx context.Context, briefID uuid.NullUUID) (ProjectRequirement, error) {
	row := q.db.QueryRowContext(ctx, getProjectRequirementsByBriefID, briefID)
	var i ProjectRequirement
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.ProjectScope,
		&i.SuccessCriteria,
		&i.ImplementationTimeline,
		&i.ResourceAllocation,
		&i.ProjectTeamStructure,
		&i.ChangeManagementApproach,
		&i.TrainingRequirements,
		&i.RolloutStrategy,
		&i.PilotPhaseDesign,
		&i.RiskMitigationPlan,
		&i.CommunicationPlan,
		&i.StakeholderEngagement,
		&i.PerformanceMetrics,
		&i.GovernanceStructure,
		&i.EscalationProcedures,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProjectRequirements = `-- name: UpdateProjectRequirements :one
UPDATE project_requirements
SET project_scope = $2,
    success_criteria = $3,
    implementation_timeline = $4,
    resource_allocation = $5,
    project_team_structure = $6,
    change_management_approach = $7,
    training_requirements = $8,
    rollout_strategy = $9,
    pilot_phase_design = $10,
    risk_mitigation_plan = $11,
    communication_plan = $12,
    stakeholder_engagement = $13,
    performance_metrics = $14,
    governance_structure = $15,
    escalation_procedures = $16,
    updated_at = CURRENT_TIMESTAMP
WHERE brief_id = $1
RETURNING id, brief_id, project_scope, success_criteria, implementation_timeline, resource_allocation,
    project_team_structure, change_management_approach, training_requirements, rollout_strategy,
    pilot_phase_design, risk_mitigation_plan, communication_plan, stakeholder_engagement,
    performance_metrics, governance_structure, escalation_procedures, created_at, updated_at
`

type UpdateProjectRequirementsParams struct {
	BriefID                  uuid.NullUUID  `json:"brief_id"`
	ProjectScope             sql.NullString `json:"project_scope"`
	SuccessCriteria          sql.NullString `json:"success_criteria"`
	ImplementationTimeline   sql.NullString `json:"implementation_timeline"`
	ResourceAllocation       sql.NullString `json:"resource_allocation"`
	ProjectTeamStructure     sql.NullString `json:"project_team_structure"`
	ChangeManagementApproach sql.NullString `json:"change_management_approach"`
	TrainingRequirements     sql.NullString `json:"training_requirements"`
	RolloutStrategy          sql.NullString `json:"rollout_strategy"`
	PilotPhaseDesign         sql.NullString `json:"pilot_phase_design"`
	RiskMitigationPlan       sql.NullString `json:"risk_mitigation_plan"`
	CommunicationPlan        sql.NullString `json:"communication_plan"`
	StakeholderEngagement    sql.NullString `json:"stakeholder_engagement"`
	PerformanceMetrics       sql.NullString `json:"performance_metrics"`
	GovernanceStructure      sql.NullString `json:"governance_structure"`
	EscalationProcedures     sql.NullString `json:"escalation_procedures"`
}

func (q *Queries) UpdateProjectRequirements(ctx context.Context, arg UpdateProjectRequirementsParams) (ProjectRequirement, error) {
	row := q.db.QueryRowContext(ctx, updateProjectRequirements,
		arg.BriefID,
		arg.ProjectScope,
		arg.SuccessCriteria,
		arg.ImplementationTimeline,
		arg.ResourceAllocation,
		arg.ProjectTeamStructure,
		arg.ChangeManagementApproach,
		arg.TrainingRequirements,
		arg.RolloutStrategy,
		arg.PilotPhaseDesign,
		arg.RiskMitigationPlan,
		arg.CommunicationPlan,
		arg.StakeholderEngagement,
		arg.PerformanceMetrics,
		arg.GovernanceStructure,
		arg.EscalationProcedures,
	)
	var i ProjectRequirement
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.ProjectScope,
		&i.SuccessCriteria,
		&i.ImplementationTimeline,
		&i.ResourceAllocation,
		&i.ProjectTeamStructure,
		&i.ChangeManagementApproach,
		&i.TrainingRequirements,
		&i.RolloutStrategy,
		&i.PilotPhaseDesign,
		&i.RiskMitigationPlan,
		&i.CommunicationPlan,
		&i.StakeholderEngagement,
		&i.PerformanceMetrics,
		&i.GovernanceStructure,
		&i.EscalationProcedures,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
