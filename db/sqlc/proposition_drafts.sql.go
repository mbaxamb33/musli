// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: proposition_drafts.sql

package db

import (
	"context"
	"database/sql"
)

const createPropositionDraft = `-- name: CreatePropositionDraft :one
INSERT INTO proposition_drafts (
    sales_process_id, title, content, version
)
VALUES ($1, $2, $3, $4)
RETURNING draft_id, sales_process_id, title, content, version, created_at, updated_at
`

type CreatePropositionDraftParams struct {
	SalesProcessID int32          `json:"sales_process_id"`
	Title          string         `json:"title"`
	Content        sql.NullString `json:"content"`
	Version        int32          `json:"version"`
}

func (q *Queries) CreatePropositionDraft(ctx context.Context, arg CreatePropositionDraftParams) (PropositionDraft, error) {
	row := q.db.QueryRowContext(ctx, createPropositionDraft,
		arg.SalesProcessID,
		arg.Title,
		arg.Content,
		arg.Version,
	)
	var i PropositionDraft
	err := row.Scan(
		&i.DraftID,
		&i.SalesProcessID,
		&i.Title,
		&i.Content,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePropositionDraft = `-- name: DeletePropositionDraft :exec
DELETE FROM proposition_drafts
WHERE draft_id = $1
`

func (q *Queries) DeletePropositionDraft(ctx context.Context, draftID int32) error {
	_, err := q.db.ExecContext(ctx, deletePropositionDraft, draftID)
	return err
}

const getLatestPropositionDraft = `-- name: GetLatestPropositionDraft :one
SELECT draft_id, sales_process_id, title, content, version, created_at, updated_at
FROM proposition_drafts
WHERE sales_process_id = $1
ORDER BY version DESC
LIMIT 1
`

func (q *Queries) GetLatestPropositionDraft(ctx context.Context, salesProcessID int32) (PropositionDraft, error) {
	row := q.db.QueryRowContext(ctx, getLatestPropositionDraft, salesProcessID)
	var i PropositionDraft
	err := row.Scan(
		&i.DraftID,
		&i.SalesProcessID,
		&i.Title,
		&i.Content,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPropositionDraftByID = `-- name: GetPropositionDraftByID :one
SELECT draft_id, sales_process_id, title, content, version, created_at, updated_at
FROM proposition_drafts
WHERE draft_id = $1
`

func (q *Queries) GetPropositionDraftByID(ctx context.Context, draftID int32) (PropositionDraft, error) {
	row := q.db.QueryRowContext(ctx, getPropositionDraftByID, draftID)
	var i PropositionDraft
	err := row.Scan(
		&i.DraftID,
		&i.SalesProcessID,
		&i.Title,
		&i.Content,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPropositionDraftsBySalesProcess = `-- name: ListPropositionDraftsBySalesProcess :many
SELECT draft_id, sales_process_id, title, content, version, created_at, updated_at
FROM proposition_drafts
WHERE sales_process_id = $1
ORDER BY version DESC
LIMIT $2 OFFSET $3
`

type ListPropositionDraftsBySalesProcessParams struct {
	SalesProcessID int32 `json:"sales_process_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListPropositionDraftsBySalesProcess(ctx context.Context, arg ListPropositionDraftsBySalesProcessParams) ([]PropositionDraft, error) {
	rows, err := q.db.QueryContext(ctx, listPropositionDraftsBySalesProcess, arg.SalesProcessID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropositionDraft
	for rows.Next() {
		var i PropositionDraft
		if err := rows.Scan(
			&i.DraftID,
			&i.SalesProcessID,
			&i.Title,
			&i.Content,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePropositionDraft = `-- name: UpdatePropositionDraft :one
UPDATE proposition_drafts
SET title = $2,
    content = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE draft_id = $1
RETURNING draft_id, sales_process_id, title, content, version, created_at, updated_at
`

type UpdatePropositionDraftParams struct {
	DraftID int32          `json:"draft_id"`
	Title   string         `json:"title"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) UpdatePropositionDraft(ctx context.Context, arg UpdatePropositionDraftParams) (PropositionDraft, error) {
	row := q.db.QueryRowContext(ctx, updatePropositionDraft, arg.DraftID, arg.Title, arg.Content)
	var i PropositionDraft
	err := row.Scan(
		&i.DraftID,
		&i.SalesProcessID,
		&i.Title,
		&i.Content,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
