// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: brief_attachments.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBriefAttachment = `-- name: CreateBriefAttachment :one

INSERT INTO brief_attachments (
    brief_id, datasource_id, attachment_type
)
VALUES ($1, $2, $3)
RETURNING id, brief_id, datasource_id, attachment_type, created_at
`

type CreateBriefAttachmentParams struct {
	BriefID        uuid.NullUUID  `json:"brief_id"`
	DatasourceID   sql.NullInt32  `json:"datasource_id"`
	AttachmentType sql.NullString `json:"attachment_type"`
}

// =============================================================================
// BRIEF ATTACHMENTS QUERIES
// =============================================================================
func (q *Queries) CreateBriefAttachment(ctx context.Context, arg CreateBriefAttachmentParams) (BriefAttachment, error) {
	row := q.db.QueryRowContext(ctx, createBriefAttachment, arg.BriefID, arg.DatasourceID, arg.AttachmentType)
	var i BriefAttachment
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.DatasourceID,
		&i.AttachmentType,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBriefAttachment = `-- name: DeleteBriefAttachment :exec
DELETE FROM brief_attachments
WHERE id = $1
`

func (q *Queries) DeleteBriefAttachment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBriefAttachment, id)
	return err
}

const getBriefAttachmentByID = `-- name: GetBriefAttachmentByID :one
SELECT id, brief_id, datasource_id, attachment_type, created_at
FROM brief_attachments
WHERE id = $1
`

func (q *Queries) GetBriefAttachmentByID(ctx context.Context, id uuid.UUID) (BriefAttachment, error) {
	row := q.db.QueryRowContext(ctx, getBriefAttachmentByID, id)
	var i BriefAttachment
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.DatasourceID,
		&i.AttachmentType,
		&i.CreatedAt,
	)
	return i, err
}

const listAttachmentsByBrief = `-- name: ListAttachmentsByBrief :many
SELECT id, brief_id, datasource_id, attachment_type, created_at
FROM brief_attachments
WHERE brief_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListAttachmentsByBrief(ctx context.Context, briefID uuid.NullUUID) ([]BriefAttachment, error) {
	rows, err := q.db.QueryContext(ctx, listAttachmentsByBrief, briefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BriefAttachment
	for rows.Next() {
		var i BriefAttachment
		if err := rows.Scan(
			&i.ID,
			&i.BriefID,
			&i.DatasourceID,
			&i.AttachmentType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAttachmentsByType = `-- name: ListAttachmentsByType :many
SELECT id, brief_id, datasource_id, attachment_type, created_at
FROM brief_attachments
WHERE brief_id = $1 AND attachment_type = $2
ORDER BY created_at DESC
`

type ListAttachmentsByTypeParams struct {
	BriefID        uuid.NullUUID  `json:"brief_id"`
	AttachmentType sql.NullString `json:"attachment_type"`
}

func (q *Queries) ListAttachmentsByType(ctx context.Context, arg ListAttachmentsByTypeParams) ([]BriefAttachment, error) {
	rows, err := q.db.QueryContext(ctx, listAttachmentsByType, arg.BriefID, arg.AttachmentType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BriefAttachment
	for rows.Next() {
		var i BriefAttachment
		if err := rows.Scan(
			&i.ID,
			&i.BriefID,
			&i.DatasourceID,
			&i.AttachmentType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
