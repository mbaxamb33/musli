// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: company_news.sql

package db

import (
	"context"
	"database/sql"
)

const createCompanyNews = `-- name: CreateCompanyNews :one
INSERT INTO company_news (
    company_id, title, publication_date, source, url, summary, sentiment, datasource_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING news_id, company_id, title, publication_date, source, url, summary, sentiment, datasource_id
`

type CreateCompanyNewsParams struct {
	CompanyID       sql.NullInt32  `json:"company_id"`
	Title           string         `json:"title"`
	PublicationDate sql.NullTime   `json:"publication_date"`
	Source          sql.NullString `json:"source"`
	Url             sql.NullString `json:"url"`
	Summary         sql.NullString `json:"summary"`
	Sentiment       sql.NullString `json:"sentiment"`
	DatasourceID    sql.NullInt32  `json:"datasource_id"`
}

func (q *Queries) CreateCompanyNews(ctx context.Context, arg CreateCompanyNewsParams) (CompanyNews, error) {
	row := q.db.QueryRowContext(ctx, createCompanyNews,
		arg.CompanyID,
		arg.Title,
		arg.PublicationDate,
		arg.Source,
		arg.Url,
		arg.Summary,
		arg.Sentiment,
		arg.DatasourceID,
	)
	var i CompanyNews
	err := row.Scan(
		&i.NewsID,
		&i.CompanyID,
		&i.Title,
		&i.PublicationDate,
		&i.Source,
		&i.Url,
		&i.Summary,
		&i.Sentiment,
		&i.DatasourceID,
	)
	return i, err
}

const deleteCompanyNews = `-- name: DeleteCompanyNews :exec
DELETE FROM company_news
WHERE news_id = $1
`

func (q *Queries) DeleteCompanyNews(ctx context.Context, newsID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompanyNews, newsID)
	return err
}

const getCompanyNewsByID = `-- name: GetCompanyNewsByID :one
SELECT news_id, company_id, title, publication_date, source, url, summary, sentiment, datasource_id
FROM company_news
WHERE news_id = $1
`

func (q *Queries) GetCompanyNewsByID(ctx context.Context, newsID int32) (CompanyNews, error) {
	row := q.db.QueryRowContext(ctx, getCompanyNewsByID, newsID)
	var i CompanyNews
	err := row.Scan(
		&i.NewsID,
		&i.CompanyID,
		&i.Title,
		&i.PublicationDate,
		&i.Source,
		&i.Url,
		&i.Summary,
		&i.Sentiment,
		&i.DatasourceID,
	)
	return i, err
}

const listCompanyNewsByCompany = `-- name: ListCompanyNewsByCompany :many
SELECT news_id, company_id, title, publication_date, source, url, summary, sentiment, datasource_id
FROM company_news
WHERE company_id = $1
ORDER BY publication_date DESC
LIMIT $2 OFFSET $3
`

type ListCompanyNewsByCompanyParams struct {
	CompanyID sql.NullInt32 `json:"company_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListCompanyNewsByCompany(ctx context.Context, arg ListCompanyNewsByCompanyParams) ([]CompanyNews, error) {
	rows, err := q.db.QueryContext(ctx, listCompanyNewsByCompany, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyNews
	for rows.Next() {
		var i CompanyNews
		if err := rows.Scan(
			&i.NewsID,
			&i.CompanyID,
			&i.Title,
			&i.PublicationDate,
			&i.Source,
			&i.Url,
			&i.Summary,
			&i.Sentiment,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanyNewsByDatasource = `-- name: ListCompanyNewsByDatasource :many
SELECT news_id, company_id, title, publication_date, source, url, summary, sentiment, datasource_id
FROM company_news
WHERE datasource_id = $1
ORDER BY publication_date DESC
LIMIT $2 OFFSET $3
`

type ListCompanyNewsByDatasourceParams struct {
	DatasourceID sql.NullInt32 `json:"datasource_id"`
	Limit        int32         `json:"limit"`
	Offset       int32         `json:"offset"`
}

func (q *Queries) ListCompanyNewsByDatasource(ctx context.Context, arg ListCompanyNewsByDatasourceParams) ([]CompanyNews, error) {
	rows, err := q.db.QueryContext(ctx, listCompanyNewsByDatasource, arg.DatasourceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyNews
	for rows.Next() {
		var i CompanyNews
		if err := rows.Scan(
			&i.NewsID,
			&i.CompanyID,
			&i.Title,
			&i.PublicationDate,
			&i.Source,
			&i.Url,
			&i.Summary,
			&i.Sentiment,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanyNewsBySentiment = `-- name: ListCompanyNewsBySentiment :many
SELECT news_id, company_id, title, publication_date, source, url, summary, sentiment, datasource_id
FROM company_news
WHERE sentiment = $1
ORDER BY publication_date DESC
LIMIT $2 OFFSET $3
`

type ListCompanyNewsBySentimentParams struct {
	Sentiment sql.NullString `json:"sentiment"`
	Limit     int32          `json:"limit"`
	Offset    int32          `json:"offset"`
}

func (q *Queries) ListCompanyNewsBySentiment(ctx context.Context, arg ListCompanyNewsBySentimentParams) ([]CompanyNews, error) {
	rows, err := q.db.QueryContext(ctx, listCompanyNewsBySentiment, arg.Sentiment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyNews
	for rows.Next() {
		var i CompanyNews
		if err := rows.Scan(
			&i.NewsID,
			&i.CompanyID,
			&i.Title,
			&i.PublicationDate,
			&i.Source,
			&i.Url,
			&i.Summary,
			&i.Sentiment,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompanyNews = `-- name: UpdateCompanyNews :one
UPDATE company_news
SET title = $2,
    publication_date = $3,
    source = $4,
    url = $5,
    summary = $6,
    sentiment = $7
WHERE news_id = $1
RETURNING news_id, company_id, title, publication_date, source, url, summary, sentiment, datasource_id
`

type UpdateCompanyNewsParams struct {
	NewsID          int32          `json:"news_id"`
	Title           string         `json:"title"`
	PublicationDate sql.NullTime   `json:"publication_date"`
	Source          sql.NullString `json:"source"`
	Url             sql.NullString `json:"url"`
	Summary         sql.NullString `json:"summary"`
	Sentiment       sql.NullString `json:"sentiment"`
}

func (q *Queries) UpdateCompanyNews(ctx context.Context, arg UpdateCompanyNewsParams) (CompanyNews, error) {
	row := q.db.QueryRowContext(ctx, updateCompanyNews,
		arg.NewsID,
		arg.Title,
		arg.PublicationDate,
		arg.Source,
		arg.Url,
		arg.Summary,
		arg.Sentiment,
	)
	var i CompanyNews
	err := row.Scan(
		&i.NewsID,
		&i.CompanyID,
		&i.Title,
		&i.PublicationDate,
		&i.Source,
		&i.Url,
		&i.Summary,
		&i.Sentiment,
		&i.DatasourceID,
	)
	return i, err
}
