// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: company_datasources.sql

package db

import (
	"context"
	"database/sql"
)

const associateDatasourceWithCompany = `-- name: AssociateDatasourceWithCompany :exec
INSERT INTO company_datasources (
    company_id, datasource_id
)
VALUES ($1, $2)
`

type AssociateDatasourceWithCompanyParams struct {
	CompanyID    int32 `json:"company_id"`
	DatasourceID int32 `json:"datasource_id"`
}

func (q *Queries) AssociateDatasourceWithCompany(ctx context.Context, arg AssociateDatasourceWithCompanyParams) error {
	_, err := q.db.ExecContext(ctx, associateDatasourceWithCompany, arg.CompanyID, arg.DatasourceID)
	return err
}

const getCompanyDatasourceAssociation = `-- name: GetCompanyDatasourceAssociation :one
SELECT company_id, datasource_id, created_at
FROM company_datasources
WHERE company_id = $1 AND datasource_id = $2
`

type GetCompanyDatasourceAssociationParams struct {
	CompanyID    int32 `json:"company_id"`
	DatasourceID int32 `json:"datasource_id"`
}

func (q *Queries) GetCompanyDatasourceAssociation(ctx context.Context, arg GetCompanyDatasourceAssociationParams) (CompanyDatasource, error) {
	row := q.db.QueryRowContext(ctx, getCompanyDatasourceAssociation, arg.CompanyID, arg.DatasourceID)
	var i CompanyDatasource
	err := row.Scan(&i.CompanyID, &i.DatasourceID, &i.CreatedAt)
	return i, err
}

const listCompaniesByDatasource = `-- name: ListCompaniesByDatasource :many
SELECT c.company_id, c.user_id, c.company_name, c.industry, c.website, c.address, c.description, c.created_at
FROM companies c
JOIN company_datasources cd ON c.company_id = cd.company_id
WHERE cd.datasource_id = $1
ORDER BY c.created_at DESC
LIMIT $2 OFFSET $3
`

type ListCompaniesByDatasourceParams struct {
	DatasourceID int32 `json:"datasource_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListCompaniesByDatasource(ctx context.Context, arg ListCompaniesByDatasourceParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompaniesByDatasource, arg.DatasourceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.CompanyID,
			&i.UserID,
			&i.CompanyName,
			&i.Industry,
			&i.Website,
			&i.Address,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDatasourcesByCompany = `-- name: ListDatasourcesByCompany :many
SELECT d.datasource_id, d.source_type, d.link, d.file_name, d.created_at
FROM datasources d
JOIN company_datasources cd ON d.datasource_id = cd.datasource_id
WHERE cd.company_id = $1
ORDER BY d.created_at DESC
LIMIT $2 OFFSET $3
`

type ListDatasourcesByCompanyParams struct {
	CompanyID int32 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type ListDatasourcesByCompanyRow struct {
	DatasourceID int32          `json:"datasource_id"`
	SourceType   DatasourceType `json:"source_type"`
	Link         sql.NullString `json:"link"`
	FileName     sql.NullString `json:"file_name"`
	CreatedAt    sql.NullTime   `json:"created_at"`
}

func (q *Queries) ListDatasourcesByCompany(ctx context.Context, arg ListDatasourcesByCompanyParams) ([]ListDatasourcesByCompanyRow, error) {
	rows, err := q.db.QueryContext(ctx, listDatasourcesByCompany, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDatasourcesByCompanyRow
	for rows.Next() {
		var i ListDatasourcesByCompanyRow
		if err := rows.Scan(
			&i.DatasourceID,
			&i.SourceType,
			&i.Link,
			&i.FileName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDatasourceFromCompany = `-- name: RemoveDatasourceFromCompany :exec
DELETE FROM company_datasources
WHERE company_id = $1 AND datasource_id = $2
`

type RemoveDatasourceFromCompanyParams struct {
	CompanyID    int32 `json:"company_id"`
	DatasourceID int32 `json:"datasource_id"`
}

func (q *Queries) RemoveDatasourceFromCompany(ctx context.Context, arg RemoveDatasourceFromCompanyParams) error {
	_, err := q.db.ExecContext(ctx, removeDatasourceFromCompany, arg.CompanyID, arg.DatasourceID)
	return err
}
