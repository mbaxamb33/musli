// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: strategic_context.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createStrategicContext = `-- name: CreateStrategicContext :one

INSERT INTO strategic_context (
    brief_id, business_strategy, strategic_initiatives, quarterly_priorities, annual_goals,
    transformation_agenda, digital_maturity, innovation_focus, operational_challenges,
    cost_reduction_pressures, revenue_growth_targets, efficiency_mandates, compliance_drivers,
    risk_management_priorities, sustainability_goals, technology_roadmap
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
RETURNING id, brief_id, business_strategy, strategic_initiatives, quarterly_priorities, annual_goals,
    transformation_agenda, digital_maturity, innovation_focus, operational_challenges,
    cost_reduction_pressures, revenue_growth_targets, efficiency_mandates, compliance_drivers,
    risk_management_priorities, sustainability_goals, technology_roadmap, created_at, updated_at
`

type CreateStrategicContextParams struct {
	BriefID                  uuid.NullUUID  `json:"brief_id"`
	BusinessStrategy         sql.NullString `json:"business_strategy"`
	StrategicInitiatives     sql.NullString `json:"strategic_initiatives"`
	QuarterlyPriorities      sql.NullString `json:"quarterly_priorities"`
	AnnualGoals              sql.NullString `json:"annual_goals"`
	TransformationAgenda     sql.NullString `json:"transformation_agenda"`
	DigitalMaturity          sql.NullString `json:"digital_maturity"`
	InnovationFocus          sql.NullString `json:"innovation_focus"`
	OperationalChallenges    sql.NullString `json:"operational_challenges"`
	CostReductionPressures   sql.NullString `json:"cost_reduction_pressures"`
	RevenueGrowthTargets     sql.NullString `json:"revenue_growth_targets"`
	EfficiencyMandates       sql.NullString `json:"efficiency_mandates"`
	ComplianceDrivers        sql.NullString `json:"compliance_drivers"`
	RiskManagementPriorities sql.NullString `json:"risk_management_priorities"`
	SustainabilityGoals      sql.NullString `json:"sustainability_goals"`
	TechnologyRoadmap        sql.NullString `json:"technology_roadmap"`
}

// =============================================================================
// STRATEGIC CONTEXT QUERIES
// =============================================================================
func (q *Queries) CreateStrategicContext(ctx context.Context, arg CreateStrategicContextParams) (StrategicContext, error) {
	row := q.db.QueryRowContext(ctx, createStrategicContext,
		arg.BriefID,
		arg.BusinessStrategy,
		arg.StrategicInitiatives,
		arg.QuarterlyPriorities,
		arg.AnnualGoals,
		arg.TransformationAgenda,
		arg.DigitalMaturity,
		arg.InnovationFocus,
		arg.OperationalChallenges,
		arg.CostReductionPressures,
		arg.RevenueGrowthTargets,
		arg.EfficiencyMandates,
		arg.ComplianceDrivers,
		arg.RiskManagementPriorities,
		arg.SustainabilityGoals,
		arg.TechnologyRoadmap,
	)
	var i StrategicContext
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.BusinessStrategy,
		&i.StrategicInitiatives,
		&i.QuarterlyPriorities,
		&i.AnnualGoals,
		&i.TransformationAgenda,
		&i.DigitalMaturity,
		&i.InnovationFocus,
		&i.OperationalChallenges,
		&i.CostReductionPressures,
		&i.RevenueGrowthTargets,
		&i.EfficiencyMandates,
		&i.ComplianceDrivers,
		&i.RiskManagementPriorities,
		&i.SustainabilityGoals,
		&i.TechnologyRoadmap,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStrategicContext = `-- name: DeleteStrategicContext :exec
DELETE FROM strategic_context
WHERE brief_id = $1
`

func (q *Queries) DeleteStrategicContext(ctx context.Context, briefID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteStrategicContext, briefID)
	return err
}

const getStrategicContextByBriefID = `-- name: GetStrategicContextByBriefID :one
SELECT id, brief_id, business_strategy, strategic_initiatives, quarterly_priorities, annual_goals,
    transformation_agenda, digital_maturity, innovation_focus, operational_challenges,
    cost_reduction_pressures, revenue_growth_targets, efficiency_mandates, compliance_drivers,
    risk_management_priorities, sustainability_goals, technology_roadmap, created_at, updated_at
FROM strategic_context
WHERE brief_id = $1
`

func (q *Queries) GetStrategicContextByBriefID(ctx context.Context, briefID uuid.NullUUID) (StrategicContext, error) {
	row := q.db.QueryRowContext(ctx, getStrategicContextByBriefID, briefID)
	var i StrategicContext
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.BusinessStrategy,
		&i.StrategicInitiatives,
		&i.QuarterlyPriorities,
		&i.AnnualGoals,
		&i.TransformationAgenda,
		&i.DigitalMaturity,
		&i.InnovationFocus,
		&i.OperationalChallenges,
		&i.CostReductionPressures,
		&i.RevenueGrowthTargets,
		&i.EfficiencyMandates,
		&i.ComplianceDrivers,
		&i.RiskManagementPriorities,
		&i.SustainabilityGoals,
		&i.TechnologyRoadmap,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStrategicContext = `-- name: UpdateStrategicContext :one
UPDATE strategic_context
SET business_strategy = $2,
    strategic_initiatives = $3,
    quarterly_priorities = $4,
    annual_goals = $5,
    transformation_agenda = $6,
    digital_maturity = $7,
    innovation_focus = $8,
    operational_challenges = $9,
    cost_reduction_pressures = $10,
    revenue_growth_targets = $11,
    efficiency_mandates = $12,
    compliance_drivers = $13,
    risk_management_priorities = $14,
    sustainability_goals = $15,
    technology_roadmap = $16,
    updated_at = CURRENT_TIMESTAMP
WHERE brief_id = $1
RETURNING id, brief_id, business_strategy, strategic_initiatives, quarterly_priorities, annual_goals,
    transformation_agenda, digital_maturity, innovation_focus, operational_challenges,
    cost_reduction_pressures, revenue_growth_targets, efficiency_mandates, compliance_drivers,
    risk_management_priorities, sustainability_goals, technology_roadmap, created_at, updated_at
`

type UpdateStrategicContextParams struct {
	BriefID                  uuid.NullUUID  `json:"brief_id"`
	BusinessStrategy         sql.NullString `json:"business_strategy"`
	StrategicInitiatives     sql.NullString `json:"strategic_initiatives"`
	QuarterlyPriorities      sql.NullString `json:"quarterly_priorities"`
	AnnualGoals              sql.NullString `json:"annual_goals"`
	TransformationAgenda     sql.NullString `json:"transformation_agenda"`
	DigitalMaturity          sql.NullString `json:"digital_maturity"`
	InnovationFocus          sql.NullString `json:"innovation_focus"`
	OperationalChallenges    sql.NullString `json:"operational_challenges"`
	CostReductionPressures   sql.NullString `json:"cost_reduction_pressures"`
	RevenueGrowthTargets     sql.NullString `json:"revenue_growth_targets"`
	EfficiencyMandates       sql.NullString `json:"efficiency_mandates"`
	ComplianceDrivers        sql.NullString `json:"compliance_drivers"`
	RiskManagementPriorities sql.NullString `json:"risk_management_priorities"`
	SustainabilityGoals      sql.NullString `json:"sustainability_goals"`
	TechnologyRoadmap        sql.NullString `json:"technology_roadmap"`
}

func (q *Queries) UpdateStrategicContext(ctx context.Context, arg UpdateStrategicContextParams) (StrategicContext, error) {
	row := q.db.QueryRowContext(ctx, updateStrategicContext,
		arg.BriefID,
		arg.BusinessStrategy,
		arg.StrategicInitiatives,
		arg.QuarterlyPriorities,
		arg.AnnualGoals,
		arg.TransformationAgenda,
		arg.DigitalMaturity,
		arg.InnovationFocus,
		arg.OperationalChallenges,
		arg.CostReductionPressures,
		arg.RevenueGrowthTargets,
		arg.EfficiencyMandates,
		arg.ComplianceDrivers,
		arg.RiskManagementPriorities,
		arg.SustainabilityGoals,
		arg.TechnologyRoadmap,
	)
	var i StrategicContext
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.BusinessStrategy,
		&i.StrategicInitiatives,
		&i.QuarterlyPriorities,
		&i.AnnualGoals,
		&i.TransformationAgenda,
		&i.DigitalMaturity,
		&i.InnovationFocus,
		&i.OperationalChallenges,
		&i.CostReductionPressures,
		&i.RevenueGrowthTargets,
		&i.EfficiencyMandates,
		&i.ComplianceDrivers,
		&i.RiskManagementPriorities,
		&i.SustainabilityGoals,
		&i.TechnologyRoadmap,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
