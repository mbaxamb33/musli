// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: data_sources.sql

package db

import (
	"context"
	"database/sql"
)

const createDataSource = `-- name: CreateDataSource :one
INSERT INTO data_sources (
  name,
  url_pattern,
  api_endpoint,
  api_key,
  is_active
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING source_id, name, url_pattern, api_endpoint, api_key, is_active, created_at, updated_at
`

type CreateDataSourceParams struct {
	Name        string         `json:"name"`
	UrlPattern  sql.NullString `json:"url_pattern"`
	ApiEndpoint sql.NullString `json:"api_endpoint"`
	ApiKey      sql.NullString `json:"api_key"`
	IsActive    sql.NullBool   `json:"is_active"`
}

func (q *Queries) CreateDataSource(ctx context.Context, arg CreateDataSourceParams) (DataSource, error) {
	row := q.db.QueryRowContext(ctx, createDataSource,
		arg.Name,
		arg.UrlPattern,
		arg.ApiEndpoint,
		arg.ApiKey,
		arg.IsActive,
	)
	var i DataSource
	err := row.Scan(
		&i.SourceID,
		&i.Name,
		&i.UrlPattern,
		&i.ApiEndpoint,
		&i.ApiKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDataSource = `-- name: DeleteDataSource :exec
DELETE FROM data_sources
WHERE source_id = $1
`

func (q *Queries) DeleteDataSource(ctx context.Context, sourceID int32) error {
	_, err := q.db.ExecContext(ctx, deleteDataSource, sourceID)
	return err
}

const getDataSource = `-- name: GetDataSource :one
SELECT source_id, name, url_pattern, api_endpoint, api_key, is_active, created_at, updated_at FROM data_sources
WHERE source_id = $1 LIMIT 1
`

func (q *Queries) GetDataSource(ctx context.Context, sourceID int32) (DataSource, error) {
	row := q.db.QueryRowContext(ctx, getDataSource, sourceID)
	var i DataSource
	err := row.Scan(
		&i.SourceID,
		&i.Name,
		&i.UrlPattern,
		&i.ApiEndpoint,
		&i.ApiKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDataSourceByName = `-- name: GetDataSourceByName :one
SELECT source_id, name, url_pattern, api_endpoint, api_key, is_active, created_at, updated_at FROM data_sources
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetDataSourceByName(ctx context.Context, name string) (DataSource, error) {
	row := q.db.QueryRowContext(ctx, getDataSourceByName, name)
	var i DataSource
	err := row.Scan(
		&i.SourceID,
		&i.Name,
		&i.UrlPattern,
		&i.ApiEndpoint,
		&i.ApiKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDataSourceWithUsageCount = `-- name: GetDataSourceWithUsageCount :many
SELECT 
  ds.source_id, ds.name, ds.url_pattern, ds.api_endpoint, ds.api_key, ds.is_active, ds.created_at, ds.updated_at,
  COUNT(pcd.source_id) AS usage_count
FROM data_sources ds
LEFT JOIN web_scrape_data wsd ON ds.source_id = wsd.source_id
LEFT JOIN processed_company_data pcd ON ds.source_id = pcd.source_id
GROUP BY ds.source_id
ORDER BY ds.name
LIMIT $1 OFFSET $2
`

type GetDataSourceWithUsageCountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetDataSourceWithUsageCountRow struct {
	SourceID    int32          `json:"source_id"`
	Name        string         `json:"name"`
	UrlPattern  sql.NullString `json:"url_pattern"`
	ApiEndpoint sql.NullString `json:"api_endpoint"`
	ApiKey      sql.NullString `json:"api_key"`
	IsActive    sql.NullBool   `json:"is_active"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	UsageCount  int64          `json:"usage_count"`
}

func (q *Queries) GetDataSourceWithUsageCount(ctx context.Context, arg GetDataSourceWithUsageCountParams) ([]GetDataSourceWithUsageCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getDataSourceWithUsageCount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDataSourceWithUsageCountRow
	for rows.Next() {
		var i GetDataSourceWithUsageCountRow
		if err := rows.Scan(
			&i.SourceID,
			&i.Name,
			&i.UrlPattern,
			&i.ApiEndpoint,
			&i.ApiKey,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDataSourcesByUrlPattern = `-- name: GetDataSourcesByUrlPattern :many
SELECT source_id, name, url_pattern, api_endpoint, api_key, is_active, created_at, updated_at FROM data_sources
WHERE url_pattern LIKE '%' || $1 || '%'
ORDER BY name
LIMIT $2 OFFSET $3
`

type GetDataSourcesByUrlPatternParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) GetDataSourcesByUrlPattern(ctx context.Context, arg GetDataSourcesByUrlPatternParams) ([]DataSource, error) {
	rows, err := q.db.QueryContext(ctx, getDataSourcesByUrlPattern, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataSource
	for rows.Next() {
		var i DataSource
		if err := rows.Scan(
			&i.SourceID,
			&i.Name,
			&i.UrlPattern,
			&i.ApiEndpoint,
			&i.ApiKey,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDataSourcesWithApiEndpoint = `-- name: GetDataSourcesWithApiEndpoint :many
SELECT source_id, name, url_pattern, api_endpoint, api_key, is_active, created_at, updated_at FROM data_sources
WHERE api_endpoint IS NOT NULL AND api_endpoint != ''
ORDER BY name
LIMIT $1 OFFSET $2
`

type GetDataSourcesWithApiEndpointParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetDataSourcesWithApiEndpoint(ctx context.Context, arg GetDataSourcesWithApiEndpointParams) ([]DataSource, error) {
	rows, err := q.db.QueryContext(ctx, getDataSourcesWithApiEndpoint, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataSource
	for rows.Next() {
		var i DataSource
		if err := rows.Scan(
			&i.SourceID,
			&i.Name,
			&i.UrlPattern,
			&i.ApiEndpoint,
			&i.ApiKey,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActiveDataSources = `-- name: ListActiveDataSources :many
SELECT source_id, name, url_pattern, api_endpoint, api_key, is_active, created_at, updated_at FROM data_sources
WHERE is_active = TRUE
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListActiveDataSourcesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActiveDataSources(ctx context.Context, arg ListActiveDataSourcesParams) ([]DataSource, error) {
	rows, err := q.db.QueryContext(ctx, listActiveDataSources, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataSource
	for rows.Next() {
		var i DataSource
		if err := rows.Scan(
			&i.SourceID,
			&i.Name,
			&i.UrlPattern,
			&i.ApiEndpoint,
			&i.ApiKey,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDataSources = `-- name: ListDataSources :many
SELECT source_id, name, url_pattern, api_endpoint, api_key, is_active, created_at, updated_at FROM data_sources
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListDataSourcesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListDataSources(ctx context.Context, arg ListDataSourcesParams) ([]DataSource, error) {
	rows, err := q.db.QueryContext(ctx, listDataSources, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DataSource
	for rows.Next() {
		var i DataSource
		if err := rows.Scan(
			&i.SourceID,
			&i.Name,
			&i.UrlPattern,
			&i.ApiEndpoint,
			&i.ApiKey,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleDataSourceActive = `-- name: ToggleDataSourceActive :one
UPDATE data_sources
SET 
  is_active = NOT is_active,
  updated_at = CURRENT_TIMESTAMP
WHERE source_id = $1
RETURNING source_id, name, url_pattern, api_endpoint, api_key, is_active, created_at, updated_at
`

func (q *Queries) ToggleDataSourceActive(ctx context.Context, sourceID int32) (DataSource, error) {
	row := q.db.QueryRowContext(ctx, toggleDataSourceActive, sourceID)
	var i DataSource
	err := row.Scan(
		&i.SourceID,
		&i.Name,
		&i.UrlPattern,
		&i.ApiEndpoint,
		&i.ApiKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateDataSource = `-- name: UpdateDataSource :one
UPDATE data_sources
SET
  name = COALESCE($2, name),
  url_pattern = COALESCE($3, url_pattern),
  api_endpoint = COALESCE($4, api_endpoint),
  api_key = COALESCE($5, api_key),
  is_active = COALESCE($6, is_active),
  updated_at = CURRENT_TIMESTAMP
WHERE source_id = $1
RETURNING source_id, name, url_pattern, api_endpoint, api_key, is_active, created_at, updated_at
`

type UpdateDataSourceParams struct {
	SourceID    int32          `json:"source_id"`
	Name        string         `json:"name"`
	UrlPattern  sql.NullString `json:"url_pattern"`
	ApiEndpoint sql.NullString `json:"api_endpoint"`
	ApiKey      sql.NullString `json:"api_key"`
	IsActive    sql.NullBool   `json:"is_active"`
}

func (q *Queries) UpdateDataSource(ctx context.Context, arg UpdateDataSourceParams) (DataSource, error) {
	row := q.db.QueryRowContext(ctx, updateDataSource,
		arg.SourceID,
		arg.Name,
		arg.UrlPattern,
		arg.ApiEndpoint,
		arg.ApiKey,
		arg.IsActive,
	)
	var i DataSource
	err := row.Scan(
		&i.SourceID,
		&i.Name,
		&i.UrlPattern,
		&i.ApiEndpoint,
		&i.ApiKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
