// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    cognito_sub, username, password
)
VALUES ($1, $2, $3)
RETURNING cognito_sub, username, password, created_at
`

type CreateUserParams struct {
	CognitoSub string `json:"cognito_sub"`
	Username   string `json:"username"`
	Password   string `json:"password"`
}

type CreateUserRow struct {
	CognitoSub string       `json:"cognito_sub"`
	Username   string       `json:"username"`
	Password   string       `json:"password"`
	CreatedAt  sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.CognitoSub, arg.Username, arg.Password)
	var i CreateUserRow
	err := row.Scan(
		&i.CognitoSub,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE cognito_sub = $1
`

func (q *Queries) DeleteUser(ctx context.Context, cognitoSub string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, cognitoSub)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT cognito_sub, username, password, created_at
FROM users
WHERE cognito_sub = $1
`

type GetUserByIDRow struct {
	CognitoSub string       `json:"cognito_sub"`
	Username   string       `json:"username"`
	Password   string       `json:"password"`
	CreatedAt  sql.NullTime `json:"created_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, cognitoSub string) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, cognitoSub)
	var i GetUserByIDRow
	err := row.Scan(
		&i.CognitoSub,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT cognito_sub, username, password, created_at
FROM users
WHERE username = $1
`

type GetUserByUsernameRow struct {
	CognitoSub string       `json:"cognito_sub"`
	Username   string       `json:"username"`
	Password   string       `json:"password"`
	CreatedAt  sql.NullTime `json:"created_at"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.CognitoSub,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT cognito_sub, username, password, created_at
FROM users
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	CognitoSub string       `json:"cognito_sub"`
	Username   string       `json:"username"`
	Password   string       `json:"password"`
	CreatedAt  sql.NullTime `json:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.CognitoSub,
			&i.Username,
			&i.Password,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET password = $2
WHERE cognito_sub = $1
RETURNING cognito_sub, username, password, created_at
`

type UpdateUserPasswordParams struct {
	CognitoSub string `json:"cognito_sub"`
	Password   string `json:"password"`
}

type UpdateUserPasswordRow struct {
	CognitoSub string       `json:"cognito_sub"`
	Username   string       `json:"username"`
	Password   string       `json:"password"`
	CreatedAt  sql.NullTime `json:"created_at"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (UpdateUserPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.CognitoSub, arg.Password)
	var i UpdateUserPasswordRow
	err := row.Scan(
		&i.CognitoSub,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
