// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: competitive_inteligence.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createCompetitiveIntelligence = `-- name: CreateCompetitiveIntelligence :one

INSERT INTO competitive_intelligence (
    brief_id, competitors_in_evaluation, preferred_vendor_bias, previous_vendor_history,
    competitive_strengths, competitive_weaknesses, pricing_expectations, feature_comparison_matrix,
    vendor_selection_criteria, criteria_weighting, evaluation_process, reference_requirements,
    proof_of_concept_needs, pilot_program_scope, final_presentation_format, decision_timeline
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
RETURNING id, brief_id, competitors_in_evaluation, preferred_vendor_bias, previous_vendor_history,
    competitive_strengths, competitive_weaknesses, pricing_expectations, feature_comparison_matrix,
    vendor_selection_criteria, criteria_weighting, evaluation_process, reference_requirements,
    proof_of_concept_needs, pilot_program_scope, final_presentation_format, decision_timeline,
    created_at, updated_at
`

type CreateCompetitiveIntelligenceParams struct {
	BriefID                 uuid.NullUUID         `json:"brief_id"`
	CompetitorsInEvaluation sql.NullString        `json:"competitors_in_evaluation"`
	PreferredVendorBias     sql.NullString        `json:"preferred_vendor_bias"`
	PreviousVendorHistory   sql.NullString        `json:"previous_vendor_history"`
	CompetitiveStrengths    sql.NullString        `json:"competitive_strengths"`
	CompetitiveWeaknesses   sql.NullString        `json:"competitive_weaknesses"`
	PricingExpectations     sql.NullString        `json:"pricing_expectations"`
	FeatureComparisonMatrix pqtype.NullRawMessage `json:"feature_comparison_matrix"`
	VendorSelectionCriteria sql.NullString        `json:"vendor_selection_criteria"`
	CriteriaWeighting       pqtype.NullRawMessage `json:"criteria_weighting"`
	EvaluationProcess       sql.NullString        `json:"evaluation_process"`
	ReferenceRequirements   sql.NullString        `json:"reference_requirements"`
	ProofOfConceptNeeds     sql.NullString        `json:"proof_of_concept_needs"`
	PilotProgramScope       sql.NullString        `json:"pilot_program_scope"`
	FinalPresentationFormat sql.NullString        `json:"final_presentation_format"`
	DecisionTimeline        sql.NullTime          `json:"decision_timeline"`
}

// =============================================================================
// COMPETITIVE INTELLIGENCE QUERIES
// =============================================================================
func (q *Queries) CreateCompetitiveIntelligence(ctx context.Context, arg CreateCompetitiveIntelligenceParams) (CompetitiveIntelligence, error) {
	row := q.db.QueryRowContext(ctx, createCompetitiveIntelligence,
		arg.BriefID,
		arg.CompetitorsInEvaluation,
		arg.PreferredVendorBias,
		arg.PreviousVendorHistory,
		arg.CompetitiveStrengths,
		arg.CompetitiveWeaknesses,
		arg.PricingExpectations,
		arg.FeatureComparisonMatrix,
		arg.VendorSelectionCriteria,
		arg.CriteriaWeighting,
		arg.EvaluationProcess,
		arg.ReferenceRequirements,
		arg.ProofOfConceptNeeds,
		arg.PilotProgramScope,
		arg.FinalPresentationFormat,
		arg.DecisionTimeline,
	)
	var i CompetitiveIntelligence
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.CompetitorsInEvaluation,
		&i.PreferredVendorBias,
		&i.PreviousVendorHistory,
		&i.CompetitiveStrengths,
		&i.CompetitiveWeaknesses,
		&i.PricingExpectations,
		&i.FeatureComparisonMatrix,
		&i.VendorSelectionCriteria,
		&i.CriteriaWeighting,
		&i.EvaluationProcess,
		&i.ReferenceRequirements,
		&i.ProofOfConceptNeeds,
		&i.PilotProgramScope,
		&i.FinalPresentationFormat,
		&i.DecisionTimeline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompetitiveIntelligence = `-- name: DeleteCompetitiveIntelligence :exec
DELETE FROM competitive_intelligence
WHERE brief_id = $1
`

func (q *Queries) DeleteCompetitiveIntelligence(ctx context.Context, briefID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteCompetitiveIntelligence, briefID)
	return err
}

const getCompetitiveIntelligenceByBriefID = `-- name: GetCompetitiveIntelligenceByBriefID :one
SELECT id, brief_id, competitors_in_evaluation, preferred_vendor_bias, previous_vendor_history,
    competitive_strengths, competitive_weaknesses, pricing_expectations, feature_comparison_matrix,
    vendor_selection_criteria, criteria_weighting, evaluation_process, reference_requirements,
    proof_of_concept_needs, pilot_program_scope, final_presentation_format, decision_timeline,
    created_at, updated_at
FROM competitive_intelligence
WHERE brief_id = $1
`

func (q *Queries) GetCompetitiveIntelligenceByBriefID(ctx context.Context, briefID uuid.NullUUID) (CompetitiveIntelligence, error) {
	row := q.db.QueryRowContext(ctx, getCompetitiveIntelligenceByBriefID, briefID)
	var i CompetitiveIntelligence
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.CompetitorsInEvaluation,
		&i.PreferredVendorBias,
		&i.PreviousVendorHistory,
		&i.CompetitiveStrengths,
		&i.CompetitiveWeaknesses,
		&i.PricingExpectations,
		&i.FeatureComparisonMatrix,
		&i.VendorSelectionCriteria,
		&i.CriteriaWeighting,
		&i.EvaluationProcess,
		&i.ReferenceRequirements,
		&i.ProofOfConceptNeeds,
		&i.PilotProgramScope,
		&i.FinalPresentationFormat,
		&i.DecisionTimeline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCompetitiveIntelligence = `-- name: UpdateCompetitiveIntelligence :one
UPDATE competitive_intelligence
SET competitors_in_evaluation = $2,
    preferred_vendor_bias = $3,
    previous_vendor_history = $4,
    competitive_strengths = $5,
    competitive_weaknesses = $6,
    pricing_expectations = $7,
    feature_comparison_matrix = $8,
    vendor_selection_criteria = $9,
    criteria_weighting = $10,
    evaluation_process = $11,
    reference_requirements = $12,
    proof_of_concept_needs = $13,
    pilot_program_scope = $14,
    final_presentation_format = $15,
    decision_timeline = $16,
    updated_at = CURRENT_TIMESTAMP
WHERE brief_id = $1
RETURNING id, brief_id, competitors_in_evaluation, preferred_vendor_bias, previous_vendor_history,
    competitive_strengths, competitive_weaknesses, pricing_expectations, feature_comparison_matrix,
    vendor_selection_criteria, criteria_weighting, evaluation_process, reference_requirements,
    proof_of_concept_needs, pilot_program_scope, final_presentation_format, decision_timeline,
    created_at, updated_at
`

type UpdateCompetitiveIntelligenceParams struct {
	BriefID                 uuid.NullUUID         `json:"brief_id"`
	CompetitorsInEvaluation sql.NullString        `json:"competitors_in_evaluation"`
	PreferredVendorBias     sql.NullString        `json:"preferred_vendor_bias"`
	PreviousVendorHistory   sql.NullString        `json:"previous_vendor_history"`
	CompetitiveStrengths    sql.NullString        `json:"competitive_strengths"`
	CompetitiveWeaknesses   sql.NullString        `json:"competitive_weaknesses"`
	PricingExpectations     sql.NullString        `json:"pricing_expectations"`
	FeatureComparisonMatrix pqtype.NullRawMessage `json:"feature_comparison_matrix"`
	VendorSelectionCriteria sql.NullString        `json:"vendor_selection_criteria"`
	CriteriaWeighting       pqtype.NullRawMessage `json:"criteria_weighting"`
	EvaluationProcess       sql.NullString        `json:"evaluation_process"`
	ReferenceRequirements   sql.NullString        `json:"reference_requirements"`
	ProofOfConceptNeeds     sql.NullString        `json:"proof_of_concept_needs"`
	PilotProgramScope       sql.NullString        `json:"pilot_program_scope"`
	FinalPresentationFormat sql.NullString        `json:"final_presentation_format"`
	DecisionTimeline        sql.NullTime          `json:"decision_timeline"`
}

func (q *Queries) UpdateCompetitiveIntelligence(ctx context.Context, arg UpdateCompetitiveIntelligenceParams) (CompetitiveIntelligence, error) {
	row := q.db.QueryRowContext(ctx, updateCompetitiveIntelligence,
		arg.BriefID,
		arg.CompetitorsInEvaluation,
		arg.PreferredVendorBias,
		arg.PreviousVendorHistory,
		arg.CompetitiveStrengths,
		arg.CompetitiveWeaknesses,
		arg.PricingExpectations,
		arg.FeatureComparisonMatrix,
		arg.VendorSelectionCriteria,
		arg.CriteriaWeighting,
		arg.EvaluationProcess,
		arg.ReferenceRequirements,
		arg.ProofOfConceptNeeds,
		arg.PilotProgramScope,
		arg.FinalPresentationFormat,
		arg.DecisionTimeline,
	)
	var i CompetitiveIntelligence
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.CompetitorsInEvaluation,
		&i.PreferredVendorBias,
		&i.PreviousVendorHistory,
		&i.CompetitiveStrengths,
		&i.CompetitiveWeaknesses,
		&i.PricingExpectations,
		&i.FeatureComparisonMatrix,
		&i.VendorSelectionCriteria,
		&i.CriteriaWeighting,
		&i.EvaluationProcess,
		&i.ReferenceRequirements,
		&i.ProofOfConceptNeeds,
		&i.PilotProgramScope,
		&i.FinalPresentationFormat,
		&i.DecisionTimeline,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
