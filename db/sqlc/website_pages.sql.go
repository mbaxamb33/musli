// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: website_pages.sql

package db

import (
	"context"
	"database/sql"
)

const createWebsitePage = `-- name: CreateWebsitePage :one
INSERT INTO website_pages (
    website_id, url, path, title, parent_page_id, depth, extract_status, datasource_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING page_id, website_id, url, path, title, parent_page_id, depth, last_extracted_at, extract_status, datasource_id
`

type CreateWebsitePageParams struct {
	WebsiteID     int32          `json:"website_id"`
	Url           string         `json:"url"`
	Path          string         `json:"path"`
	Title         sql.NullString `json:"title"`
	ParentPageID  sql.NullInt32  `json:"parent_page_id"`
	Depth         int32          `json:"depth"`
	ExtractStatus sql.NullString `json:"extract_status"`
	DatasourceID  sql.NullInt32  `json:"datasource_id"`
}

func (q *Queries) CreateWebsitePage(ctx context.Context, arg CreateWebsitePageParams) (WebsitePage, error) {
	row := q.db.QueryRowContext(ctx, createWebsitePage,
		arg.WebsiteID,
		arg.Url,
		arg.Path,
		arg.Title,
		arg.ParentPageID,
		arg.Depth,
		arg.ExtractStatus,
		arg.DatasourceID,
	)
	var i WebsitePage
	err := row.Scan(
		&i.PageID,
		&i.WebsiteID,
		&i.Url,
		&i.Path,
		&i.Title,
		&i.ParentPageID,
		&i.Depth,
		&i.LastExtractedAt,
		&i.ExtractStatus,
		&i.DatasourceID,
	)
	return i, err
}

const deleteWebsitePage = `-- name: DeleteWebsitePage :exec
DELETE FROM website_pages
WHERE page_id = $1
`

func (q *Queries) DeleteWebsitePage(ctx context.Context, pageID int32) error {
	_, err := q.db.ExecContext(ctx, deleteWebsitePage, pageID)
	return err
}

const getPagesForExtraction = `-- name: GetPagesForExtraction :many
SELECT page_id, website_id, url, path, title, parent_page_id, depth, last_extracted_at, extract_status, datasource_id FROM website_pages
WHERE extract_status = 'pending' OR 
      (extract_status = 'completed' AND last_extracted_at < NOW() - INTERVAL '30 days')
ORDER BY last_extracted_at ASC NULLS FIRST
LIMIT $1
`

func (q *Queries) GetPagesForExtraction(ctx context.Context, limit int32) ([]WebsitePage, error) {
	rows, err := q.db.QueryContext(ctx, getPagesForExtraction, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebsitePage
	for rows.Next() {
		var i WebsitePage
		if err := rows.Scan(
			&i.PageID,
			&i.WebsiteID,
			&i.Url,
			&i.Path,
			&i.Title,
			&i.ParentPageID,
			&i.Depth,
			&i.LastExtractedAt,
			&i.ExtractStatus,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWebsitePageByID = `-- name: GetWebsitePageByID :one
SELECT page_id, website_id, url, path, title, parent_page_id, depth, last_extracted_at, extract_status, datasource_id FROM website_pages
WHERE page_id = $1
`

func (q *Queries) GetWebsitePageByID(ctx context.Context, pageID int32) (WebsitePage, error) {
	row := q.db.QueryRowContext(ctx, getWebsitePageByID, pageID)
	var i WebsitePage
	err := row.Scan(
		&i.PageID,
		&i.WebsiteID,
		&i.Url,
		&i.Path,
		&i.Title,
		&i.ParentPageID,
		&i.Depth,
		&i.LastExtractedAt,
		&i.ExtractStatus,
		&i.DatasourceID,
	)
	return i, err
}

const getWebsitePageByURL = `-- name: GetWebsitePageByURL :one
SELECT page_id, website_id, url, path, title, parent_page_id, depth, last_extracted_at, extract_status, datasource_id FROM website_pages
WHERE website_id = $1 AND url = $2
`

type GetWebsitePageByURLParams struct {
	WebsiteID int32  `json:"website_id"`
	Url       string `json:"url"`
}

func (q *Queries) GetWebsitePageByURL(ctx context.Context, arg GetWebsitePageByURLParams) (WebsitePage, error) {
	row := q.db.QueryRowContext(ctx, getWebsitePageByURL, arg.WebsiteID, arg.Url)
	var i WebsitePage
	err := row.Scan(
		&i.PageID,
		&i.WebsiteID,
		&i.Url,
		&i.Path,
		&i.Title,
		&i.ParentPageID,
		&i.Depth,
		&i.LastExtractedAt,
		&i.ExtractStatus,
		&i.DatasourceID,
	)
	return i, err
}

const listWebsitePageTree = `-- name: ListWebsitePageTree :many
WITH RECURSIVE page_tree AS (
    -- Base case: select root pages (parent_page_id IS NULL)
    SELECT 
        wp.page_id, 
        wp.website_id, 
        wp.url, 
        wp.path, 
        wp.title, 
        wp.parent_page_id, 
        wp.depth, 
        wp.last_extracted_at, 
        wp.extract_status, 
        wp.datasource_id,
        wp.title AS page_path
    FROM website_pages wp
    WHERE wp.website_id = $1 AND wp.parent_page_id IS NULL
    
    UNION ALL
    
    -- Recursive case: join with pages that have a parent in our tree
    SELECT 
        wp.page_id, 
        wp.website_id, 
        wp.url, 
        wp.path, 
        wp.title, 
        wp.parent_page_id, 
        wp.depth, 
        wp.last_extracted_at, 
        wp.extract_status, 
        wp.datasource_id,
        pt.page_path || ' > ' || wp.title AS page_path
    FROM website_pages wp
    JOIN page_tree pt ON wp.parent_page_id = pt.page_id
)
SELECT page_id, website_id, url, path, title, parent_page_id, depth, last_extracted_at, extract_status, datasource_id, page_path FROM page_tree
ORDER BY page_path
LIMIT $2 OFFSET $3
`

type ListWebsitePageTreeParams struct {
	WebsiteID int32 `json:"website_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type ListWebsitePageTreeRow struct {
	PageID          int32          `json:"page_id"`
	WebsiteID       int32          `json:"website_id"`
	Url             string         `json:"url"`
	Path            string         `json:"path"`
	Title           sql.NullString `json:"title"`
	ParentPageID    sql.NullInt32  `json:"parent_page_id"`
	Depth           int32          `json:"depth"`
	LastExtractedAt sql.NullTime   `json:"last_extracted_at"`
	ExtractStatus   sql.NullString `json:"extract_status"`
	DatasourceID    sql.NullInt32  `json:"datasource_id"`
	PagePath        sql.NullString `json:"page_path"`
}

func (q *Queries) ListWebsitePageTree(ctx context.Context, arg ListWebsitePageTreeParams) ([]ListWebsitePageTreeRow, error) {
	rows, err := q.db.QueryContext(ctx, listWebsitePageTree, arg.WebsiteID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListWebsitePageTreeRow
	for rows.Next() {
		var i ListWebsitePageTreeRow
		if err := rows.Scan(
			&i.PageID,
			&i.WebsiteID,
			&i.Url,
			&i.Path,
			&i.Title,
			&i.ParentPageID,
			&i.Depth,
			&i.LastExtractedAt,
			&i.ExtractStatus,
			&i.DatasourceID,
			&i.PagePath,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWebsitePagesByWebsiteID = `-- name: ListWebsitePagesByWebsiteID :many
SELECT page_id, website_id, url, path, title, parent_page_id, depth, last_extracted_at, extract_status, datasource_id FROM website_pages
WHERE website_id = $1
ORDER BY path ASC
LIMIT $2 OFFSET $3
`

type ListWebsitePagesByWebsiteIDParams struct {
	WebsiteID int32 `json:"website_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListWebsitePagesByWebsiteID(ctx context.Context, arg ListWebsitePagesByWebsiteIDParams) ([]WebsitePage, error) {
	rows, err := q.db.QueryContext(ctx, listWebsitePagesByWebsiteID, arg.WebsiteID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WebsitePage
	for rows.Next() {
		var i WebsitePage
		if err := rows.Scan(
			&i.PageID,
			&i.WebsiteID,
			&i.Url,
			&i.Path,
			&i.Title,
			&i.ParentPageID,
			&i.Depth,
			&i.LastExtractedAt,
			&i.ExtractStatus,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExtractStatus = `-- name: UpdateExtractStatus :one
UPDATE website_pages
SET last_extracted_at = CURRENT_TIMESTAMP,
    extract_status = $3
WHERE website_id = $1 AND page_id = $2
RETURNING page_id, website_id, url, path, title, parent_page_id, depth, last_extracted_at, extract_status, datasource_id
`

type UpdateExtractStatusParams struct {
	WebsiteID     int32          `json:"website_id"`
	PageID        int32          `json:"page_id"`
	ExtractStatus sql.NullString `json:"extract_status"`
}

func (q *Queries) UpdateExtractStatus(ctx context.Context, arg UpdateExtractStatusParams) (WebsitePage, error) {
	row := q.db.QueryRowContext(ctx, updateExtractStatus, arg.WebsiteID, arg.PageID, arg.ExtractStatus)
	var i WebsitePage
	err := row.Scan(
		&i.PageID,
		&i.WebsiteID,
		&i.Url,
		&i.Path,
		&i.Title,
		&i.ParentPageID,
		&i.Depth,
		&i.LastExtractedAt,
		&i.ExtractStatus,
		&i.DatasourceID,
	)
	return i, err
}

const updateWebsitePage = `-- name: UpdateWebsitePage :one
UPDATE website_pages
SET title = $3,
    parent_page_id = $4,
    last_extracted_at = $5,
    extract_status = $6,
    datasource_id = $7
WHERE website_id = $1 AND url = $2
RETURNING page_id, website_id, url, path, title, parent_page_id, depth, last_extracted_at, extract_status, datasource_id
`

type UpdateWebsitePageParams struct {
	WebsiteID       int32          `json:"website_id"`
	Url             string         `json:"url"`
	Title           sql.NullString `json:"title"`
	ParentPageID    sql.NullInt32  `json:"parent_page_id"`
	LastExtractedAt sql.NullTime   `json:"last_extracted_at"`
	ExtractStatus   sql.NullString `json:"extract_status"`
	DatasourceID    sql.NullInt32  `json:"datasource_id"`
}

func (q *Queries) UpdateWebsitePage(ctx context.Context, arg UpdateWebsitePageParams) (WebsitePage, error) {
	row := q.db.QueryRowContext(ctx, updateWebsitePage,
		arg.WebsiteID,
		arg.Url,
		arg.Title,
		arg.ParentPageID,
		arg.LastExtractedAt,
		arg.ExtractStatus,
		arg.DatasourceID,
	)
	var i WebsitePage
	err := row.Scan(
		&i.PageID,
		&i.WebsiteID,
		&i.Url,
		&i.Path,
		&i.Title,
		&i.ParentPageID,
		&i.Depth,
		&i.LastExtractedAt,
		&i.ExtractStatus,
		&i.DatasourceID,
	)
	return i, err
}
