// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sales_process_tracking.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSalesProcessTracking = `-- name: CreateSalesProcessTracking :one

INSERT INTO sales_process_tracking (
    brief_id, lead_source, opportunity_stage, probability_percentage, weighted_value,
    next_action_required, key_milestones, sales_velocity, deal_momentum, competitive_position,
    win_probability_factors
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, brief_id, lead_source, opportunity_stage, probability_percentage, weighted_value,
    next_action_required, key_milestones, sales_velocity, deal_momentum, competitive_position,
    win_probability_factors, created_at, updated_at
`

type CreateSalesProcessTrackingParams struct {
	BriefID               uuid.NullUUID  `json:"brief_id"`
	LeadSource            sql.NullString `json:"lead_source"`
	OpportunityStage      sql.NullString `json:"opportunity_stage"`
	ProbabilityPercentage sql.NullInt32  `json:"probability_percentage"`
	WeightedValue         sql.NullString `json:"weighted_value"`
	NextActionRequired    sql.NullString `json:"next_action_required"`
	KeyMilestones         sql.NullString `json:"key_milestones"`
	SalesVelocity         sql.NullString `json:"sales_velocity"`
	DealMomentum          sql.NullString `json:"deal_momentum"`
	CompetitivePosition   sql.NullString `json:"competitive_position"`
	WinProbabilityFactors sql.NullString `json:"win_probability_factors"`
}

// =============================================================================
// SALES PROCESS TRACKING QUERIES
// =============================================================================
func (q *Queries) CreateSalesProcessTracking(ctx context.Context, arg CreateSalesProcessTrackingParams) (SalesProcessTracking, error) {
	row := q.db.QueryRowContext(ctx, createSalesProcessTracking,
		arg.BriefID,
		arg.LeadSource,
		arg.OpportunityStage,
		arg.ProbabilityPercentage,
		arg.WeightedValue,
		arg.NextActionRequired,
		arg.KeyMilestones,
		arg.SalesVelocity,
		arg.DealMomentum,
		arg.CompetitivePosition,
		arg.WinProbabilityFactors,
	)
	var i SalesProcessTracking
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.LeadSource,
		&i.OpportunityStage,
		&i.ProbabilityPercentage,
		&i.WeightedValue,
		&i.NextActionRequired,
		&i.KeyMilestones,
		&i.SalesVelocity,
		&i.DealMomentum,
		&i.CompetitivePosition,
		&i.WinProbabilityFactors,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSalesProcessTracking = `-- name: DeleteSalesProcessTracking :exec
DELETE FROM sales_process_tracking
WHERE brief_id = $1
`

func (q *Queries) DeleteSalesProcessTracking(ctx context.Context, briefID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteSalesProcessTracking, briefID)
	return err
}

const getSalesProcessTrackingByBriefID = `-- name: GetSalesProcessTrackingByBriefID :one
SELECT id, brief_id, lead_source, opportunity_stage, probability_percentage, weighted_value,
    next_action_required, key_milestones, sales_velocity, deal_momentum, competitive_position,
    win_probability_factors, created_at, updated_at
FROM sales_process_tracking
WHERE brief_id = $1
`

func (q *Queries) GetSalesProcessTrackingByBriefID(ctx context.Context, briefID uuid.NullUUID) (SalesProcessTracking, error) {
	row := q.db.QueryRowContext(ctx, getSalesProcessTrackingByBriefID, briefID)
	var i SalesProcessTracking
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.LeadSource,
		&i.OpportunityStage,
		&i.ProbabilityPercentage,
		&i.WeightedValue,
		&i.NextActionRequired,
		&i.KeyMilestones,
		&i.SalesVelocity,
		&i.DealMomentum,
		&i.CompetitivePosition,
		&i.WinProbabilityFactors,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSalesProcessTracking = `-- name: UpdateSalesProcessTracking :one
UPDATE sales_process_tracking
SET lead_source = $2,
    opportunity_stage = $3,
    probability_percentage = $4,
    weighted_value = $5,
    next_action_required = $6,
    key_milestones = $7,
    sales_velocity = $8,
    deal_momentum = $9,
    competitive_position = $10,
    win_probability_factors = $11,
    updated_at = CURRENT_TIMESTAMP
WHERE brief_id = $1
RETURNING id, brief_id, lead_source, opportunity_stage, probability_percentage, weighted_value,
    next_action_required, key_milestones, sales_velocity, deal_momentum, competitive_position,
    win_probability_factors, created_at, updated_at
`

type UpdateSalesProcessTrackingParams struct {
	BriefID               uuid.NullUUID  `json:"brief_id"`
	LeadSource            sql.NullString `json:"lead_source"`
	OpportunityStage      sql.NullString `json:"opportunity_stage"`
	ProbabilityPercentage sql.NullInt32  `json:"probability_percentage"`
	WeightedValue         sql.NullString `json:"weighted_value"`
	NextActionRequired    sql.NullString `json:"next_action_required"`
	KeyMilestones         sql.NullString `json:"key_milestones"`
	SalesVelocity         sql.NullString `json:"sales_velocity"`
	DealMomentum          sql.NullString `json:"deal_momentum"`
	CompetitivePosition   sql.NullString `json:"competitive_position"`
	WinProbabilityFactors sql.NullString `json:"win_probability_factors"`
}

func (q *Queries) UpdateSalesProcessTracking(ctx context.Context, arg UpdateSalesProcessTrackingParams) (SalesProcessTracking, error) {
	row := q.db.QueryRowContext(ctx, updateSalesProcessTracking,
		arg.BriefID,
		arg.LeadSource,
		arg.OpportunityStage,
		arg.ProbabilityPercentage,
		arg.WeightedValue,
		arg.NextActionRequired,
		arg.KeyMilestones,
		arg.SalesVelocity,
		arg.DealMomentum,
		arg.CompetitivePosition,
		arg.WinProbabilityFactors,
	)
	var i SalesProcessTracking
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.LeadSource,
		&i.OpportunityStage,
		&i.ProbabilityPercentage,
		&i.WeightedValue,
		&i.NextActionRequired,
		&i.KeyMilestones,
		&i.SalesVelocity,
		&i.DealMomentum,
		&i.CompetitivePosition,
		&i.WinProbabilityFactors,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
