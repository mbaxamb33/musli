// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: approach_strategies.sql

package db

import (
	"context"
	"database/sql"
)

const createApproachStrategy = `-- name: CreateApproachStrategy :one
INSERT INTO approach_strategies (
  name,
  description,
  recommended_score_min,
  recommended_score_max
) VALUES (
  $1, $2, $3, $4
) RETURNING strategy_id, name, description, recommended_score_min, recommended_score_max, created_at, updated_at
`

type CreateApproachStrategyParams struct {
	Name                string         `json:"name"`
	Description         sql.NullString `json:"description"`
	RecommendedScoreMin sql.NullString `json:"recommended_score_min"`
	RecommendedScoreMax sql.NullString `json:"recommended_score_max"`
}

func (q *Queries) CreateApproachStrategy(ctx context.Context, arg CreateApproachStrategyParams) (ApproachStrategy, error) {
	row := q.db.QueryRowContext(ctx, createApproachStrategy,
		arg.Name,
		arg.Description,
		arg.RecommendedScoreMin,
		arg.RecommendedScoreMax,
	)
	var i ApproachStrategy
	err := row.Scan(
		&i.StrategyID,
		&i.Name,
		&i.Description,
		&i.RecommendedScoreMin,
		&i.RecommendedScoreMax,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteApproachStrategy = `-- name: DeleteApproachStrategy :exec
DELETE FROM approach_strategies
WHERE strategy_id = $1
`

func (q *Queries) DeleteApproachStrategy(ctx context.Context, strategyID int32) error {
	_, err := q.db.ExecContext(ctx, deleteApproachStrategy, strategyID)
	return err
}

const getApproachStrategy = `-- name: GetApproachStrategy :one
SELECT strategy_id, name, description, recommended_score_min, recommended_score_max, created_at, updated_at FROM approach_strategies
WHERE strategy_id = $1 LIMIT 1
`

func (q *Queries) GetApproachStrategy(ctx context.Context, strategyID int32) (ApproachStrategy, error) {
	row := q.db.QueryRowContext(ctx, getApproachStrategy, strategyID)
	var i ApproachStrategy
	err := row.Scan(
		&i.StrategyID,
		&i.Name,
		&i.Description,
		&i.RecommendedScoreMin,
		&i.RecommendedScoreMax,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getApproachStrategyByName = `-- name: GetApproachStrategyByName :one
SELECT strategy_id, name, description, recommended_score_min, recommended_score_max, created_at, updated_at FROM approach_strategies
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetApproachStrategyByName(ctx context.Context, name string) (ApproachStrategy, error) {
	row := q.db.QueryRowContext(ctx, getApproachStrategyByName, name)
	var i ApproachStrategy
	err := row.Scan(
		&i.StrategyID,
		&i.Name,
		&i.Description,
		&i.RecommendedScoreMin,
		&i.RecommendedScoreMax,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getApproachStrategyWithUsageCount = `-- name: GetApproachStrategyWithUsageCount :many
SELECT 
  approach_strategies.strategy_id, approach_strategies.name, approach_strategies.description, approach_strategies.recommended_score_min, approach_strategies.recommended_score_max, approach_strategies.created_at, approach_strategies.updated_at,
  COUNT(pc.project_company_id) AS usage_count
FROM approach_strategies
LEFT JOIN project_companies pc ON approach_strategies.strategy_id = pc.approach_strategy_id
GROUP BY approach_strategies.strategy_id
ORDER BY approach_strategies.recommended_score_min
LIMIT $1 OFFSET $2
`

type GetApproachStrategyWithUsageCountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetApproachStrategyWithUsageCountRow struct {
	StrategyID          int32          `json:"strategy_id"`
	Name                string         `json:"name"`
	Description         sql.NullString `json:"description"`
	RecommendedScoreMin sql.NullString `json:"recommended_score_min"`
	RecommendedScoreMax sql.NullString `json:"recommended_score_max"`
	CreatedAt           sql.NullTime   `json:"created_at"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
	UsageCount          int64          `json:"usage_count"`
}

func (q *Queries) GetApproachStrategyWithUsageCount(ctx context.Context, arg GetApproachStrategyWithUsageCountParams) ([]GetApproachStrategyWithUsageCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getApproachStrategyWithUsageCount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetApproachStrategyWithUsageCountRow
	for rows.Next() {
		var i GetApproachStrategyWithUsageCountRow
		if err := rows.Scan(
			&i.StrategyID,
			&i.Name,
			&i.Description,
			&i.RecommendedScoreMin,
			&i.RecommendedScoreMax,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UsageCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecommendedStrategyForScore = `-- name: GetRecommendedStrategyForScore :one
SELECT strategy_id, name, description, recommended_score_min, recommended_score_max, created_at, updated_at FROM approach_strategies
WHERE recommended_score_min <= $1 AND recommended_score_max >= $1
LIMIT 1
`

func (q *Queries) GetRecommendedStrategyForScore(ctx context.Context, recommendedScoreMin sql.NullString) (ApproachStrategy, error) {
	row := q.db.QueryRowContext(ctx, getRecommendedStrategyForScore, recommendedScoreMin)
	var i ApproachStrategy
	err := row.Scan(
		&i.StrategyID,
		&i.Name,
		&i.Description,
		&i.RecommendedScoreMin,
		&i.RecommendedScoreMax,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listApproachStrategies = `-- name: ListApproachStrategies :many
SELECT strategy_id, name, description, recommended_score_min, recommended_score_max, created_at, updated_at FROM approach_strategies
ORDER BY recommended_score_min
LIMIT $1 OFFSET $2
`

type ListApproachStrategiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListApproachStrategies(ctx context.Context, arg ListApproachStrategiesParams) ([]ApproachStrategy, error) {
	rows, err := q.db.QueryContext(ctx, listApproachStrategies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApproachStrategy
	for rows.Next() {
		var i ApproachStrategy
		if err := rows.Scan(
			&i.StrategyID,
			&i.Name,
			&i.Description,
			&i.RecommendedScoreMin,
			&i.RecommendedScoreMax,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApproachStrategiesInScoreRange = `-- name: ListApproachStrategiesInScoreRange :many
SELECT strategy_id, name, description, recommended_score_min, recommended_score_max, created_at, updated_at FROM approach_strategies
WHERE recommended_score_min <= $1 AND recommended_score_max >= $1
ORDER BY name
LIMIT $2 OFFSET $3
`

type ListApproachStrategiesInScoreRangeParams struct {
	RecommendedScoreMin sql.NullString `json:"recommended_score_min"`
	Limit               int32          `json:"limit"`
	Offset              int32          `json:"offset"`
}

func (q *Queries) ListApproachStrategiesInScoreRange(ctx context.Context, arg ListApproachStrategiesInScoreRangeParams) ([]ApproachStrategy, error) {
	rows, err := q.db.QueryContext(ctx, listApproachStrategiesInScoreRange, arg.RecommendedScoreMin, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApproachStrategy
	for rows.Next() {
		var i ApproachStrategy
		if err := rows.Scan(
			&i.StrategyID,
			&i.Name,
			&i.Description,
			&i.RecommendedScoreMin,
			&i.RecommendedScoreMax,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApproachStrategy = `-- name: UpdateApproachStrategy :one
UPDATE approach_strategies
SET
  name = COALESCE($2, name),
  description = COALESCE($3, description),
  recommended_score_min = COALESCE($4, recommended_score_min),
  recommended_score_max = COALESCE($5, recommended_score_max),
  updated_at = CURRENT_TIMESTAMP
WHERE strategy_id = $1
RETURNING strategy_id, name, description, recommended_score_min, recommended_score_max, created_at, updated_at
`

type UpdateApproachStrategyParams struct {
	StrategyID          int32          `json:"strategy_id"`
	Name                string         `json:"name"`
	Description         sql.NullString `json:"description"`
	RecommendedScoreMin sql.NullString `json:"recommended_score_min"`
	RecommendedScoreMax sql.NullString `json:"recommended_score_max"`
}

func (q *Queries) UpdateApproachStrategy(ctx context.Context, arg UpdateApproachStrategyParams) (ApproachStrategy, error) {
	row := q.db.QueryRowContext(ctx, updateApproachStrategy,
		arg.StrategyID,
		arg.Name,
		arg.Description,
		arg.RecommendedScoreMin,
		arg.RecommendedScoreMax,
	)
	var i ApproachStrategy
	err := row.Scan(
		&i.StrategyID,
		&i.Name,
		&i.Description,
		&i.RecommendedScoreMin,
		&i.RecommendedScoreMax,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
