// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: company_contacts.sql

package db

import (
	"context"
	"database/sql"
)

const addContactToCompany = `-- name: AddContactToCompany :one
INSERT INTO company_contacts (
  company_id,
  contact_id,
  is_primary
) VALUES (
  $1, $2, $3
) RETURNING company_contact_id, company_id, contact_id, is_primary, created_at, updated_at
`

type AddContactToCompanyParams struct {
	CompanyID int32        `json:"company_id"`
	ContactID int32        `json:"contact_id"`
	IsPrimary sql.NullBool `json:"is_primary"`
}

func (q *Queries) AddContactToCompany(ctx context.Context, arg AddContactToCompanyParams) (CompanyContact, error) {
	row := q.db.QueryRowContext(ctx, addContactToCompany, arg.CompanyID, arg.ContactID, arg.IsPrimary)
	var i CompanyContact
	err := row.Scan(
		&i.CompanyContactID,
		&i.CompanyID,
		&i.ContactID,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createContactAndLinkToCompany = `-- name: CreateContactAndLinkToCompany :one
WITH new_contact AS (
  INSERT INTO contacts (
    first_name,
    last_name,
    title,
    email,
    phone
  ) VALUES (
    $1, $2, $3, $4, $5
  ) RETURNING contact_id, first_name, last_name, title, email, phone, created_at, updated_at
)
INSERT INTO company_contacts (
  company_id,
  contact_id,
  is_primary
) VALUES (
  $6,
  (SELECT contact_id FROM new_contact),
  $7
) RETURNING company_contact_id
`

type CreateContactAndLinkToCompanyParams struct {
	FirstName string         `json:"first_name"`
	LastName  string         `json:"last_name"`
	Title     sql.NullString `json:"title"`
	Email     sql.NullString `json:"email"`
	Phone     sql.NullString `json:"phone"`
	CompanyID int32          `json:"company_id"`
	IsPrimary sql.NullBool   `json:"is_primary"`
}

func (q *Queries) CreateContactAndLinkToCompany(ctx context.Context, arg CreateContactAndLinkToCompanyParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createContactAndLinkToCompany,
		arg.FirstName,
		arg.LastName,
		arg.Title,
		arg.Email,
		arg.Phone,
		arg.CompanyID,
		arg.IsPrimary,
	)
	var company_contact_id int32
	err := row.Scan(&company_contact_id)
	return company_contact_id, err
}

const getCompaniesForContact = `-- name: GetCompaniesForContact :many
SELECT 
  c.company_id, c.name, c.industry, c.size, c.location, c.website, c.description, c.created_at, c.updated_at,
  cc.is_primary
FROM companies c
JOIN company_contacts cc ON c.company_id = cc.company_id
WHERE cc.contact_id = $1
ORDER BY c.name
LIMIT $2 OFFSET $3
`

type GetCompaniesForContactParams struct {
	ContactID int32 `json:"contact_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetCompaniesForContactRow struct {
	CompanyID   int32          `json:"company_id"`
	Name        string         `json:"name"`
	Industry    sql.NullString `json:"industry"`
	Size        sql.NullString `json:"size"`
	Location    sql.NullString `json:"location"`
	Website     sql.NullString `json:"website"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
	IsPrimary   sql.NullBool   `json:"is_primary"`
}

func (q *Queries) GetCompaniesForContact(ctx context.Context, arg GetCompaniesForContactParams) ([]GetCompaniesForContactRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompaniesForContact, arg.ContactID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompaniesForContactRow
	for rows.Next() {
		var i GetCompaniesForContactRow
		if err := rows.Scan(
			&i.CompanyID,
			&i.Name,
			&i.Industry,
			&i.Size,
			&i.Location,
			&i.Website,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsPrimary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyContact = `-- name: GetCompanyContact :one
SELECT company_contact_id, company_id, contact_id, is_primary, created_at, updated_at FROM company_contacts
WHERE company_id = $1 AND contact_id = $2
LIMIT 1
`

type GetCompanyContactParams struct {
	CompanyID int32 `json:"company_id"`
	ContactID int32 `json:"contact_id"`
}

func (q *Queries) GetCompanyContact(ctx context.Context, arg GetCompanyContactParams) (CompanyContact, error) {
	row := q.db.QueryRowContext(ctx, getCompanyContact, arg.CompanyID, arg.ContactID)
	var i CompanyContact
	err := row.Scan(
		&i.CompanyContactID,
		&i.CompanyID,
		&i.ContactID,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyContactById = `-- name: GetCompanyContactById :one
SELECT company_contact_id, company_id, contact_id, is_primary, created_at, updated_at FROM company_contacts
WHERE company_contact_id = $1
LIMIT 1
`

func (q *Queries) GetCompanyContactById(ctx context.Context, companyContactID int32) (CompanyContact, error) {
	row := q.db.QueryRowContext(ctx, getCompanyContactById, companyContactID)
	var i CompanyContact
	err := row.Scan(
		&i.CompanyContactID,
		&i.CompanyID,
		&i.ContactID,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCompanyContacts = `-- name: ListCompanyContacts :many
SELECT 
  cc.company_contact_id, cc.company_id, cc.contact_id, cc.is_primary, cc.created_at, cc.updated_at,
  c.first_name,
  c.last_name,
  c.title,
  c.email,
  c.phone
FROM company_contacts cc
JOIN contacts c ON cc.contact_id = c.contact_id
WHERE cc.company_id = $1
ORDER BY cc.is_primary DESC, c.last_name, c.first_name
LIMIT $2 OFFSET $3
`

type ListCompanyContactsParams struct {
	CompanyID int32 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type ListCompanyContactsRow struct {
	CompanyContactID int32          `json:"company_contact_id"`
	CompanyID        int32          `json:"company_id"`
	ContactID        int32          `json:"contact_id"`
	IsPrimary        sql.NullBool   `json:"is_primary"`
	CreatedAt        sql.NullTime   `json:"created_at"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
	FirstName        string         `json:"first_name"`
	LastName         string         `json:"last_name"`
	Title            sql.NullString `json:"title"`
	Email            sql.NullString `json:"email"`
	Phone            sql.NullString `json:"phone"`
}

func (q *Queries) ListCompanyContacts(ctx context.Context, arg ListCompanyContactsParams) ([]ListCompanyContactsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCompanyContacts, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCompanyContactsRow
	for rows.Next() {
		var i ListCompanyContactsRow
		if err := rows.Scan(
			&i.CompanyContactID,
			&i.CompanyID,
			&i.ContactID,
			&i.IsPrimary,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.FirstName,
			&i.LastName,
			&i.Title,
			&i.Email,
			&i.Phone,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCompanyContactById = `-- name: RemoveCompanyContactById :exec
DELETE FROM company_contacts
WHERE company_contact_id = $1
`

func (q *Queries) RemoveCompanyContactById(ctx context.Context, companyContactID int32) error {
	_, err := q.db.ExecContext(ctx, removeCompanyContactById, companyContactID)
	return err
}

const removeContactFromCompany = `-- name: RemoveContactFromCompany :exec
DELETE FROM company_contacts
WHERE company_id = $1 AND contact_id = $2
`

type RemoveContactFromCompanyParams struct {
	CompanyID int32 `json:"company_id"`
	ContactID int32 `json:"contact_id"`
}

func (q *Queries) RemoveContactFromCompany(ctx context.Context, arg RemoveContactFromCompanyParams) error {
	_, err := q.db.ExecContext(ctx, removeContactFromCompany, arg.CompanyID, arg.ContactID)
	return err
}

const setContactAsPrimary = `-- name: SetContactAsPrimary :one
UPDATE company_contacts
SET 
  is_primary = TRUE,
  updated_at = CURRENT_TIMESTAMP
WHERE company_id = $1 AND contact_id = $2
RETURNING company_contact_id, company_id, contact_id, is_primary, created_at, updated_at
`

type SetContactAsPrimaryParams struct {
	CompanyID int32 `json:"company_id"`
	ContactID int32 `json:"contact_id"`
}

// Then set the specific contact as primary
func (q *Queries) SetContactAsPrimary(ctx context.Context, arg SetContactAsPrimaryParams) (CompanyContact, error) {
	row := q.db.QueryRowContext(ctx, setContactAsPrimary, arg.CompanyID, arg.ContactID)
	var i CompanyContact
	err := row.Scan(
		&i.CompanyContactID,
		&i.CompanyID,
		&i.ContactID,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setPrimaryContact = `-- name: SetPrimaryContact :exec
UPDATE company_contacts
SET 
  is_primary = FALSE,
  updated_at = CURRENT_TIMESTAMP
WHERE company_id = $1
`

// First, set all contacts for the company to not primary
func (q *Queries) SetPrimaryContact(ctx context.Context, companyID int32) error {
	_, err := q.db.ExecContext(ctx, setPrimaryContact, companyID)
	return err
}

const updateCompanyContact = `-- name: UpdateCompanyContact :one
UPDATE company_contacts
SET
  is_primary = $3,
  updated_at = CURRENT_TIMESTAMP
WHERE company_id = $1 AND contact_id = $2
RETURNING company_contact_id, company_id, contact_id, is_primary, created_at, updated_at
`

type UpdateCompanyContactParams struct {
	CompanyID int32        `json:"company_id"`
	ContactID int32        `json:"contact_id"`
	IsPrimary sql.NullBool `json:"is_primary"`
}

func (q *Queries) UpdateCompanyContact(ctx context.Context, arg UpdateCompanyContactParams) (CompanyContact, error) {
	row := q.db.QueryRowContext(ctx, updateCompanyContact, arg.CompanyID, arg.ContactID, arg.IsPrimary)
	var i CompanyContact
	err := row.Scan(
		&i.CompanyContactID,
		&i.CompanyID,
		&i.ContactID,
		&i.IsPrimary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
