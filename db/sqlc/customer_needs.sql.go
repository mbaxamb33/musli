// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer_needs.sql

package db

import (
	"context"
)

const createCustomerNeed = `-- name: CreateCustomerNeed :one
INSERT INTO customer_needs (
    sales_process_id, need_description
)
VALUES ($1, $2)
RETURNING need_id, sales_process_id, need_description, created_at
`

type CreateCustomerNeedParams struct {
	SalesProcessID  int32  `json:"sales_process_id"`
	NeedDescription string `json:"need_description"`
}

func (q *Queries) CreateCustomerNeed(ctx context.Context, arg CreateCustomerNeedParams) (CustomerNeed, error) {
	row := q.db.QueryRowContext(ctx, createCustomerNeed, arg.SalesProcessID, arg.NeedDescription)
	var i CustomerNeed
	err := row.Scan(
		&i.NeedID,
		&i.SalesProcessID,
		&i.NeedDescription,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCustomerNeed = `-- name: DeleteCustomerNeed :exec
DELETE FROM customer_needs
WHERE need_id = $1
`

func (q *Queries) DeleteCustomerNeed(ctx context.Context, needID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCustomerNeed, needID)
	return err
}

const getCustomerNeedByID = `-- name: GetCustomerNeedByID :one
SELECT need_id, sales_process_id, need_description, created_at
FROM customer_needs
WHERE need_id = $1
`

func (q *Queries) GetCustomerNeedByID(ctx context.Context, needID int32) (CustomerNeed, error) {
	row := q.db.QueryRowContext(ctx, getCustomerNeedByID, needID)
	var i CustomerNeed
	err := row.Scan(
		&i.NeedID,
		&i.SalesProcessID,
		&i.NeedDescription,
		&i.CreatedAt,
	)
	return i, err
}

const listNeedsBySalesProcess = `-- name: ListNeedsBySalesProcess :many
SELECT need_id, sales_process_id, need_description, created_at
FROM customer_needs
WHERE sales_process_id = $1
ORDER BY created_at ASC
LIMIT $2 OFFSET $3
`

type ListNeedsBySalesProcessParams struct {
	SalesProcessID int32 `json:"sales_process_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListNeedsBySalesProcess(ctx context.Context, arg ListNeedsBySalesProcessParams) ([]CustomerNeed, error) {
	rows, err := q.db.QueryContext(ctx, listNeedsBySalesProcess, arg.SalesProcessID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CustomerNeed
	for rows.Next() {
		var i CustomerNeed
		if err := rows.Scan(
			&i.NeedID,
			&i.SalesProcessID,
			&i.NeedDescription,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomerNeed = `-- name: UpdateCustomerNeed :one
UPDATE customer_needs
SET need_description = $2
WHERE need_id = $1
RETURNING need_id, sales_process_id, need_description, created_at
`

type UpdateCustomerNeedParams struct {
	NeedID          int32  `json:"need_id"`
	NeedDescription string `json:"need_description"`
}

func (q *Queries) UpdateCustomerNeed(ctx context.Context, arg UpdateCustomerNeedParams) (CustomerNeed, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerNeed, arg.NeedID, arg.NeedDescription)
	var i CustomerNeed
	err := row.Scan(
		&i.NeedID,
		&i.SalesProcessID,
		&i.NeedDescription,
		&i.CreatedAt,
	)
	return i, err
}
