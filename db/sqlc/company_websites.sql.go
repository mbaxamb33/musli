// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: company_websites.sql

package db

import (
	"context"
	"database/sql"
)

const createCompanyWebsite = `-- name: CreateCompanyWebsite :one
INSERT INTO company_websites (
    company_id, base_url, site_title, scrape_frequency_days, is_active, datasource_id
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING website_id, company_id, base_url, site_title, last_scraped_at, scrape_frequency_days, is_active, datasource_id
`

type CreateCompanyWebsiteParams struct {
	CompanyID           int32          `json:"company_id"`
	BaseUrl             string         `json:"base_url"`
	SiteTitle           sql.NullString `json:"site_title"`
	ScrapeFrequencyDays sql.NullInt32  `json:"scrape_frequency_days"`
	IsActive            sql.NullBool   `json:"is_active"`
	DatasourceID        sql.NullInt32  `json:"datasource_id"`
}

func (q *Queries) CreateCompanyWebsite(ctx context.Context, arg CreateCompanyWebsiteParams) (CompanyWebsite, error) {
	row := q.db.QueryRowContext(ctx, createCompanyWebsite,
		arg.CompanyID,
		arg.BaseUrl,
		arg.SiteTitle,
		arg.ScrapeFrequencyDays,
		arg.IsActive,
		arg.DatasourceID,
	)
	var i CompanyWebsite
	err := row.Scan(
		&i.WebsiteID,
		&i.CompanyID,
		&i.BaseUrl,
		&i.SiteTitle,
		&i.LastScrapedAt,
		&i.ScrapeFrequencyDays,
		&i.IsActive,
		&i.DatasourceID,
	)
	return i, err
}

const deleteCompanyWebsite = `-- name: DeleteCompanyWebsite :exec
DELETE FROM company_websites
WHERE website_id = $1
`

func (q *Queries) DeleteCompanyWebsite(ctx context.Context, websiteID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompanyWebsite, websiteID)
	return err
}

const getCompanyWebsiteByID = `-- name: GetCompanyWebsiteByID :one
SELECT website_id, company_id, base_url, site_title, last_scraped_at, scrape_frequency_days, is_active, datasource_id FROM company_websites
WHERE website_id = $1
`

func (q *Queries) GetCompanyWebsiteByID(ctx context.Context, websiteID int32) (CompanyWebsite, error) {
	row := q.db.QueryRowContext(ctx, getCompanyWebsiteByID, websiteID)
	var i CompanyWebsite
	err := row.Scan(
		&i.WebsiteID,
		&i.CompanyID,
		&i.BaseUrl,
		&i.SiteTitle,
		&i.LastScrapedAt,
		&i.ScrapeFrequencyDays,
		&i.IsActive,
		&i.DatasourceID,
	)
	return i, err
}

const getCompanyWebsitesByCompanyID = `-- name: GetCompanyWebsitesByCompanyID :many
SELECT website_id, company_id, base_url, site_title, last_scraped_at, scrape_frequency_days, is_active, datasource_id FROM company_websites
WHERE company_id = $1
ORDER BY last_scraped_at DESC NULLS LAST
LIMIT $2 OFFSET $3
`

type GetCompanyWebsitesByCompanyIDParams struct {
	CompanyID int32 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetCompanyWebsitesByCompanyID(ctx context.Context, arg GetCompanyWebsitesByCompanyIDParams) ([]CompanyWebsite, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyWebsitesByCompanyID, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyWebsite
	for rows.Next() {
		var i CompanyWebsite
		if err := rows.Scan(
			&i.WebsiteID,
			&i.CompanyID,
			&i.BaseUrl,
			&i.SiteTitle,
			&i.LastScrapedAt,
			&i.ScrapeFrequencyDays,
			&i.IsActive,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanyWebsitesForScraping = `-- name: ListCompanyWebsitesForScraping :many
SELECT website_id, company_id, base_url, site_title, last_scraped_at, scrape_frequency_days, is_active, datasource_id FROM company_websites
WHERE is_active = true AND 
      (last_scraped_at IS NULL OR 
       last_scraped_at < NOW() - (scrape_frequency_days * INTERVAL '1 day'))
LIMIT $1
`

func (q *Queries) ListCompanyWebsitesForScraping(ctx context.Context, limit int32) ([]CompanyWebsite, error) {
	rows, err := q.db.QueryContext(ctx, listCompanyWebsitesForScraping, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CompanyWebsite
	for rows.Next() {
		var i CompanyWebsite
		if err := rows.Scan(
			&i.WebsiteID,
			&i.CompanyID,
			&i.BaseUrl,
			&i.SiteTitle,
			&i.LastScrapedAt,
			&i.ScrapeFrequencyDays,
			&i.IsActive,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompanyWebsite = `-- name: UpdateCompanyWebsite :one
UPDATE company_websites
SET base_url = $2,
    site_title = $3,
    last_scraped_at = $4,
    scrape_frequency_days = $5,
    is_active = $6,
    datasource_id = $7
WHERE website_id = $1
RETURNING website_id, company_id, base_url, site_title, last_scraped_at, scrape_frequency_days, is_active, datasource_id
`

type UpdateCompanyWebsiteParams struct {
	WebsiteID           int32          `json:"website_id"`
	BaseUrl             string         `json:"base_url"`
	SiteTitle           sql.NullString `json:"site_title"`
	LastScrapedAt       sql.NullTime   `json:"last_scraped_at"`
	ScrapeFrequencyDays sql.NullInt32  `json:"scrape_frequency_days"`
	IsActive            sql.NullBool   `json:"is_active"`
	DatasourceID        sql.NullInt32  `json:"datasource_id"`
}

func (q *Queries) UpdateCompanyWebsite(ctx context.Context, arg UpdateCompanyWebsiteParams) (CompanyWebsite, error) {
	row := q.db.QueryRowContext(ctx, updateCompanyWebsite,
		arg.WebsiteID,
		arg.BaseUrl,
		arg.SiteTitle,
		arg.LastScrapedAt,
		arg.ScrapeFrequencyDays,
		arg.IsActive,
		arg.DatasourceID,
	)
	var i CompanyWebsite
	err := row.Scan(
		&i.WebsiteID,
		&i.CompanyID,
		&i.BaseUrl,
		&i.SiteTitle,
		&i.LastScrapedAt,
		&i.ScrapeFrequencyDays,
		&i.IsActive,
		&i.DatasourceID,
	)
	return i, err
}

const updateLastScrapedAt = `-- name: UpdateLastScrapedAt :one
UPDATE company_websites
SET last_scraped_at = CURRENT_TIMESTAMP
WHERE website_id = $1
RETURNING website_id, company_id, base_url, site_title, last_scraped_at, scrape_frequency_days, is_active, datasource_id
`

func (q *Queries) UpdateLastScrapedAt(ctx context.Context, websiteID int32) (CompanyWebsite, error) {
	row := q.db.QueryRowContext(ctx, updateLastScrapedAt, websiteID)
	var i CompanyWebsite
	err := row.Scan(
		&i.WebsiteID,
		&i.CompanyID,
		&i.BaseUrl,
		&i.SiteTitle,
		&i.LastScrapedAt,
		&i.ScrapeFrequencyDays,
		&i.IsActive,
		&i.DatasourceID,
	)
	return i, err
}
