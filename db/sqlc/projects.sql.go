// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: projects.sql

package db

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (user_id, project_name, description)
VALUES ($1, $2, $3)
RETURNING project_id, user_id, project_name, description, created_at, last_updated_at
`

type CreateProjectParams struct {
	UserID      sql.NullInt32  `json:"user_id"`
	ProjectName string         `json:"project_name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject, arg.UserID, arg.ProjectName, arg.Description)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.ProjectName,
		&i.Description,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE project_id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, projectID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProject, projectID)
	return err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT project_id, user_id, project_name, description, created_at, last_updated_at
FROM projects
WHERE project_id = $1
`

func (q *Queries) GetProjectByID(ctx context.Context, projectID int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, projectID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.ProjectName,
		&i.Description,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}

const listProjectsByUser = `-- name: ListProjectsByUser :many
SELECT project_id, user_id, project_name, description, created_at, last_updated_at
FROM projects
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProjectsByUserParams struct {
	UserID sql.NullInt32 `json:"user_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListProjectsByUser(ctx context.Context, arg ListProjectsByUserParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjectsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.ProjectName,
			&i.Description,
			&i.CreatedAt,
			&i.LastUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET project_name = $2,
    description = $3,
    last_updated_at = CURRENT_TIMESTAMP
WHERE project_id = $1
RETURNING project_id, user_id, project_name, description, created_at, last_updated_at
`

type UpdateProjectParams struct {
	ProjectID   int32          `json:"project_id"`
	ProjectName string         `json:"project_name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject, arg.ProjectID, arg.ProjectName, arg.Description)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.ProjectName,
		&i.Description,
		&i.CreatedAt,
		&i.LastUpdatedAt,
	)
	return i, err
}
