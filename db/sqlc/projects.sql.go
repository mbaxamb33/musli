// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: projects.sql

package db

import (
	"context"
	"database/sql"
)

const countProjects = `-- name: CountProjects :one
SELECT COUNT(*) FROM projects
`

func (q *Queries) CountProjects(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countProjects)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countProjectsByUser = `-- name: CountProjectsByUser :one
SELECT COUNT(*) FROM projects
WHERE user_id = $1
`

func (q *Queries) CountProjectsByUser(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, countProjectsByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
  user_id,
  name,
  description,
  start_date,
  end_date,
  status
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING project_id, user_id, name, description, start_date, end_date, status, created_at, updated_at
`

type CreateProjectParams struct {
	UserID      int32          `json:"user_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.UserID,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE project_id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, projectID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProject, projectID)
	return err
}

const getProject = `-- name: GetProject :one
SELECT project_id, user_id, name, description, start_date, end_date, status, created_at, updated_at FROM projects
WHERE project_id = $1 LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, projectID int32) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProject, projectID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProjectsWithResourceCount = `-- name: GetProjectsWithResourceCount :many
SELECT 
  p.project_id, p.user_id, p.name, p.description, p.start_date, p.end_date, p.status, p.created_at, p.updated_at,
  COUNT(pr.project_resource_id) AS resource_count
FROM projects p
LEFT JOIN project_resources pr ON p.project_id = pr.project_id
WHERE p.user_id = $1
GROUP BY p.project_id
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type GetProjectsWithResourceCountParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetProjectsWithResourceCountRow struct {
	ProjectID     int32          `json:"project_id"`
	UserID        int32          `json:"user_id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	StartDate     sql.NullTime   `json:"start_date"`
	EndDate       sql.NullTime   `json:"end_date"`
	Status        sql.NullString `json:"status"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	ResourceCount int64          `json:"resource_count"`
}

func (q *Queries) GetProjectsWithResourceCount(ctx context.Context, arg GetProjectsWithResourceCountParams) ([]GetProjectsWithResourceCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsWithResourceCount, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectsWithResourceCountRow
	for rows.Next() {
		var i GetProjectsWithResourceCountRow
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ResourceCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT project_id, user_id, name, description, start_date, end_date, status, created_at, updated_at FROM projects
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListProjectsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProjects(ctx context.Context, arg ListProjectsParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjects, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectsByUser = `-- name: ListProjectsByUser :many
SELECT project_id, user_id, name, description, start_date, end_date, status, created_at, updated_at FROM projects
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProjectsByUserParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProjectsByUser(ctx context.Context, arg ListProjectsByUserParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjectsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET
  name = COALESCE($2, name),
  description = COALESCE($3, description),
  start_date = COALESCE($4, start_date),
  end_date = COALESCE($5, end_date),
  status = COALESCE($6, status),
  updated_at = CURRENT_TIMESTAMP
WHERE project_id = $1
RETURNING project_id, user_id, name, description, start_date, end_date, status, created_at, updated_at
`

type UpdateProjectParams struct {
	ProjectID   int32          `json:"project_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	Status      sql.NullString `json:"status"`
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.ProjectID,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProjectStatus = `-- name: UpdateProjectStatus :one
UPDATE projects
SET 
  status = $2,
  updated_at = CURRENT_TIMESTAMP
WHERE project_id = $1
RETURNING project_id, user_id, name, description, start_date, end_date, status, created_at, updated_at
`

type UpdateProjectStatusParams struct {
	ProjectID int32          `json:"project_id"`
	Status    sql.NullString `json:"status"`
}

func (q *Queries) UpdateProjectStatus(ctx context.Context, arg UpdateProjectStatusParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProjectStatus, arg.ProjectID, arg.Status)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
