// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ground_truths.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createGroundTruth = `-- name: CreateGroundTruth :one

INSERT INTO ground_truth (
    master_brief_id, field_name, field_value, confidence_score, source_brief_ids
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, master_brief_id, field_name, field_value, confidence_score, source_brief_ids, last_updated
`

type CreateGroundTruthParams struct {
	MasterBriefID   uuid.NullUUID  `json:"master_brief_id"`
	FieldName       sql.NullString `json:"field_name"`
	FieldValue      sql.NullString `json:"field_value"`
	ConfidenceScore sql.NullString `json:"confidence_score"`
	SourceBriefIds  []uuid.UUID    `json:"source_brief_ids"`
}

// =============================================================================
// GROUND TRUTH QUERIES
// =============================================================================
func (q *Queries) CreateGroundTruth(ctx context.Context, arg CreateGroundTruthParams) (GroundTruth, error) {
	row := q.db.QueryRowContext(ctx, createGroundTruth,
		arg.MasterBriefID,
		arg.FieldName,
		arg.FieldValue,
		arg.ConfidenceScore,
		pq.Array(arg.SourceBriefIds),
	)
	var i GroundTruth
	err := row.Scan(
		&i.ID,
		&i.MasterBriefID,
		&i.FieldName,
		&i.FieldValue,
		&i.ConfidenceScore,
		pq.Array(&i.SourceBriefIds),
		&i.LastUpdated,
	)
	return i, err
}

const deleteAllGroundTruthForMasterBrief = `-- name: DeleteAllGroundTruthForMasterBrief :exec
DELETE FROM ground_truth
WHERE master_brief_id = $1
`

func (q *Queries) DeleteAllGroundTruthForMasterBrief(ctx context.Context, masterBriefID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteAllGroundTruthForMasterBrief, masterBriefID)
	return err
}

const deleteGroundTruth = `-- name: DeleteGroundTruth :exec
DELETE FROM ground_truth
WHERE master_brief_id = $1 AND field_name = $2
`

type DeleteGroundTruthParams struct {
	MasterBriefID uuid.NullUUID  `json:"master_brief_id"`
	FieldName     sql.NullString `json:"field_name"`
}

func (q *Queries) DeleteGroundTruth(ctx context.Context, arg DeleteGroundTruthParams) error {
	_, err := q.db.ExecContext(ctx, deleteGroundTruth, arg.MasterBriefID, arg.FieldName)
	return err
}

const getGroundTruthByMasterBriefAndField = `-- name: GetGroundTruthByMasterBriefAndField :one
SELECT id, master_brief_id, field_name, field_value, confidence_score, source_brief_ids, last_updated
FROM ground_truth
WHERE master_brief_id = $1 AND field_name = $2
`

type GetGroundTruthByMasterBriefAndFieldParams struct {
	MasterBriefID uuid.NullUUID  `json:"master_brief_id"`
	FieldName     sql.NullString `json:"field_name"`
}

func (q *Queries) GetGroundTruthByMasterBriefAndField(ctx context.Context, arg GetGroundTruthByMasterBriefAndFieldParams) (GroundTruth, error) {
	row := q.db.QueryRowContext(ctx, getGroundTruthByMasterBriefAndField, arg.MasterBriefID, arg.FieldName)
	var i GroundTruth
	err := row.Scan(
		&i.ID,
		&i.MasterBriefID,
		&i.FieldName,
		&i.FieldValue,
		&i.ConfidenceScore,
		pq.Array(&i.SourceBriefIds),
		&i.LastUpdated,
	)
	return i, err
}

const listGroundTruthByMasterBrief = `-- name: ListGroundTruthByMasterBrief :many
SELECT id, master_brief_id, field_name, field_value, confidence_score, source_brief_ids, last_updated
FROM ground_truth
WHERE master_brief_id = $1
ORDER BY field_name
`

func (q *Queries) ListGroundTruthByMasterBrief(ctx context.Context, masterBriefID uuid.NullUUID) ([]GroundTruth, error) {
	rows, err := q.db.QueryContext(ctx, listGroundTruthByMasterBrief, masterBriefID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroundTruth
	for rows.Next() {
		var i GroundTruth
		if err := rows.Scan(
			&i.ID,
			&i.MasterBriefID,
			&i.FieldName,
			&i.FieldValue,
			&i.ConfidenceScore,
			pq.Array(&i.SourceBriefIds),
			&i.LastUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGroundTruth = `-- name: UpdateGroundTruth :one
UPDATE ground_truth
SET field_value = $3,
    confidence_score = $4,
    source_brief_ids = $5,
    last_updated = CURRENT_TIMESTAMP
WHERE master_brief_id = $1 AND field_name = $2
RETURNING id, master_brief_id, field_name, field_value, confidence_score, source_brief_ids, last_updated
`

type UpdateGroundTruthParams struct {
	MasterBriefID   uuid.NullUUID  `json:"master_brief_id"`
	FieldName       sql.NullString `json:"field_name"`
	FieldValue      sql.NullString `json:"field_value"`
	ConfidenceScore sql.NullString `json:"confidence_score"`
	SourceBriefIds  []uuid.UUID    `json:"source_brief_ids"`
}

func (q *Queries) UpdateGroundTruth(ctx context.Context, arg UpdateGroundTruthParams) (GroundTruth, error) {
	row := q.db.QueryRowContext(ctx, updateGroundTruth,
		arg.MasterBriefID,
		arg.FieldName,
		arg.FieldValue,
		arg.ConfidenceScore,
		pq.Array(arg.SourceBriefIds),
	)
	var i GroundTruth
	err := row.Scan(
		&i.ID,
		&i.MasterBriefID,
		&i.FieldName,
		&i.FieldValue,
		&i.ConfidenceScore,
		pq.Array(&i.SourceBriefIds),
		&i.LastUpdated,
	)
	return i, err
}

const upsertGroundTruth = `-- name: UpsertGroundTruth :one
INSERT INTO ground_truth (master_brief_id, field_name, field_value, confidence_score, source_brief_ids)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (master_brief_id, field_name)
DO UPDATE SET
    field_value = EXCLUDED.field_value,
    confidence_score = EXCLUDED.confidence_score,
    source_brief_ids = EXCLUDED.source_brief_ids,
    last_updated = CURRENT_TIMESTAMP
RETURNING id, master_brief_id, field_name, field_value, confidence_score, source_brief_ids, last_updated
`

type UpsertGroundTruthParams struct {
	MasterBriefID   uuid.NullUUID  `json:"master_brief_id"`
	FieldName       sql.NullString `json:"field_name"`
	FieldValue      sql.NullString `json:"field_value"`
	ConfidenceScore sql.NullString `json:"confidence_score"`
	SourceBriefIds  []uuid.UUID    `json:"source_brief_ids"`
}

func (q *Queries) UpsertGroundTruth(ctx context.Context, arg UpsertGroundTruthParams) (GroundTruth, error) {
	row := q.db.QueryRowContext(ctx, upsertGroundTruth,
		arg.MasterBriefID,
		arg.FieldName,
		arg.FieldValue,
		arg.ConfidenceScore,
		pq.Array(arg.SourceBriefIds),
	)
	var i GroundTruth
	err := row.Scan(
		&i.ID,
		&i.MasterBriefID,
		&i.FieldName,
		&i.FieldValue,
		&i.ConfidenceScore,
		pq.Array(&i.SourceBriefIds),
		&i.LastUpdated,
	)
	return i, err
}
