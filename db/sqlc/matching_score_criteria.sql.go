// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: matching_score_criteria.sql

package db

import (
	"context"
	"database/sql"
)

const createMatchingScoreCriteria = `-- name: CreateMatchingScoreCriteria :one
INSERT INTO matching_score_criteria (
    name, description, weight
)
VALUES ($1, $2, $3)
RETURNING criteria_id, name, description, weight
`

type CreateMatchingScoreCriteriaParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Weight      string         `json:"weight"`
}

func (q *Queries) CreateMatchingScoreCriteria(ctx context.Context, arg CreateMatchingScoreCriteriaParams) (MatchingScoreCriterium, error) {
	row := q.db.QueryRowContext(ctx, createMatchingScoreCriteria, arg.Name, arg.Description, arg.Weight)
	var i MatchingScoreCriterium
	err := row.Scan(
		&i.CriteriaID,
		&i.Name,
		&i.Description,
		&i.Weight,
	)
	return i, err
}

const deleteMatchingScoreCriteria = `-- name: DeleteMatchingScoreCriteria :exec
DELETE FROM matching_score_criteria
WHERE criteria_id = $1
`

func (q *Queries) DeleteMatchingScoreCriteria(ctx context.Context, criteriaID int32) error {
	_, err := q.db.ExecContext(ctx, deleteMatchingScoreCriteria, criteriaID)
	return err
}

const getMatchingScoreCriteriaByID = `-- name: GetMatchingScoreCriteriaByID :one
SELECT criteria_id, name, description, weight
FROM matching_score_criteria
WHERE criteria_id = $1
`

func (q *Queries) GetMatchingScoreCriteriaByID(ctx context.Context, criteriaID int32) (MatchingScoreCriterium, error) {
	row := q.db.QueryRowContext(ctx, getMatchingScoreCriteriaByID, criteriaID)
	var i MatchingScoreCriterium
	err := row.Scan(
		&i.CriteriaID,
		&i.Name,
		&i.Description,
		&i.Weight,
	)
	return i, err
}

const listMatchingScoreCriteria = `-- name: ListMatchingScoreCriteria :many
SELECT criteria_id, name, description, weight
FROM matching_score_criteria
ORDER BY name ASC
LIMIT $1 OFFSET $2
`

type ListMatchingScoreCriteriaParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMatchingScoreCriteria(ctx context.Context, arg ListMatchingScoreCriteriaParams) ([]MatchingScoreCriterium, error) {
	rows, err := q.db.QueryContext(ctx, listMatchingScoreCriteria, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MatchingScoreCriterium
	for rows.Next() {
		var i MatchingScoreCriterium
		if err := rows.Scan(
			&i.CriteriaID,
			&i.Name,
			&i.Description,
			&i.Weight,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMatchingScoreCriteria = `-- name: UpdateMatchingScoreCriteria :one
UPDATE matching_score_criteria
SET name = $2,
    description = $3,
    weight = $4
WHERE criteria_id = $1
RETURNING criteria_id, name, description, weight
`

type UpdateMatchingScoreCriteriaParams struct {
	CriteriaID  int32          `json:"criteria_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	Weight      string         `json:"weight"`
}

func (q *Queries) UpdateMatchingScoreCriteria(ctx context.Context, arg UpdateMatchingScoreCriteriaParams) (MatchingScoreCriterium, error) {
	row := q.db.QueryRowContext(ctx, updateMatchingScoreCriteria,
		arg.CriteriaID,
		arg.Name,
		arg.Description,
		arg.Weight,
	)
	var i MatchingScoreCriterium
	err := row.Scan(
		&i.CriteriaID,
		&i.Name,
		&i.Description,
		&i.Weight,
	)
	return i, err
}
