// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: buying_comitee.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBuyingCommittee = `-- name: CreateBuyingCommittee :one

INSERT INTO buying_committee (
    brief_id, economic_buyer_name, economic_buyer_title, economic_buyer_influence, economic_buyer_motivations,
    technical_buyer_name, technical_buyer_concerns, user_buyer_representatives, coach_champion_name,
    coach_influence_level, blocker_identification, blocker_concerns, committee_dynamics,
    decision_making_process, consensus_requirements, individual_risk_tolerance, career_motivations,
    personal_success_metrics, relationship_mapping, communication_preferences, influence_networks
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21)
RETURNING id, brief_id, economic_buyer_name, economic_buyer_title, economic_buyer_influence, economic_buyer_motivations,
    technical_buyer_name, technical_buyer_concerns, user_buyer_representatives, coach_champion_name,
    coach_influence_level, blocker_identification, blocker_concerns, committee_dynamics,
    decision_making_process, consensus_requirements, individual_risk_tolerance, career_motivations,
    personal_success_metrics, relationship_mapping, communication_preferences, influence_networks,
    created_at, updated_at
`

type CreateBuyingCommitteeParams struct {
	BriefID                  uuid.NullUUID  `json:"brief_id"`
	EconomicBuyerName        sql.NullString `json:"economic_buyer_name"`
	EconomicBuyerTitle       sql.NullString `json:"economic_buyer_title"`
	EconomicBuyerInfluence   sql.NullInt32  `json:"economic_buyer_influence"`
	EconomicBuyerMotivations sql.NullString `json:"economic_buyer_motivations"`
	TechnicalBuyerName       sql.NullString `json:"technical_buyer_name"`
	TechnicalBuyerConcerns   sql.NullString `json:"technical_buyer_concerns"`
	UserBuyerRepresentatives sql.NullString `json:"user_buyer_representatives"`
	CoachChampionName        sql.NullString `json:"coach_champion_name"`
	CoachInfluenceLevel      sql.NullInt32  `json:"coach_influence_level"`
	BlockerIdentification    sql.NullString `json:"blocker_identification"`
	BlockerConcerns          sql.NullString `json:"blocker_concerns"`
	CommitteeDynamics        sql.NullString `json:"committee_dynamics"`
	DecisionMakingProcess    sql.NullString `json:"decision_making_process"`
	ConsensusRequirements    sql.NullString `json:"consensus_requirements"`
	IndividualRiskTolerance  sql.NullString `json:"individual_risk_tolerance"`
	CareerMotivations        sql.NullString `json:"career_motivations"`
	PersonalSuccessMetrics   sql.NullString `json:"personal_success_metrics"`
	RelationshipMapping      sql.NullString `json:"relationship_mapping"`
	CommunicationPreferences sql.NullString `json:"communication_preferences"`
	InfluenceNetworks        sql.NullString `json:"influence_networks"`
}

// =============================================================================
// BUYING COMMITTEE QUERIES
// =============================================================================
func (q *Queries) CreateBuyingCommittee(ctx context.Context, arg CreateBuyingCommitteeParams) (BuyingCommittee, error) {
	row := q.db.QueryRowContext(ctx, createBuyingCommittee,
		arg.BriefID,
		arg.EconomicBuyerName,
		arg.EconomicBuyerTitle,
		arg.EconomicBuyerInfluence,
		arg.EconomicBuyerMotivations,
		arg.TechnicalBuyerName,
		arg.TechnicalBuyerConcerns,
		arg.UserBuyerRepresentatives,
		arg.CoachChampionName,
		arg.CoachInfluenceLevel,
		arg.BlockerIdentification,
		arg.BlockerConcerns,
		arg.CommitteeDynamics,
		arg.DecisionMakingProcess,
		arg.ConsensusRequirements,
		arg.IndividualRiskTolerance,
		arg.CareerMotivations,
		arg.PersonalSuccessMetrics,
		arg.RelationshipMapping,
		arg.CommunicationPreferences,
		arg.InfluenceNetworks,
	)
	var i BuyingCommittee
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.EconomicBuyerName,
		&i.EconomicBuyerTitle,
		&i.EconomicBuyerInfluence,
		&i.EconomicBuyerMotivations,
		&i.TechnicalBuyerName,
		&i.TechnicalBuyerConcerns,
		&i.UserBuyerRepresentatives,
		&i.CoachChampionName,
		&i.CoachInfluenceLevel,
		&i.BlockerIdentification,
		&i.BlockerConcerns,
		&i.CommitteeDynamics,
		&i.DecisionMakingProcess,
		&i.ConsensusRequirements,
		&i.IndividualRiskTolerance,
		&i.CareerMotivations,
		&i.PersonalSuccessMetrics,
		&i.RelationshipMapping,
		&i.CommunicationPreferences,
		&i.InfluenceNetworks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBuyingCommittee = `-- name: DeleteBuyingCommittee :exec
DELETE FROM buying_committee
WHERE brief_id = $1
`

func (q *Queries) DeleteBuyingCommittee(ctx context.Context, briefID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteBuyingCommittee, briefID)
	return err
}

const getBuyingCommitteeByBriefID = `-- name: GetBuyingCommitteeByBriefID :one
SELECT id, brief_id, economic_buyer_name, economic_buyer_title, economic_buyer_influence, economic_buyer_motivations,
    technical_buyer_name, technical_buyer_concerns, user_buyer_representatives, coach_champion_name,
    coach_influence_level, blocker_identification, blocker_concerns, committee_dynamics,
    decision_making_process, consensus_requirements, individual_risk_tolerance, career_motivations,
    personal_success_metrics, relationship_mapping, communication_preferences, influence_networks,
    created_at, updated_at
FROM buying_committee
WHERE brief_id = $1
`

func (q *Queries) GetBuyingCommitteeByBriefID(ctx context.Context, briefID uuid.NullUUID) (BuyingCommittee, error) {
	row := q.db.QueryRowContext(ctx, getBuyingCommitteeByBriefID, briefID)
	var i BuyingCommittee
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.EconomicBuyerName,
		&i.EconomicBuyerTitle,
		&i.EconomicBuyerInfluence,
		&i.EconomicBuyerMotivations,
		&i.TechnicalBuyerName,
		&i.TechnicalBuyerConcerns,
		&i.UserBuyerRepresentatives,
		&i.CoachChampionName,
		&i.CoachInfluenceLevel,
		&i.BlockerIdentification,
		&i.BlockerConcerns,
		&i.CommitteeDynamics,
		&i.DecisionMakingProcess,
		&i.ConsensusRequirements,
		&i.IndividualRiskTolerance,
		&i.CareerMotivations,
		&i.PersonalSuccessMetrics,
		&i.RelationshipMapping,
		&i.CommunicationPreferences,
		&i.InfluenceNetworks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateBuyingCommittee = `-- name: UpdateBuyingCommittee :one
UPDATE buying_committee
SET economic_buyer_name = $2,
    economic_buyer_title = $3,
    economic_buyer_influence = $4,
    economic_buyer_motivations = $5,
    technical_buyer_name = $6,
    technical_buyer_concerns = $7,
    user_buyer_representatives = $8,
    coach_champion_name = $9,
    coach_influence_level = $10,
    blocker_identification = $11,
    blocker_concerns = $12,
    committee_dynamics = $13,
    decision_making_process = $14,
    consensus_requirements = $15,
    individual_risk_tolerance = $16,
    career_motivations = $17,
    personal_success_metrics = $18,
    relationship_mapping = $19,
    communication_preferences = $20,
    influence_networks = $21,
    updated_at = CURRENT_TIMESTAMP
WHERE brief_id = $1
RETURNING id, brief_id, economic_buyer_name, economic_buyer_title, economic_buyer_influence, economic_buyer_motivations,
    technical_buyer_name, technical_buyer_concerns, user_buyer_representatives, coach_champion_name,
    coach_influence_level, blocker_identification, blocker_concerns, committee_dynamics,
    decision_making_process, consensus_requirements, individual_risk_tolerance, career_motivations,
    personal_success_metrics, relationship_mapping, communication_preferences, influence_networks,
    created_at, updated_at
`

type UpdateBuyingCommitteeParams struct {
	BriefID                  uuid.NullUUID  `json:"brief_id"`
	EconomicBuyerName        sql.NullString `json:"economic_buyer_name"`
	EconomicBuyerTitle       sql.NullString `json:"economic_buyer_title"`
	EconomicBuyerInfluence   sql.NullInt32  `json:"economic_buyer_influence"`
	EconomicBuyerMotivations sql.NullString `json:"economic_buyer_motivations"`
	TechnicalBuyerName       sql.NullString `json:"technical_buyer_name"`
	TechnicalBuyerConcerns   sql.NullString `json:"technical_buyer_concerns"`
	UserBuyerRepresentatives sql.NullString `json:"user_buyer_representatives"`
	CoachChampionName        sql.NullString `json:"coach_champion_name"`
	CoachInfluenceLevel      sql.NullInt32  `json:"coach_influence_level"`
	BlockerIdentification    sql.NullString `json:"blocker_identification"`
	BlockerConcerns          sql.NullString `json:"blocker_concerns"`
	CommitteeDynamics        sql.NullString `json:"committee_dynamics"`
	DecisionMakingProcess    sql.NullString `json:"decision_making_process"`
	ConsensusRequirements    sql.NullString `json:"consensus_requirements"`
	IndividualRiskTolerance  sql.NullString `json:"individual_risk_tolerance"`
	CareerMotivations        sql.NullString `json:"career_motivations"`
	PersonalSuccessMetrics   sql.NullString `json:"personal_success_metrics"`
	RelationshipMapping      sql.NullString `json:"relationship_mapping"`
	CommunicationPreferences sql.NullString `json:"communication_preferences"`
	InfluenceNetworks        sql.NullString `json:"influence_networks"`
}

func (q *Queries) UpdateBuyingCommittee(ctx context.Context, arg UpdateBuyingCommitteeParams) (BuyingCommittee, error) {
	row := q.db.QueryRowContext(ctx, updateBuyingCommittee,
		arg.BriefID,
		arg.EconomicBuyerName,
		arg.EconomicBuyerTitle,
		arg.EconomicBuyerInfluence,
		arg.EconomicBuyerMotivations,
		arg.TechnicalBuyerName,
		arg.TechnicalBuyerConcerns,
		arg.UserBuyerRepresentatives,
		arg.CoachChampionName,
		arg.CoachInfluenceLevel,
		arg.BlockerIdentification,
		arg.BlockerConcerns,
		arg.CommitteeDynamics,
		arg.DecisionMakingProcess,
		arg.ConsensusRequirements,
		arg.IndividualRiskTolerance,
		arg.CareerMotivations,
		arg.PersonalSuccessMetrics,
		arg.RelationshipMapping,
		arg.CommunicationPreferences,
		arg.InfluenceNetworks,
	)
	var i BuyingCommittee
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.EconomicBuyerName,
		&i.EconomicBuyerTitle,
		&i.EconomicBuyerInfluence,
		&i.EconomicBuyerMotivations,
		&i.TechnicalBuyerName,
		&i.TechnicalBuyerConcerns,
		&i.UserBuyerRepresentatives,
		&i.CoachChampionName,
		&i.CoachInfluenceLevel,
		&i.BlockerIdentification,
		&i.BlockerConcerns,
		&i.CommitteeDynamics,
		&i.DecisionMakingProcess,
		&i.ConsensusRequirements,
		&i.IndividualRiskTolerance,
		&i.CareerMotivations,
		&i.PersonalSuccessMetrics,
		&i.RelationshipMapping,
		&i.CommunicationPreferences,
		&i.InfluenceNetworks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
