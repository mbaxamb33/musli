// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: analyses.sql

package db

import (
	"context"
)

const createAnalysis = `-- name: CreateAnalysis :one
INSERT INTO analyses (
    sales_process_id, version
)
VALUES ($1, $2)
RETURNING analysis_id, sales_process_id, version, created_at, updated_at
`

type CreateAnalysisParams struct {
	SalesProcessID int32 `json:"sales_process_id"`
	Version        int32 `json:"version"`
}

func (q *Queries) CreateAnalysis(ctx context.Context, arg CreateAnalysisParams) (Analysis, error) {
	row := q.db.QueryRowContext(ctx, createAnalysis, arg.SalesProcessID, arg.Version)
	var i Analysis
	err := row.Scan(
		&i.AnalysisID,
		&i.SalesProcessID,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAnalysis = `-- name: DeleteAnalysis :exec
DELETE FROM analyses
WHERE analysis_id = $1
`

func (q *Queries) DeleteAnalysis(ctx context.Context, analysisID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAnalysis, analysisID)
	return err
}

const getAnalysisByID = `-- name: GetAnalysisByID :one
SELECT analysis_id, sales_process_id, version, created_at, updated_at
FROM analyses
WHERE analysis_id = $1
`

func (q *Queries) GetAnalysisByID(ctx context.Context, analysisID int32) (Analysis, error) {
	row := q.db.QueryRowContext(ctx, getAnalysisByID, analysisID)
	var i Analysis
	err := row.Scan(
		&i.AnalysisID,
		&i.SalesProcessID,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestAnalysisBySalesProcess = `-- name: GetLatestAnalysisBySalesProcess :one
SELECT analysis_id, sales_process_id, version, created_at, updated_at
FROM analyses
WHERE sales_process_id = $1
ORDER BY version DESC
LIMIT 1
`

func (q *Queries) GetLatestAnalysisBySalesProcess(ctx context.Context, salesProcessID int32) (Analysis, error) {
	row := q.db.QueryRowContext(ctx, getLatestAnalysisBySalesProcess, salesProcessID)
	var i Analysis
	err := row.Scan(
		&i.AnalysisID,
		&i.SalesProcessID,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAnalysesBySalesProcess = `-- name: ListAnalysesBySalesProcess :many
SELECT analysis_id, sales_process_id, version, created_at, updated_at
FROM analyses
WHERE sales_process_id = $1
ORDER BY version DESC
LIMIT $2 OFFSET $3
`

type ListAnalysesBySalesProcessParams struct {
	SalesProcessID int32 `json:"sales_process_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

func (q *Queries) ListAnalysesBySalesProcess(ctx context.Context, arg ListAnalysesBySalesProcessParams) ([]Analysis, error) {
	rows, err := q.db.QueryContext(ctx, listAnalysesBySalesProcess, arg.SalesProcessID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Analysis
	for rows.Next() {
		var i Analysis
		if err := rows.Scan(
			&i.AnalysisID,
			&i.SalesProcessID,
			&i.Version,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnalysis = `-- name: UpdateAnalysis :one
UPDATE analyses
SET updated_at = CURRENT_TIMESTAMP
WHERE analysis_id = $1
RETURNING analysis_id, sales_process_id, version, created_at, updated_at
`

func (q *Queries) UpdateAnalysis(ctx context.Context, analysisID int32) (Analysis, error) {
	row := q.db.QueryRowContext(ctx, updateAnalysis, analysisID)
	var i Analysis
	err := row.Scan(
		&i.AnalysisID,
		&i.SalesProcessID,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
