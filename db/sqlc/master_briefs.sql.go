// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: master_briefs.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createMasterBrief = `-- name: CreateMasterBrief :one

INSERT INTO master_briefs (
    cognito_sub, company_id, contact_id, company_reference, contact_reference
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, cognito_sub, company_id, contact_id, company_reference, contact_reference, created_at, updated_at
`

type CreateMasterBriefParams struct {
	CognitoSub       string        `json:"cognito_sub"`
	CompanyID        sql.NullInt32 `json:"company_id"`
	ContactID        sql.NullInt32 `json:"contact_id"`
	CompanyReference string        `json:"company_reference"`
	ContactReference string        `json:"contact_reference"`
}

// =============================================================================
// MASTER BRIEFS QUERIES
// =============================================================================
func (q *Queries) CreateMasterBrief(ctx context.Context, arg CreateMasterBriefParams) (MasterBrief, error) {
	row := q.db.QueryRowContext(ctx, createMasterBrief,
		arg.CognitoSub,
		arg.CompanyID,
		arg.ContactID,
		arg.CompanyReference,
		arg.ContactReference,
	)
	var i MasterBrief
	err := row.Scan(
		&i.ID,
		&i.CognitoSub,
		&i.CompanyID,
		&i.ContactID,
		&i.CompanyReference,
		&i.ContactReference,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMasterBrief = `-- name: DeleteMasterBrief :exec
DELETE FROM master_briefs
WHERE id = $1
`

func (q *Queries) DeleteMasterBrief(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMasterBrief, id)
	return err
}

const getMasterBriefByID = `-- name: GetMasterBriefByID :one
SELECT id, cognito_sub, company_id, contact_id, company_reference, contact_reference, created_at, updated_at
FROM master_briefs
WHERE id = $1
`

func (q *Queries) GetMasterBriefByID(ctx context.Context, id uuid.UUID) (MasterBrief, error) {
	row := q.db.QueryRowContext(ctx, getMasterBriefByID, id)
	var i MasterBrief
	err := row.Scan(
		&i.ID,
		&i.CognitoSub,
		&i.CompanyID,
		&i.ContactID,
		&i.CompanyReference,
		&i.ContactReference,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMasterBriefsByCompany = `-- name: ListMasterBriefsByCompany :many
SELECT id, cognito_sub, company_id, contact_id, company_reference, contact_reference, created_at, updated_at
FROM master_briefs
WHERE company_id = $1
ORDER BY updated_at DESC
LIMIT $2 OFFSET $3
`

type ListMasterBriefsByCompanyParams struct {
	CompanyID sql.NullInt32 `json:"company_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListMasterBriefsByCompany(ctx context.Context, arg ListMasterBriefsByCompanyParams) ([]MasterBrief, error) {
	rows, err := q.db.QueryContext(ctx, listMasterBriefsByCompany, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MasterBrief
	for rows.Next() {
		var i MasterBrief
		if err := rows.Scan(
			&i.ID,
			&i.CognitoSub,
			&i.CompanyID,
			&i.ContactID,
			&i.CompanyReference,
			&i.ContactReference,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMasterBriefsByContact = `-- name: ListMasterBriefsByContact :many
SELECT id, cognito_sub, company_id, contact_id, company_reference, contact_reference, created_at, updated_at
FROM master_briefs
WHERE contact_id = $1
ORDER BY updated_at DESC
LIMIT $2 OFFSET $3
`

type ListMasterBriefsByContactParams struct {
	ContactID sql.NullInt32 `json:"contact_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListMasterBriefsByContact(ctx context.Context, arg ListMasterBriefsByContactParams) ([]MasterBrief, error) {
	rows, err := q.db.QueryContext(ctx, listMasterBriefsByContact, arg.ContactID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MasterBrief
	for rows.Next() {
		var i MasterBrief
		if err := rows.Scan(
			&i.ID,
			&i.CognitoSub,
			&i.CompanyID,
			&i.ContactID,
			&i.CompanyReference,
			&i.ContactReference,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMasterBriefsByUser = `-- name: ListMasterBriefsByUser :many
SELECT id, cognito_sub, company_id, contact_id, company_reference, contact_reference, created_at, updated_at
FROM master_briefs
WHERE cognito_sub = $1
ORDER BY updated_at DESC
LIMIT $2 OFFSET $3
`

type ListMasterBriefsByUserParams struct {
	CognitoSub string `json:"cognito_sub"`
	Limit      int32  `json:"limit"`
	Offset     int32  `json:"offset"`
}

func (q *Queries) ListMasterBriefsByUser(ctx context.Context, arg ListMasterBriefsByUserParams) ([]MasterBrief, error) {
	rows, err := q.db.QueryContext(ctx, listMasterBriefsByUser, arg.CognitoSub, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MasterBrief
	for rows.Next() {
		var i MasterBrief
		if err := rows.Scan(
			&i.ID,
			&i.CognitoSub,
			&i.CompanyID,
			&i.ContactID,
			&i.CompanyReference,
			&i.ContactReference,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMasterBrief = `-- name: UpdateMasterBrief :one
UPDATE master_briefs
SET company_id = $2,
    contact_id = $3,
    company_reference = $4,
    contact_reference = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, cognito_sub, company_id, contact_id, company_reference, contact_reference, created_at, updated_at
`

type UpdateMasterBriefParams struct {
	ID               uuid.UUID     `json:"id"`
	CompanyID        sql.NullInt32 `json:"company_id"`
	ContactID        sql.NullInt32 `json:"contact_id"`
	CompanyReference string        `json:"company_reference"`
	ContactReference string        `json:"contact_reference"`
}

func (q *Queries) UpdateMasterBrief(ctx context.Context, arg UpdateMasterBriefParams) (MasterBrief, error) {
	row := q.db.QueryRowContext(ctx, updateMasterBrief,
		arg.ID,
		arg.CompanyID,
		arg.ContactID,
		arg.CompanyReference,
		arg.ContactReference,
	)
	var i MasterBrief
	err := row.Scan(
		&i.ID,
		&i.CognitoSub,
		&i.CompanyID,
		&i.ContactID,
		&i.CompanyReference,
		&i.ContactReference,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
