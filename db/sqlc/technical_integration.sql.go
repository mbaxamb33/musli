// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: technical_integration.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTechnicalIntegration = `-- name: CreateTechnicalIntegration :one

INSERT INTO technical_integration (
    brief_id, technical_architecture, security_requirements, compliance_standards, integration_points,
    data_migration_scope, customization_needs, scalability_requirements, performance_benchmarks,
    disaster_recovery_needs, backup_requirements, access_control_requirements, audit_trail_needs,
    reporting_capabilities, api_requirements, mobile_access_needs
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
RETURNING id, brief_id, technical_architecture, security_requirements, compliance_standards, integration_points,
    data_migration_scope, customization_needs, scalability_requirements, performance_benchmarks,
    disaster_recovery_needs, backup_requirements, access_control_requirements, audit_trail_needs,
    reporting_capabilities, api_requirements, mobile_access_needs, created_at, updated_at
`

type CreateTechnicalIntegrationParams struct {
	BriefID                   uuid.NullUUID  `json:"brief_id"`
	TechnicalArchitecture     sql.NullString `json:"technical_architecture"`
	SecurityRequirements      sql.NullString `json:"security_requirements"`
	ComplianceStandards       sql.NullString `json:"compliance_standards"`
	IntegrationPoints         sql.NullString `json:"integration_points"`
	DataMigrationScope        sql.NullString `json:"data_migration_scope"`
	CustomizationNeeds        sql.NullString `json:"customization_needs"`
	ScalabilityRequirements   sql.NullString `json:"scalability_requirements"`
	PerformanceBenchmarks     sql.NullString `json:"performance_benchmarks"`
	DisasterRecoveryNeeds     sql.NullString `json:"disaster_recovery_needs"`
	BackupRequirements        sql.NullString `json:"backup_requirements"`
	AccessControlRequirements sql.NullString `json:"access_control_requirements"`
	AuditTrailNeeds           sql.NullString `json:"audit_trail_needs"`
	ReportingCapabilities     sql.NullString `json:"reporting_capabilities"`
	ApiRequirements           sql.NullString `json:"api_requirements"`
	MobileAccessNeeds         sql.NullString `json:"mobile_access_needs"`
}

// =============================================================================
// TECHNICAL & INTEGRATION QUERIES
// =============================================================================
func (q *Queries) CreateTechnicalIntegration(ctx context.Context, arg CreateTechnicalIntegrationParams) (TechnicalIntegration, error) {
	row := q.db.QueryRowContext(ctx, createTechnicalIntegration,
		arg.BriefID,
		arg.TechnicalArchitecture,
		arg.SecurityRequirements,
		arg.ComplianceStandards,
		arg.IntegrationPoints,
		arg.DataMigrationScope,
		arg.CustomizationNeeds,
		arg.ScalabilityRequirements,
		arg.PerformanceBenchmarks,
		arg.DisasterRecoveryNeeds,
		arg.BackupRequirements,
		arg.AccessControlRequirements,
		arg.AuditTrailNeeds,
		arg.ReportingCapabilities,
		arg.ApiRequirements,
		arg.MobileAccessNeeds,
	)
	var i TechnicalIntegration
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.TechnicalArchitecture,
		&i.SecurityRequirements,
		&i.ComplianceStandards,
		&i.IntegrationPoints,
		&i.DataMigrationScope,
		&i.CustomizationNeeds,
		&i.ScalabilityRequirements,
		&i.PerformanceBenchmarks,
		&i.DisasterRecoveryNeeds,
		&i.BackupRequirements,
		&i.AccessControlRequirements,
		&i.AuditTrailNeeds,
		&i.ReportingCapabilities,
		&i.ApiRequirements,
		&i.MobileAccessNeeds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTechnicalIntegration = `-- name: DeleteTechnicalIntegration :exec
DELETE FROM technical_integration
WHERE brief_id = $1
`

func (q *Queries) DeleteTechnicalIntegration(ctx context.Context, briefID uuid.NullUUID) error {
	_, err := q.db.ExecContext(ctx, deleteTechnicalIntegration, briefID)
	return err
}

const getTechnicalIntegrationByBriefID = `-- name: GetTechnicalIntegrationByBriefID :one
SELECT id, brief_id, technical_architecture, security_requirements, compliance_standards, integration_points,
    data_migration_scope, customization_needs, scalability_requirements, performance_benchmarks,
    disaster_recovery_needs, backup_requirements, access_control_requirements, audit_trail_needs,
    reporting_capabilities, api_requirements, mobile_access_needs, created_at, updated_at
FROM technical_integration
WHERE brief_id = $1
`

func (q *Queries) GetTechnicalIntegrationByBriefID(ctx context.Context, briefID uuid.NullUUID) (TechnicalIntegration, error) {
	row := q.db.QueryRowContext(ctx, getTechnicalIntegrationByBriefID, briefID)
	var i TechnicalIntegration
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.TechnicalArchitecture,
		&i.SecurityRequirements,
		&i.ComplianceStandards,
		&i.IntegrationPoints,
		&i.DataMigrationScope,
		&i.CustomizationNeeds,
		&i.ScalabilityRequirements,
		&i.PerformanceBenchmarks,
		&i.DisasterRecoveryNeeds,
		&i.BackupRequirements,
		&i.AccessControlRequirements,
		&i.AuditTrailNeeds,
		&i.ReportingCapabilities,
		&i.ApiRequirements,
		&i.MobileAccessNeeds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTechnicalIntegration = `-- name: UpdateTechnicalIntegration :one
UPDATE technical_integration
SET technical_architecture = $2,
    security_requirements = $3,
    compliance_standards = $4,
    integration_points = $5,
    data_migration_scope = $6,
    customization_needs = $7,
    scalability_requirements = $8,
    performance_benchmarks = $9,
    disaster_recovery_needs = $10,
    backup_requirements = $11,
    access_control_requirements = $12,
    audit_trail_needs = $13,
    reporting_capabilities = $14,
    api_requirements = $15,
    mobile_access_needs = $16,
    updated_at = CURRENT_TIMESTAMP
WHERE brief_id = $1
RETURNING id, brief_id, technical_architecture, security_requirements, compliance_standards, integration_points,
    data_migration_scope, customization_needs, scalability_requirements, performance_benchmarks,
    disaster_recovery_needs, backup_requirements, access_control_requirements, audit_trail_needs,
    reporting_capabilities, api_requirements, mobile_access_needs, created_at, updated_at
`

type UpdateTechnicalIntegrationParams struct {
	BriefID                   uuid.NullUUID  `json:"brief_id"`
	TechnicalArchitecture     sql.NullString `json:"technical_architecture"`
	SecurityRequirements      sql.NullString `json:"security_requirements"`
	ComplianceStandards       sql.NullString `json:"compliance_standards"`
	IntegrationPoints         sql.NullString `json:"integration_points"`
	DataMigrationScope        sql.NullString `json:"data_migration_scope"`
	CustomizationNeeds        sql.NullString `json:"customization_needs"`
	ScalabilityRequirements   sql.NullString `json:"scalability_requirements"`
	PerformanceBenchmarks     sql.NullString `json:"performance_benchmarks"`
	DisasterRecoveryNeeds     sql.NullString `json:"disaster_recovery_needs"`
	BackupRequirements        sql.NullString `json:"backup_requirements"`
	AccessControlRequirements sql.NullString `json:"access_control_requirements"`
	AuditTrailNeeds           sql.NullString `json:"audit_trail_needs"`
	ReportingCapabilities     sql.NullString `json:"reporting_capabilities"`
	ApiRequirements           sql.NullString `json:"api_requirements"`
	MobileAccessNeeds         sql.NullString `json:"mobile_access_needs"`
}

func (q *Queries) UpdateTechnicalIntegration(ctx context.Context, arg UpdateTechnicalIntegrationParams) (TechnicalIntegration, error) {
	row := q.db.QueryRowContext(ctx, updateTechnicalIntegration,
		arg.BriefID,
		arg.TechnicalArchitecture,
		arg.SecurityRequirements,
		arg.ComplianceStandards,
		arg.IntegrationPoints,
		arg.DataMigrationScope,
		arg.CustomizationNeeds,
		arg.ScalabilityRequirements,
		arg.PerformanceBenchmarks,
		arg.DisasterRecoveryNeeds,
		arg.BackupRequirements,
		arg.AccessControlRequirements,
		arg.AuditTrailNeeds,
		arg.ReportingCapabilities,
		arg.ApiRequirements,
		arg.MobileAccessNeeds,
	)
	var i TechnicalIntegration
	err := row.Scan(
		&i.ID,
		&i.BriefID,
		&i.TechnicalArchitecture,
		&i.SecurityRequirements,
		&i.ComplianceStandards,
		&i.IntegrationPoints,
		&i.DataMigrationScope,
		&i.CustomizationNeeds,
		&i.ScalabilityRequirements,
		&i.PerformanceBenchmarks,
		&i.DisasterRecoveryNeeds,
		&i.BackupRequirements,
		&i.AccessControlRequirements,
		&i.AuditTrailNeeds,
		&i.ReportingCapabilities,
		&i.ApiRequirements,
		&i.MobileAccessNeeds,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
