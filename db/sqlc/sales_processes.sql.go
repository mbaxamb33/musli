// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sales_processes.sql

package db

import (
	"context"
	"database/sql"
)

const createSalesProcess = `-- name: CreateSalesProcess :one
INSERT INTO sales_processes (
    user_id, contact_id, overall_matching_score, status
)
VALUES ($1, $2, $3, $4)
RETURNING sales_process_id, user_id, contact_id, overall_matching_score, status, created_at, updated_at
`

type CreateSalesProcessParams struct {
	UserID               int32          `json:"user_id"`
	ContactID            int32          `json:"contact_id"`
	OverallMatchingScore sql.NullString `json:"overall_matching_score"`
	Status               sql.NullString `json:"status"`
}

func (q *Queries) CreateSalesProcess(ctx context.Context, arg CreateSalesProcessParams) (SalesProcess, error) {
	row := q.db.QueryRowContext(ctx, createSalesProcess,
		arg.UserID,
		arg.ContactID,
		arg.OverallMatchingScore,
		arg.Status,
	)
	var i SalesProcess
	err := row.Scan(
		&i.SalesProcessID,
		&i.UserID,
		&i.ContactID,
		&i.OverallMatchingScore,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSalesProcess = `-- name: DeleteSalesProcess :exec
DELETE FROM sales_processes
WHERE sales_process_id = $1
`

func (q *Queries) DeleteSalesProcess(ctx context.Context, salesProcessID int32) error {
	_, err := q.db.ExecContext(ctx, deleteSalesProcess, salesProcessID)
	return err
}

const getSalesProcessByID = `-- name: GetSalesProcessByID :one
SELECT sales_process_id, user_id, contact_id, overall_matching_score, status, created_at, updated_at
FROM sales_processes
WHERE sales_process_id = $1
`

func (q *Queries) GetSalesProcessByID(ctx context.Context, salesProcessID int32) (SalesProcess, error) {
	row := q.db.QueryRowContext(ctx, getSalesProcessByID, salesProcessID)
	var i SalesProcess
	err := row.Scan(
		&i.SalesProcessID,
		&i.UserID,
		&i.ContactID,
		&i.OverallMatchingScore,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSalesProcessesByContact = `-- name: ListSalesProcessesByContact :many
SELECT sales_process_id, user_id, contact_id, overall_matching_score, status, created_at, updated_at
FROM sales_processes
WHERE contact_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListSalesProcessesByContactParams struct {
	ContactID int32 `json:"contact_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListSalesProcessesByContact(ctx context.Context, arg ListSalesProcessesByContactParams) ([]SalesProcess, error) {
	rows, err := q.db.QueryContext(ctx, listSalesProcessesByContact, arg.ContactID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesProcess
	for rows.Next() {
		var i SalesProcess
		if err := rows.Scan(
			&i.SalesProcessID,
			&i.UserID,
			&i.ContactID,
			&i.OverallMatchingScore,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSalesProcessesByStatus = `-- name: ListSalesProcessesByStatus :many
SELECT sales_process_id, user_id, contact_id, overall_matching_score, status, created_at, updated_at
FROM sales_processes
WHERE user_id = $1 AND status = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListSalesProcessesByStatusParams struct {
	UserID int32          `json:"user_id"`
	Status sql.NullString `json:"status"`
	Limit  int32          `json:"limit"`
	Offset int32          `json:"offset"`
}

func (q *Queries) ListSalesProcessesByStatus(ctx context.Context, arg ListSalesProcessesByStatusParams) ([]SalesProcess, error) {
	rows, err := q.db.QueryContext(ctx, listSalesProcessesByStatus,
		arg.UserID,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesProcess
	for rows.Next() {
		var i SalesProcess
		if err := rows.Scan(
			&i.SalesProcessID,
			&i.UserID,
			&i.ContactID,
			&i.OverallMatchingScore,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSalesProcessesByUser = `-- name: ListSalesProcessesByUser :many
SELECT sales_process_id, user_id, contact_id, overall_matching_score, status, created_at, updated_at
FROM sales_processes
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListSalesProcessesByUserParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSalesProcessesByUser(ctx context.Context, arg ListSalesProcessesByUserParams) ([]SalesProcess, error) {
	rows, err := q.db.QueryContext(ctx, listSalesProcessesByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SalesProcess
	for rows.Next() {
		var i SalesProcess
		if err := rows.Scan(
			&i.SalesProcessID,
			&i.UserID,
			&i.ContactID,
			&i.OverallMatchingScore,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSalesProcess = `-- name: UpdateSalesProcess :one
UPDATE sales_processes
SET overall_matching_score = $2,
    status = $3,
    updated_at = CURRENT_TIMESTAMP
WHERE sales_process_id = $1
RETURNING sales_process_id, user_id, contact_id, overall_matching_score, status, created_at, updated_at
`

type UpdateSalesProcessParams struct {
	SalesProcessID       int32          `json:"sales_process_id"`
	OverallMatchingScore sql.NullString `json:"overall_matching_score"`
	Status               sql.NullString `json:"status"`
}

func (q *Queries) UpdateSalesProcess(ctx context.Context, arg UpdateSalesProcessParams) (SalesProcess, error) {
	row := q.db.QueryRowContext(ctx, updateSalesProcess, arg.SalesProcessID, arg.OverallMatchingScore, arg.Status)
	var i SalesProcess
	err := row.Scan(
		&i.SalesProcessID,
		&i.UserID,
		&i.ContactID,
		&i.OverallMatchingScore,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
