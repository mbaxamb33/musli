// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: analysis_inputs.sql

package db

import (
	"context"
	"database/sql"
)

const createAnalysisInput = `-- name: CreateAnalysisInput :one
INSERT INTO analysis_inputs (
    analysis_id, input_type, datasource_id, content
)
VALUES ($1, $2, $3, $4)
RETURNING input_id, analysis_id, input_type, datasource_id, content, created_at
`

type CreateAnalysisInputParams struct {
	AnalysisID   int32          `json:"analysis_id"`
	InputType    InputType      `json:"input_type"`
	DatasourceID sql.NullInt32  `json:"datasource_id"`
	Content      sql.NullString `json:"content"`
}

func (q *Queries) CreateAnalysisInput(ctx context.Context, arg CreateAnalysisInputParams) (AnalysisInput, error) {
	row := q.db.QueryRowContext(ctx, createAnalysisInput,
		arg.AnalysisID,
		arg.InputType,
		arg.DatasourceID,
		arg.Content,
	)
	var i AnalysisInput
	err := row.Scan(
		&i.InputID,
		&i.AnalysisID,
		&i.InputType,
		&i.DatasourceID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAnalysisInput = `-- name: DeleteAnalysisInput :exec
DELETE FROM analysis_inputs
WHERE input_id = $1
`

func (q *Queries) DeleteAnalysisInput(ctx context.Context, inputID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAnalysisInput, inputID)
	return err
}

const getAnalysisInputByID = `-- name: GetAnalysisInputByID :one
SELECT input_id, analysis_id, input_type, datasource_id, content, created_at
FROM analysis_inputs
WHERE input_id = $1
`

func (q *Queries) GetAnalysisInputByID(ctx context.Context, inputID int32) (AnalysisInput, error) {
	row := q.db.QueryRowContext(ctx, getAnalysisInputByID, inputID)
	var i AnalysisInput
	err := row.Scan(
		&i.InputID,
		&i.AnalysisID,
		&i.InputType,
		&i.DatasourceID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listInputsByAnalysis = `-- name: ListInputsByAnalysis :many
SELECT input_id, analysis_id, input_type, datasource_id, content, created_at
FROM analysis_inputs
WHERE analysis_id = $1
ORDER BY created_at ASC
LIMIT $2 OFFSET $3
`

type ListInputsByAnalysisParams struct {
	AnalysisID int32 `json:"analysis_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListInputsByAnalysis(ctx context.Context, arg ListInputsByAnalysisParams) ([]AnalysisInput, error) {
	rows, err := q.db.QueryContext(ctx, listInputsByAnalysis, arg.AnalysisID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnalysisInput
	for rows.Next() {
		var i AnalysisInput
		if err := rows.Scan(
			&i.InputID,
			&i.AnalysisID,
			&i.InputType,
			&i.DatasourceID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInputsByAnalysisAndType = `-- name: ListInputsByAnalysisAndType :many
SELECT input_id, analysis_id, input_type, datasource_id, content, created_at
FROM analysis_inputs
WHERE analysis_id = $1 AND input_type = $2
ORDER BY created_at ASC
LIMIT $3 OFFSET $4
`

type ListInputsByAnalysisAndTypeParams struct {
	AnalysisID int32     `json:"analysis_id"`
	InputType  InputType `json:"input_type"`
	Limit      int32     `json:"limit"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) ListInputsByAnalysisAndType(ctx context.Context, arg ListInputsByAnalysisAndTypeParams) ([]AnalysisInput, error) {
	rows, err := q.db.QueryContext(ctx, listInputsByAnalysisAndType,
		arg.AnalysisID,
		arg.InputType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AnalysisInput
	for rows.Next() {
		var i AnalysisInput
		if err := rows.Scan(
			&i.InputID,
			&i.AnalysisID,
			&i.InputType,
			&i.DatasourceID,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAnalysisInput = `-- name: UpdateAnalysisInput :one
UPDATE analysis_inputs
SET content = $2
WHERE input_id = $1
RETURNING input_id, analysis_id, input_type, datasource_id, content, created_at
`

type UpdateAnalysisInputParams struct {
	InputID int32          `json:"input_id"`
	Content sql.NullString `json:"content"`
}

func (q *Queries) UpdateAnalysisInput(ctx context.Context, arg UpdateAnalysisInputParams) (AnalysisInput, error) {
	row := q.db.QueryRowContext(ctx, updateAnalysisInput, arg.InputID, arg.Content)
	var i AnalysisInput
	err := row.Scan(
		&i.InputID,
		&i.AnalysisID,
		&i.InputType,
		&i.DatasourceID,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
