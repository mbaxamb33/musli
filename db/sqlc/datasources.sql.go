// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: datasources.sql

package db

import (
	"context"
	"database/sql"
)

const createDatasource = `-- name: CreateDatasource :one
INSERT INTO datasources (
    source_type, link, file_data, file_name
)
VALUES ($1, $2, $3, $4)
RETURNING datasource_id, source_type, link, file_data, file_name, created_at
`

type CreateDatasourceParams struct {
	SourceType DatasourceType `json:"source_type"`
	Link       sql.NullString `json:"link"`
	FileData   []byte         `json:"file_data"`
	FileName   sql.NullString `json:"file_name"`
}

func (q *Queries) CreateDatasource(ctx context.Context, arg CreateDatasourceParams) (Datasource, error) {
	row := q.db.QueryRowContext(ctx, createDatasource,
		arg.SourceType,
		arg.Link,
		arg.FileData,
		arg.FileName,
	)
	var i Datasource
	err := row.Scan(
		&i.DatasourceID,
		&i.SourceType,
		&i.Link,
		&i.FileData,
		&i.FileName,
		&i.CreatedAt,
	)
	return i, err
}

const deleteDatasource = `-- name: DeleteDatasource :exec
DELETE FROM datasources
WHERE datasource_id = $1
`

func (q *Queries) DeleteDatasource(ctx context.Context, datasourceID int32) error {
	_, err := q.db.ExecContext(ctx, deleteDatasource, datasourceID)
	return err
}

const getDatasourceByID = `-- name: GetDatasourceByID :one
SELECT datasource_id, source_type, link, file_name, created_at
FROM datasources
WHERE datasource_id = $1
`

type GetDatasourceByIDRow struct {
	DatasourceID int32          `json:"datasource_id"`
	SourceType   DatasourceType `json:"source_type"`
	Link         sql.NullString `json:"link"`
	FileName     sql.NullString `json:"file_name"`
	CreatedAt    sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetDatasourceByID(ctx context.Context, datasourceID int32) (GetDatasourceByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getDatasourceByID, datasourceID)
	var i GetDatasourceByIDRow
	err := row.Scan(
		&i.DatasourceID,
		&i.SourceType,
		&i.Link,
		&i.FileName,
		&i.CreatedAt,
	)
	return i, err
}

const getFullDatasourceByID = `-- name: GetFullDatasourceByID :one
SELECT datasource_id, source_type, link, file_data, file_name, created_at
FROM datasources
WHERE datasource_id = $1
`

func (q *Queries) GetFullDatasourceByID(ctx context.Context, datasourceID int32) (Datasource, error) {
	row := q.db.QueryRowContext(ctx, getFullDatasourceByID, datasourceID)
	var i Datasource
	err := row.Scan(
		&i.DatasourceID,
		&i.SourceType,
		&i.Link,
		&i.FileData,
		&i.FileName,
		&i.CreatedAt,
	)
	return i, err
}

const listDatasources = `-- name: ListDatasources :many
SELECT datasource_id, source_type, link, file_name, created_at
FROM datasources
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListDatasourcesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListDatasourcesRow struct {
	DatasourceID int32          `json:"datasource_id"`
	SourceType   DatasourceType `json:"source_type"`
	Link         sql.NullString `json:"link"`
	FileName     sql.NullString `json:"file_name"`
	CreatedAt    sql.NullTime   `json:"created_at"`
}

func (q *Queries) ListDatasources(ctx context.Context, arg ListDatasourcesParams) ([]ListDatasourcesRow, error) {
	rows, err := q.db.QueryContext(ctx, listDatasources, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDatasourcesRow
	for rows.Next() {
		var i ListDatasourcesRow
		if err := rows.Scan(
			&i.DatasourceID,
			&i.SourceType,
			&i.Link,
			&i.FileName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDatasourcesByType = `-- name: ListDatasourcesByType :many
SELECT datasource_id, source_type, link, file_name, created_at
FROM datasources
WHERE source_type = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListDatasourcesByTypeParams struct {
	SourceType DatasourceType `json:"source_type"`
	Limit      int32          `json:"limit"`
	Offset     int32          `json:"offset"`
}

type ListDatasourcesByTypeRow struct {
	DatasourceID int32          `json:"datasource_id"`
	SourceType   DatasourceType `json:"source_type"`
	Link         sql.NullString `json:"link"`
	FileName     sql.NullString `json:"file_name"`
	CreatedAt    sql.NullTime   `json:"created_at"`
}

func (q *Queries) ListDatasourcesByType(ctx context.Context, arg ListDatasourcesByTypeParams) ([]ListDatasourcesByTypeRow, error) {
	rows, err := q.db.QueryContext(ctx, listDatasourcesByType, arg.SourceType, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDatasourcesByTypeRow
	for rows.Next() {
		var i ListDatasourcesByTypeRow
		if err := rows.Scan(
			&i.DatasourceID,
			&i.SourceType,
			&i.Link,
			&i.FileName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
