// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: paragraphs.sql

package db

import (
	"context"
	"database/sql"
)

const createParagraph = `-- name: CreateParagraph :one
INSERT INTO paragraphs (
    datasource_id, title, main_idea, content
)
VALUES ($1, $2, $3, $4)
RETURNING paragraph_id, datasource_id, title, main_idea, content, created_at
`

type CreateParagraphParams struct {
	DatasourceID int32          `json:"datasource_id"`
	Title        sql.NullString `json:"title"`
	MainIdea     sql.NullString `json:"main_idea"`
	Content      string         `json:"content"`
}

func (q *Queries) CreateParagraph(ctx context.Context, arg CreateParagraphParams) (Paragraph, error) {
	row := q.db.QueryRowContext(ctx, createParagraph,
		arg.DatasourceID,
		arg.Title,
		arg.MainIdea,
		arg.Content,
	)
	var i Paragraph
	err := row.Scan(
		&i.ParagraphID,
		&i.DatasourceID,
		&i.Title,
		&i.MainIdea,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deleteParagraph = `-- name: DeleteParagraph :exec
DELETE FROM paragraphs
WHERE paragraph_id = $1
`

func (q *Queries) DeleteParagraph(ctx context.Context, paragraphID int32) error {
	_, err := q.db.ExecContext(ctx, deleteParagraph, paragraphID)
	return err
}

const getParagraphByID = `-- name: GetParagraphByID :one
SELECT paragraph_id, datasource_id, title, main_idea, content, created_at
FROM paragraphs
WHERE paragraph_id = $1
`

func (q *Queries) GetParagraphByID(ctx context.Context, paragraphID int32) (Paragraph, error) {
	row := q.db.QueryRowContext(ctx, getParagraphByID, paragraphID)
	var i Paragraph
	err := row.Scan(
		&i.ParagraphID,
		&i.DatasourceID,
		&i.Title,
		&i.MainIdea,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const listParagraphsByDatasource = `-- name: ListParagraphsByDatasource :many
SELECT paragraph_id, datasource_id, title, main_idea, content, created_at
FROM paragraphs
WHERE datasource_id = $1
ORDER BY paragraph_id ASC
LIMIT $2 OFFSET $3
`

type ListParagraphsByDatasourceParams struct {
	DatasourceID int32 `json:"datasource_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListParagraphsByDatasource(ctx context.Context, arg ListParagraphsByDatasourceParams) ([]Paragraph, error) {
	rows, err := q.db.QueryContext(ctx, listParagraphsByDatasource, arg.DatasourceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Paragraph
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ParagraphID,
			&i.DatasourceID,
			&i.Title,
			&i.MainIdea,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchParagraphsByContent = `-- name: SearchParagraphsByContent :many
SELECT paragraph_id, datasource_id, title, main_idea, content, created_at
FROM paragraphs
WHERE content ILIKE '%' || $1 || '%' OR main_idea ILIKE '%' || $1 || '%'
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type SearchParagraphsByContentParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchParagraphsByContent(ctx context.Context, arg SearchParagraphsByContentParams) ([]Paragraph, error) {
	rows, err := q.db.QueryContext(ctx, searchParagraphsByContent, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Paragraph
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ParagraphID,
			&i.DatasourceID,
			&i.Title,
			&i.MainIdea,
			&i.Content,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParagraph = `-- name: UpdateParagraph :one
UPDATE paragraphs
SET title = $2,
    main_idea = $3,
    content = $4
WHERE paragraph_id = $1
RETURNING paragraph_id, datasource_id, title, main_idea, content, created_at
`

type UpdateParagraphParams struct {
	ParagraphID int32          `json:"paragraph_id"`
	Title       sql.NullString `json:"title"`
	MainIdea    sql.NullString `json:"main_idea"`
	Content     string         `json:"content"`
}

func (q *Queries) UpdateParagraph(ctx context.Context, arg UpdateParagraphParams) (Paragraph, error) {
	row := q.db.QueryRowContext(ctx, updateParagraph,
		arg.ParagraphID,
		arg.Title,
		arg.MainIdea,
		arg.Content,
	)
	var i Paragraph
	err := row.Scan(
		&i.ParagraphID,
		&i.DatasourceID,
		&i.Title,
		&i.MainIdea,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}
