// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: paragraphs.sql

package db

import (
	"context"
	"database/sql"
)

const createParagraph = `-- name: CreateParagraph :one
INSERT INTO paragraphs (
    datasource_id, content, main_idea, classification, confidence_score
)
VALUES ($1, $2, $3, $4, $5)
RETURNING paragraph_id, datasource_id, content, main_idea, classification, confidence_score
`

type CreateParagraphParams struct {
	DatasourceID    sql.NullInt32  `json:"datasource_id"`
	Content         string         `json:"content"`
	MainIdea        sql.NullString `json:"main_idea"`
	Classification  sql.NullString `json:"classification"`
	ConfidenceScore sql.NullString `json:"confidence_score"`
}

func (q *Queries) CreateParagraph(ctx context.Context, arg CreateParagraphParams) (Paragraph, error) {
	row := q.db.QueryRowContext(ctx, createParagraph,
		arg.DatasourceID,
		arg.Content,
		arg.MainIdea,
		arg.Classification,
		arg.ConfidenceScore,
	)
	var i Paragraph
	err := row.Scan(
		&i.ParagraphID,
		&i.DatasourceID,
		&i.Content,
		&i.MainIdea,
		&i.Classification,
		&i.ConfidenceScore,
	)
	return i, err
}

const deleteParagraph = `-- name: DeleteParagraph :exec
DELETE FROM paragraphs
WHERE paragraph_id = $1
`

func (q *Queries) DeleteParagraph(ctx context.Context, paragraphID int32) error {
	_, err := q.db.ExecContext(ctx, deleteParagraph, paragraphID)
	return err
}

const getParagraphByID = `-- name: GetParagraphByID :one
SELECT paragraph_id, datasource_id, content, main_idea, classification, confidence_score
FROM paragraphs
WHERE paragraph_id = $1
`

func (q *Queries) GetParagraphByID(ctx context.Context, paragraphID int32) (Paragraph, error) {
	row := q.db.QueryRowContext(ctx, getParagraphByID, paragraphID)
	var i Paragraph
	err := row.Scan(
		&i.ParagraphID,
		&i.DatasourceID,
		&i.Content,
		&i.MainIdea,
		&i.Classification,
		&i.ConfidenceScore,
	)
	return i, err
}

const listParagraphsByClassification = `-- name: ListParagraphsByClassification :many
SELECT paragraph_id, datasource_id, content, main_idea, classification, confidence_score
FROM paragraphs
WHERE classification = $1
ORDER BY confidence_score DESC
LIMIT $2 OFFSET $3
`

type ListParagraphsByClassificationParams struct {
	Classification sql.NullString `json:"classification"`
	Limit          int32          `json:"limit"`
	Offset         int32          `json:"offset"`
}

func (q *Queries) ListParagraphsByClassification(ctx context.Context, arg ListParagraphsByClassificationParams) ([]Paragraph, error) {
	rows, err := q.db.QueryContext(ctx, listParagraphsByClassification, arg.Classification, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Paragraph
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ParagraphID,
			&i.DatasourceID,
			&i.Content,
			&i.MainIdea,
			&i.Classification,
			&i.ConfidenceScore,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParagraphsByDatasource = `-- name: ListParagraphsByDatasource :many
SELECT paragraph_id, datasource_id, content, main_idea, classification, confidence_score
FROM paragraphs
WHERE datasource_id = $1
ORDER BY paragraph_id ASC
LIMIT $2 OFFSET $3
`

type ListParagraphsByDatasourceParams struct {
	DatasourceID sql.NullInt32 `json:"datasource_id"`
	Limit        int32         `json:"limit"`
	Offset       int32         `json:"offset"`
}

func (q *Queries) ListParagraphsByDatasource(ctx context.Context, arg ListParagraphsByDatasourceParams) ([]Paragraph, error) {
	rows, err := q.db.QueryContext(ctx, listParagraphsByDatasource, arg.DatasourceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Paragraph
	for rows.Next() {
		var i Paragraph
		if err := rows.Scan(
			&i.ParagraphID,
			&i.DatasourceID,
			&i.Content,
			&i.MainIdea,
			&i.Classification,
			&i.ConfidenceScore,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateParagraph = `-- name: UpdateParagraph :one
UPDATE paragraphs
SET content = $2,
    main_idea = $3,
    classification = $4,
    confidence_score = $5
WHERE paragraph_id = $1
RETURNING paragraph_id, datasource_id, content, main_idea, classification, confidence_score
`

type UpdateParagraphParams struct {
	ParagraphID     int32          `json:"paragraph_id"`
	Content         string         `json:"content"`
	MainIdea        sql.NullString `json:"main_idea"`
	Classification  sql.NullString `json:"classification"`
	ConfidenceScore sql.NullString `json:"confidence_score"`
}

func (q *Queries) UpdateParagraph(ctx context.Context, arg UpdateParagraphParams) (Paragraph, error) {
	row := q.db.QueryRowContext(ctx, updateParagraph,
		arg.ParagraphID,
		arg.Content,
		arg.MainIdea,
		arg.Classification,
		arg.ConfidenceScore,
	)
	var i Paragraph
	err := row.Scan(
		&i.ParagraphID,
		&i.DatasourceID,
		&i.Content,
		&i.MainIdea,
		&i.Classification,
		&i.ConfidenceScore,
	)
	return i, err
}
