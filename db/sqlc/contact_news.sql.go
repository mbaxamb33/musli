// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contact_news.sql

package db

import (
	"context"
	"database/sql"
)

const createContactNewsItem = `-- name: CreateContactNewsItem :one
INSERT INTO contact_news (
    contact_id, title, content, datasource_id
)
VALUES ($1, $2, $3, $4)
RETURNING contact_news_id, contact_id, title, content, datasource_id, created_at
`

type CreateContactNewsItemParams struct {
	ContactID    int32          `json:"contact_id"`
	Title        string         `json:"title"`
	Content      sql.NullString `json:"content"`
	DatasourceID sql.NullInt32  `json:"datasource_id"`
}

func (q *Queries) CreateContactNewsItem(ctx context.Context, arg CreateContactNewsItemParams) (ContactNews, error) {
	row := q.db.QueryRowContext(ctx, createContactNewsItem,
		arg.ContactID,
		arg.Title,
		arg.Content,
		arg.DatasourceID,
	)
	var i ContactNews
	err := row.Scan(
		&i.ContactNewsID,
		&i.ContactID,
		&i.Title,
		&i.Content,
		&i.DatasourceID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteContactNewsItem = `-- name: DeleteContactNewsItem :exec
DELETE FROM contact_news
WHERE contact_news_id = $1
`

func (q *Queries) DeleteContactNewsItem(ctx context.Context, contactNewsID int32) error {
	_, err := q.db.ExecContext(ctx, deleteContactNewsItem, contactNewsID)
	return err
}

const getContactNewsItemByID = `-- name: GetContactNewsItemByID :one
SELECT contact_news_id, contact_id, title, content, datasource_id, created_at
FROM contact_news
WHERE contact_news_id = $1
`

func (q *Queries) GetContactNewsItemByID(ctx context.Context, contactNewsID int32) (ContactNews, error) {
	row := q.db.QueryRowContext(ctx, getContactNewsItemByID, contactNewsID)
	var i ContactNews
	err := row.Scan(
		&i.ContactNewsID,
		&i.ContactID,
		&i.Title,
		&i.Content,
		&i.DatasourceID,
		&i.CreatedAt,
	)
	return i, err
}

const listNewsItemsByContact = `-- name: ListNewsItemsByContact :many
SELECT contact_news_id, contact_id, title, content, datasource_id, created_at
FROM contact_news
WHERE contact_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListNewsItemsByContactParams struct {
	ContactID int32 `json:"contact_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListNewsItemsByContact(ctx context.Context, arg ListNewsItemsByContactParams) ([]ContactNews, error) {
	rows, err := q.db.QueryContext(ctx, listNewsItemsByContact, arg.ContactID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactNews
	for rows.Next() {
		var i ContactNews
		if err := rows.Scan(
			&i.ContactNewsID,
			&i.ContactID,
			&i.Title,
			&i.Content,
			&i.DatasourceID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContactNewsItem = `-- name: UpdateContactNewsItem :one
UPDATE contact_news
SET title = $2,
    content = $3
WHERE contact_news_id = $1
RETURNING contact_news_id, contact_id, title, content, datasource_id, created_at
`

type UpdateContactNewsItemParams struct {
	ContactNewsID int32          `json:"contact_news_id"`
	Title         string         `json:"title"`
	Content       sql.NullString `json:"content"`
}

func (q *Queries) UpdateContactNewsItem(ctx context.Context, arg UpdateContactNewsItemParams) (ContactNews, error) {
	row := q.db.QueryRowContext(ctx, updateContactNewsItem, arg.ContactNewsID, arg.Title, arg.Content)
	var i ContactNews
	err := row.Scan(
		&i.ContactNewsID,
		&i.ContactID,
		&i.Title,
		&i.Content,
		&i.DatasourceID,
		&i.CreatedAt,
	)
	return i, err
}
