// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contact_news.sql

package db

import (
	"context"
	"database/sql"
)

const createContactNews = `-- name: CreateContactNews :one
INSERT INTO contact_news (
    contact_id, title, publication_date, source, url, summary, datasource_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING mention_id, contact_id, title, publication_date, source, url, summary, datasource_id
`

type CreateContactNewsParams struct {
	ContactID       sql.NullInt32  `json:"contact_id"`
	Title           string         `json:"title"`
	PublicationDate sql.NullTime   `json:"publication_date"`
	Source          sql.NullString `json:"source"`
	Url             sql.NullString `json:"url"`
	Summary         sql.NullString `json:"summary"`
	DatasourceID    sql.NullInt32  `json:"datasource_id"`
}

func (q *Queries) CreateContactNews(ctx context.Context, arg CreateContactNewsParams) (ContactNews, error) {
	row := q.db.QueryRowContext(ctx, createContactNews,
		arg.ContactID,
		arg.Title,
		arg.PublicationDate,
		arg.Source,
		arg.Url,
		arg.Summary,
		arg.DatasourceID,
	)
	var i ContactNews
	err := row.Scan(
		&i.MentionID,
		&i.ContactID,
		&i.Title,
		&i.PublicationDate,
		&i.Source,
		&i.Url,
		&i.Summary,
		&i.DatasourceID,
	)
	return i, err
}

const deleteContactNews = `-- name: DeleteContactNews :exec
DELETE FROM contact_news
WHERE mention_id = $1
`

func (q *Queries) DeleteContactNews(ctx context.Context, mentionID int32) error {
	_, err := q.db.ExecContext(ctx, deleteContactNews, mentionID)
	return err
}

const getContactNewsByID = `-- name: GetContactNewsByID :one
SELECT mention_id, contact_id, title, publication_date, source, url, summary, datasource_id
FROM contact_news
WHERE mention_id = $1
`

func (q *Queries) GetContactNewsByID(ctx context.Context, mentionID int32) (ContactNews, error) {
	row := q.db.QueryRowContext(ctx, getContactNewsByID, mentionID)
	var i ContactNews
	err := row.Scan(
		&i.MentionID,
		&i.ContactID,
		&i.Title,
		&i.PublicationDate,
		&i.Source,
		&i.Url,
		&i.Summary,
		&i.DatasourceID,
	)
	return i, err
}

const listContactNewsByContact = `-- name: ListContactNewsByContact :many
SELECT mention_id, contact_id, title, publication_date, source, url, summary, datasource_id
FROM contact_news
WHERE contact_id = $1
ORDER BY publication_date DESC
LIMIT $2 OFFSET $3
`

type ListContactNewsByContactParams struct {
	ContactID sql.NullInt32 `json:"contact_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListContactNewsByContact(ctx context.Context, arg ListContactNewsByContactParams) ([]ContactNews, error) {
	rows, err := q.db.QueryContext(ctx, listContactNewsByContact, arg.ContactID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactNews
	for rows.Next() {
		var i ContactNews
		if err := rows.Scan(
			&i.MentionID,
			&i.ContactID,
			&i.Title,
			&i.PublicationDate,
			&i.Source,
			&i.Url,
			&i.Summary,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContactNewsByDatasource = `-- name: ListContactNewsByDatasource :many
SELECT mention_id, contact_id, title, publication_date, source, url, summary, datasource_id
FROM contact_news
WHERE datasource_id = $1
ORDER BY publication_date DESC
LIMIT $2 OFFSET $3
`

type ListContactNewsByDatasourceParams struct {
	DatasourceID sql.NullInt32 `json:"datasource_id"`
	Limit        int32         `json:"limit"`
	Offset       int32         `json:"offset"`
}

func (q *Queries) ListContactNewsByDatasource(ctx context.Context, arg ListContactNewsByDatasourceParams) ([]ContactNews, error) {
	rows, err := q.db.QueryContext(ctx, listContactNewsByDatasource, arg.DatasourceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactNews
	for rows.Next() {
		var i ContactNews
		if err := rows.Scan(
			&i.MentionID,
			&i.ContactID,
			&i.Title,
			&i.PublicationDate,
			&i.Source,
			&i.Url,
			&i.Summary,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContactNewsBySource = `-- name: ListContactNewsBySource :many
SELECT mention_id, contact_id, title, publication_date, source, url, summary, datasource_id
FROM contact_news
WHERE source = $1
ORDER BY publication_date DESC
LIMIT $2 OFFSET $3
`

type ListContactNewsBySourceParams struct {
	Source sql.NullString `json:"source"`
	Limit  int32          `json:"limit"`
	Offset int32          `json:"offset"`
}

func (q *Queries) ListContactNewsBySource(ctx context.Context, arg ListContactNewsBySourceParams) ([]ContactNews, error) {
	rows, err := q.db.QueryContext(ctx, listContactNewsBySource, arg.Source, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContactNews
	for rows.Next() {
		var i ContactNews
		if err := rows.Scan(
			&i.MentionID,
			&i.ContactID,
			&i.Title,
			&i.PublicationDate,
			&i.Source,
			&i.Url,
			&i.Summary,
			&i.DatasourceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContactNews = `-- name: UpdateContactNews :one
UPDATE contact_news
SET title = $2,
    publication_date = $3,
    source = $4,
    url = $5,
    summary = $6
WHERE mention_id = $1
RETURNING mention_id, contact_id, title, publication_date, source, url, summary, datasource_id
`

type UpdateContactNewsParams struct {
	MentionID       int32          `json:"mention_id"`
	Title           string         `json:"title"`
	PublicationDate sql.NullTime   `json:"publication_date"`
	Source          sql.NullString `json:"source"`
	Url             sql.NullString `json:"url"`
	Summary         sql.NullString `json:"summary"`
}

func (q *Queries) UpdateContactNews(ctx context.Context, arg UpdateContactNewsParams) (ContactNews, error) {
	row := q.db.QueryRowContext(ctx, updateContactNews,
		arg.MentionID,
		arg.Title,
		arg.PublicationDate,
		arg.Source,
		arg.Url,
		arg.Summary,
	)
	var i ContactNews
	err := row.Scan(
		&i.MentionID,
		&i.ContactID,
		&i.Title,
		&i.PublicationDate,
		&i.Source,
		&i.Url,
		&i.Summary,
		&i.DatasourceID,
	)
	return i, err
}
