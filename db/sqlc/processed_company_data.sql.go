// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: processed_company_data.sql

package db

import (
	"context"
	"database/sql"
)

const createProcessedCompanyData = `-- name: CreateProcessedCompanyData :one
INSERT INTO processed_company_data (
  company_id,
  data_type,
  data_key,
  data_value,
  confidence_score,
  source_id
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING data_id, company_id, data_type, data_key, data_value, confidence_score, source_id, created_at, updated_at
`

type CreateProcessedCompanyDataParams struct {
	CompanyID       int32          `json:"company_id"`
	DataType        string         `json:"data_type"`
	DataKey         string         `json:"data_key"`
	DataValue       sql.NullString `json:"data_value"`
	ConfidenceScore sql.NullString `json:"confidence_score"`
	SourceID        sql.NullInt32  `json:"source_id"`
}

func (q *Queries) CreateProcessedCompanyData(ctx context.Context, arg CreateProcessedCompanyDataParams) (ProcessedCompanyDatum, error) {
	row := q.db.QueryRowContext(ctx, createProcessedCompanyData,
		arg.CompanyID,
		arg.DataType,
		arg.DataKey,
		arg.DataValue,
		arg.ConfidenceScore,
		arg.SourceID,
	)
	var i ProcessedCompanyDatum
	err := row.Scan(
		&i.DataID,
		&i.CompanyID,
		&i.DataType,
		&i.DataKey,
		&i.DataValue,
		&i.ConfidenceScore,
		&i.SourceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllProcessedCompanyData = `-- name: DeleteAllProcessedCompanyData :exec
DELETE FROM processed_company_data
WHERE company_id = $1
`

func (q *Queries) DeleteAllProcessedCompanyData(ctx context.Context, companyID int32) error {
	_, err := q.db.ExecContext(ctx, deleteAllProcessedCompanyData, companyID)
	return err
}

const deleteProcessedCompanyData = `-- name: DeleteProcessedCompanyData :exec
DELETE FROM processed_company_data
WHERE data_id = $1
`

func (q *Queries) DeleteProcessedCompanyData(ctx context.Context, dataID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProcessedCompanyData, dataID)
	return err
}

const deleteProcessedCompanyDataByKey = `-- name: DeleteProcessedCompanyDataByKey :exec
DELETE FROM processed_company_data
WHERE company_id = $1 AND data_type = $2 AND data_key = $3
`

type DeleteProcessedCompanyDataByKeyParams struct {
	CompanyID int32  `json:"company_id"`
	DataType  string `json:"data_type"`
	DataKey   string `json:"data_key"`
}

func (q *Queries) DeleteProcessedCompanyDataByKey(ctx context.Context, arg DeleteProcessedCompanyDataByKeyParams) error {
	_, err := q.db.ExecContext(ctx, deleteProcessedCompanyDataByKey, arg.CompanyID, arg.DataType, arg.DataKey)
	return err
}

const getCompanyDataKeysByType = `-- name: GetCompanyDataKeysByType :many
SELECT DISTINCT data_key
FROM processed_company_data
WHERE company_id = $1 AND data_type = $2
ORDER BY data_key
`

type GetCompanyDataKeysByTypeParams struct {
	CompanyID int32  `json:"company_id"`
	DataType  string `json:"data_type"`
}

func (q *Queries) GetCompanyDataKeysByType(ctx context.Context, arg GetCompanyDataKeysByTypeParams) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyDataKeysByType, arg.CompanyID, arg.DataType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var data_key string
		if err := rows.Scan(&data_key); err != nil {
			return nil, err
		}
		items = append(items, data_key)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyDataSummary = `-- name: GetCompanyDataSummary :many
SELECT 
  data_type, 
  COUNT(DISTINCT data_key) as key_count
FROM processed_company_data
WHERE company_id = $1
GROUP BY data_type
ORDER BY key_count DESC
`

type GetCompanyDataSummaryRow struct {
	DataType string `json:"data_type"`
	KeyCount int64  `json:"key_count"`
}

func (q *Queries) GetCompanyDataSummary(ctx context.Context, companyID int32) ([]GetCompanyDataSummaryRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyDataSummary, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompanyDataSummaryRow
	for rows.Next() {
		var i GetCompanyDataSummaryRow
		if err := rows.Scan(&i.DataType, &i.KeyCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyDataTypes = `-- name: GetCompanyDataTypes :many
SELECT DISTINCT data_type
FROM processed_company_data
WHERE company_id = $1
ORDER BY data_type
`

func (q *Queries) GetCompanyDataTypes(ctx context.Context, companyID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyDataTypes, companyID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var data_type string
		if err := rows.Scan(&data_type); err != nil {
			return nil, err
		}
		items = append(items, data_type)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getHighConfidenceCompanyData = `-- name: GetHighConfidenceCompanyData :many
SELECT data_id, company_id, data_type, data_key, data_value, confidence_score, source_id, created_at, updated_at
FROM processed_company_data
WHERE company_id = $1 AND confidence_score >= $2
ORDER BY data_type, data_key
LIMIT $3 OFFSET $4
`

type GetHighConfidenceCompanyDataParams struct {
	CompanyID       int32          `json:"company_id"`
	ConfidenceScore sql.NullString `json:"confidence_score"`
	Limit           int32          `json:"limit"`
	Offset          int32          `json:"offset"`
}

func (q *Queries) GetHighConfidenceCompanyData(ctx context.Context, arg GetHighConfidenceCompanyDataParams) ([]ProcessedCompanyDatum, error) {
	rows, err := q.db.QueryContext(ctx, getHighConfidenceCompanyData,
		arg.CompanyID,
		arg.ConfidenceScore,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessedCompanyDatum
	for rows.Next() {
		var i ProcessedCompanyDatum
		if err := rows.Scan(
			&i.DataID,
			&i.CompanyID,
			&i.DataType,
			&i.DataKey,
			&i.DataValue,
			&i.ConfidenceScore,
			&i.SourceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProcessedCompanyData = `-- name: GetProcessedCompanyData :one
SELECT data_id, company_id, data_type, data_key, data_value, confidence_score, source_id, created_at, updated_at FROM processed_company_data
WHERE data_id = $1 LIMIT 1
`

func (q *Queries) GetProcessedCompanyData(ctx context.Context, dataID int32) (ProcessedCompanyDatum, error) {
	row := q.db.QueryRowContext(ctx, getProcessedCompanyData, dataID)
	var i ProcessedCompanyDatum
	err := row.Scan(
		&i.DataID,
		&i.CompanyID,
		&i.DataType,
		&i.DataKey,
		&i.DataValue,
		&i.ConfidenceScore,
		&i.SourceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProcessedCompanyDataByKey = `-- name: GetProcessedCompanyDataByKey :one
SELECT data_id, company_id, data_type, data_key, data_value, confidence_score, source_id, created_at, updated_at FROM processed_company_data
WHERE company_id = $1 AND data_type = $2 AND data_key = $3
ORDER BY confidence_score DESC, updated_at DESC
LIMIT 1
`

type GetProcessedCompanyDataByKeyParams struct {
	CompanyID int32  `json:"company_id"`
	DataType  string `json:"data_type"`
	DataKey   string `json:"data_key"`
}

func (q *Queries) GetProcessedCompanyDataByKey(ctx context.Context, arg GetProcessedCompanyDataByKeyParams) (ProcessedCompanyDatum, error) {
	row := q.db.QueryRowContext(ctx, getProcessedCompanyDataByKey, arg.CompanyID, arg.DataType, arg.DataKey)
	var i ProcessedCompanyDatum
	err := row.Scan(
		&i.DataID,
		&i.CompanyID,
		&i.DataType,
		&i.DataKey,
		&i.DataValue,
		&i.ConfidenceScore,
		&i.SourceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProcessedCompanyData = `-- name: ListProcessedCompanyData :many
SELECT data_id, company_id, data_type, data_key, data_value, confidence_score, source_id, created_at, updated_at FROM processed_company_data
WHERE company_id = $1
ORDER BY data_type, data_key, confidence_score DESC
LIMIT $2 OFFSET $3
`

type ListProcessedCompanyDataParams struct {
	CompanyID int32 `json:"company_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListProcessedCompanyData(ctx context.Context, arg ListProcessedCompanyDataParams) ([]ProcessedCompanyDatum, error) {
	rows, err := q.db.QueryContext(ctx, listProcessedCompanyData, arg.CompanyID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessedCompanyDatum
	for rows.Next() {
		var i ProcessedCompanyDatum
		if err := rows.Scan(
			&i.DataID,
			&i.CompanyID,
			&i.DataType,
			&i.DataKey,
			&i.DataValue,
			&i.ConfidenceScore,
			&i.SourceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProcessedCompanyDataByType = `-- name: ListProcessedCompanyDataByType :many
SELECT data_id, company_id, data_type, data_key, data_value, confidence_score, source_id, created_at, updated_at FROM processed_company_data
WHERE company_id = $1 AND data_type = $2
ORDER BY data_key, confidence_score DESC
LIMIT $3 OFFSET $4
`

type ListProcessedCompanyDataByTypeParams struct {
	CompanyID int32  `json:"company_id"`
	DataType  string `json:"data_type"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) ListProcessedCompanyDataByType(ctx context.Context, arg ListProcessedCompanyDataByTypeParams) ([]ProcessedCompanyDatum, error) {
	rows, err := q.db.QueryContext(ctx, listProcessedCompanyDataByType,
		arg.CompanyID,
		arg.DataType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProcessedCompanyDatum
	for rows.Next() {
		var i ProcessedCompanyDatum
		if err := rows.Scan(
			&i.DataID,
			&i.CompanyID,
			&i.DataType,
			&i.DataKey,
			&i.DataValue,
			&i.ConfidenceScore,
			&i.SourceID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProcessedCompanyData = `-- name: UpdateProcessedCompanyData :one
UPDATE processed_company_data
SET
  data_value = COALESCE($5, data_value),
  confidence_score = COALESCE($6, confidence_score),
  source_id = COALESCE($7, source_id),
  updated_at = CURRENT_TIMESTAMP
WHERE company_id = $1 AND data_type = $2 AND data_key = $3 AND data_id = $4
RETURNING data_id, company_id, data_type, data_key, data_value, confidence_score, source_id, created_at, updated_at
`

type UpdateProcessedCompanyDataParams struct {
	CompanyID       int32          `json:"company_id"`
	DataType        string         `json:"data_type"`
	DataKey         string         `json:"data_key"`
	DataID          int32          `json:"data_id"`
	DataValue       sql.NullString `json:"data_value"`
	ConfidenceScore sql.NullString `json:"confidence_score"`
	SourceID        sql.NullInt32  `json:"source_id"`
}

func (q *Queries) UpdateProcessedCompanyData(ctx context.Context, arg UpdateProcessedCompanyDataParams) (ProcessedCompanyDatum, error) {
	row := q.db.QueryRowContext(ctx, updateProcessedCompanyData,
		arg.CompanyID,
		arg.DataType,
		arg.DataKey,
		arg.DataID,
		arg.DataValue,
		arg.ConfidenceScore,
		arg.SourceID,
	)
	var i ProcessedCompanyDatum
	err := row.Scan(
		&i.DataID,
		&i.CompanyID,
		&i.DataType,
		&i.DataKey,
		&i.DataValue,
		&i.ConfidenceScore,
		&i.SourceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertProcessedCompanyData = `-- name: UpsertProcessedCompanyData :one
INSERT INTO processed_company_data (
  company_id,
  data_type,
  data_key,
  data_value,
  confidence_score,
  source_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
ON CONFLICT (company_id, data_type, data_key) 
WHERE data_id = (
  SELECT data_id FROM processed_company_data 
  WHERE company_id = $1 AND data_type = $2 AND data_key = $3
  ORDER BY confidence_score DESC, updated_at DESC 
  LIMIT 1
)
DO UPDATE SET
  data_value = EXCLUDED.data_value,
  confidence_score = EXCLUDED.confidence_score,
  source_id = EXCLUDED.source_id,
  updated_at = CURRENT_TIMESTAMP
RETURNING data_id, company_id, data_type, data_key, data_value, confidence_score, source_id, created_at, updated_at
`

type UpsertProcessedCompanyDataParams struct {
	CompanyID       int32          `json:"company_id"`
	DataType        string         `json:"data_type"`
	DataKey         string         `json:"data_key"`
	DataValue       sql.NullString `json:"data_value"`
	ConfidenceScore sql.NullString `json:"confidence_score"`
	SourceID        sql.NullInt32  `json:"source_id"`
}

func (q *Queries) UpsertProcessedCompanyData(ctx context.Context, arg UpsertProcessedCompanyDataParams) (ProcessedCompanyDatum, error) {
	row := q.db.QueryRowContext(ctx, upsertProcessedCompanyData,
		arg.CompanyID,
		arg.DataType,
		arg.DataKey,
		arg.DataValue,
		arg.ConfidenceScore,
		arg.SourceID,
	)
	var i ProcessedCompanyDatum
	err := row.Scan(
		&i.DataID,
		&i.CompanyID,
		&i.DataType,
		&i.DataKey,
		&i.DataValue,
		&i.ConfidenceScore,
		&i.SourceID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
