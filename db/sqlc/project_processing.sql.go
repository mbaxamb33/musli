// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: project_processing.sql

package db

import (
	"context"
	"database/sql"
)

const addProcessingToProject = `-- name: AddProcessingToProject :one
INSERT INTO project_processing (
  project_id,
  processing_type,
  description,
  status
) VALUES (
  $1, $2, $3, $4
) RETURNING processing_id, project_id, processing_type, description, status, created_at, updated_at
`

type AddProcessingToProjectParams struct {
	ProjectID      int32          `json:"project_id"`
	ProcessingType string         `json:"processing_type"`
	Description    sql.NullString `json:"description"`
	Status         sql.NullString `json:"status"`
}

func (q *Queries) AddProcessingToProject(ctx context.Context, arg AddProcessingToProjectParams) (ProjectProcessing, error) {
	row := q.db.QueryRowContext(ctx, addProcessingToProject,
		arg.ProjectID,
		arg.ProcessingType,
		arg.Description,
		arg.Status,
	)
	var i ProjectProcessing
	err := row.Scan(
		&i.ProcessingID,
		&i.ProjectID,
		&i.ProcessingType,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const countProjectProcessingByStatus = `-- name: CountProjectProcessingByStatus :one
SELECT COUNT(*) 
FROM project_processing
WHERE project_id = $1 AND status = $2
`

type CountProjectProcessingByStatusParams struct {
	ProjectID int32          `json:"project_id"`
	Status    sql.NullString `json:"status"`
}

func (q *Queries) CountProjectProcessingByStatus(ctx context.Context, arg CountProjectProcessingByStatusParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countProjectProcessingByStatus, arg.ProjectID, arg.Status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deleteProjectProcessing = `-- name: DeleteProjectProcessing :exec
DELETE FROM project_processing
WHERE processing_id = $1
`

func (q *Queries) DeleteProjectProcessing(ctx context.Context, processingID int32) error {
	_, err := q.db.ExecContext(ctx, deleteProjectProcessing, processingID)
	return err
}

const getProcessingTypeCounts = `-- name: GetProcessingTypeCounts :many
SELECT 
  processing_type, 
  COUNT(*) as count
FROM project_processing
WHERE project_id = $1
GROUP BY processing_type
ORDER BY count DESC
`

type GetProcessingTypeCountsRow struct {
	ProcessingType string `json:"processing_type"`
	Count          int64  `json:"count"`
}

func (q *Queries) GetProcessingTypeCounts(ctx context.Context, projectID int32) ([]GetProcessingTypeCountsRow, error) {
	rows, err := q.db.QueryContext(ctx, getProcessingTypeCounts, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProcessingTypeCountsRow
	for rows.Next() {
		var i GetProcessingTypeCountsRow
		if err := rows.Scan(&i.ProcessingType, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectProcessing = `-- name: GetProjectProcessing :one
SELECT processing_id, project_id, processing_type, description, status, created_at, updated_at FROM project_processing
WHERE processing_id = $1 LIMIT 1
`

func (q *Queries) GetProjectProcessing(ctx context.Context, processingID int32) (ProjectProcessing, error) {
	row := q.db.QueryRowContext(ctx, getProjectProcessing, processingID)
	var i ProjectProcessing
	err := row.Scan(
		&i.ProcessingID,
		&i.ProjectID,
		&i.ProcessingType,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listProjectProcessing = `-- name: ListProjectProcessing :many
SELECT processing_id, project_id, processing_type, description, status, created_at, updated_at FROM project_processing
WHERE project_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListProjectProcessingParams struct {
	ProjectID int32 `json:"project_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) ListProjectProcessing(ctx context.Context, arg ListProjectProcessingParams) ([]ProjectProcessing, error) {
	rows, err := q.db.QueryContext(ctx, listProjectProcessing, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectProcessing
	for rows.Next() {
		var i ProjectProcessing
		if err := rows.Scan(
			&i.ProcessingID,
			&i.ProjectID,
			&i.ProcessingType,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectProcessingByStatus = `-- name: ListProjectProcessingByStatus :many
SELECT processing_id, project_id, processing_type, description, status, created_at, updated_at FROM project_processing
WHERE project_id = $1 AND status = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListProjectProcessingByStatusParams struct {
	ProjectID int32          `json:"project_id"`
	Status    sql.NullString `json:"status"`
	Limit     int32          `json:"limit"`
	Offset    int32          `json:"offset"`
}

func (q *Queries) ListProjectProcessingByStatus(ctx context.Context, arg ListProjectProcessingByStatusParams) ([]ProjectProcessing, error) {
	rows, err := q.db.QueryContext(ctx, listProjectProcessingByStatus,
		arg.ProjectID,
		arg.Status,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectProcessing
	for rows.Next() {
		var i ProjectProcessing
		if err := rows.Scan(
			&i.ProcessingID,
			&i.ProjectID,
			&i.ProcessingType,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectProcessingByType = `-- name: ListProjectProcessingByType :many
SELECT processing_id, project_id, processing_type, description, status, created_at, updated_at FROM project_processing
WHERE project_id = $1 AND processing_type = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListProjectProcessingByTypeParams struct {
	ProjectID      int32  `json:"project_id"`
	ProcessingType string `json:"processing_type"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListProjectProcessingByType(ctx context.Context, arg ListProjectProcessingByTypeParams) ([]ProjectProcessing, error) {
	rows, err := q.db.QueryContext(ctx, listProjectProcessingByType,
		arg.ProjectID,
		arg.ProcessingType,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProjectProcessing
	for rows.Next() {
		var i ProjectProcessing
		if err := rows.Scan(
			&i.ProcessingID,
			&i.ProjectID,
			&i.ProcessingType,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProjectProcessing = `-- name: UpdateProjectProcessing :one
UPDATE project_processing
SET
  processing_type = COALESCE($2, processing_type),
  description = COALESCE($3, description),
  status = COALESCE($4, status),
  updated_at = CURRENT_TIMESTAMP
WHERE processing_id = $1
RETURNING processing_id, project_id, processing_type, description, status, created_at, updated_at
`

type UpdateProjectProcessingParams struct {
	ProcessingID   int32          `json:"processing_id"`
	ProcessingType string         `json:"processing_type"`
	Description    sql.NullString `json:"description"`
	Status         sql.NullString `json:"status"`
}

func (q *Queries) UpdateProjectProcessing(ctx context.Context, arg UpdateProjectProcessingParams) (ProjectProcessing, error) {
	row := q.db.QueryRowContext(ctx, updateProjectProcessing,
		arg.ProcessingID,
		arg.ProcessingType,
		arg.Description,
		arg.Status,
	)
	var i ProjectProcessing
	err := row.Scan(
		&i.ProcessingID,
		&i.ProjectID,
		&i.ProcessingType,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProjectProcessingStatus = `-- name: UpdateProjectProcessingStatus :one
UPDATE project_processing
SET 
  status = $2,
  updated_at = CURRENT_TIMESTAMP
WHERE processing_id = $1
RETURNING processing_id, project_id, processing_type, description, status, created_at, updated_at
`

type UpdateProjectProcessingStatusParams struct {
	ProcessingID int32          `json:"processing_id"`
	Status       sql.NullString `json:"status"`
}

func (q *Queries) UpdateProjectProcessingStatus(ctx context.Context, arg UpdateProjectProcessingStatusParams) (ProjectProcessing, error) {
	row := q.db.QueryRowContext(ctx, updateProjectProcessingStatus, arg.ProcessingID, arg.Status)
	var i ProjectProcessing
	err := row.Scan(
		&i.ProcessingID,
		&i.ProjectID,
		&i.ProcessingType,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
