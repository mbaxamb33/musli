// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: companies.sql

package db

import (
	"context"
	"database/sql"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (
    name, website, industry, description,
    headquarters_location, founded_year, is_public, ticker_symbol
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING company_id, name, website, industry, description,
          headquarters_location, founded_year, is_public, ticker_symbol, scrape_timestamp
`

type CreateCompanyParams struct {
	Name                 string         `json:"name"`
	Website              sql.NullString `json:"website"`
	Industry             sql.NullString `json:"industry"`
	Description          sql.NullString `json:"description"`
	HeadquartersLocation sql.NullString `json:"headquarters_location"`
	FoundedYear          sql.NullInt32  `json:"founded_year"`
	IsPublic             sql.NullBool   `json:"is_public"`
	TickerSymbol         sql.NullString `json:"ticker_symbol"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.Name,
		arg.Website,
		arg.Industry,
		arg.Description,
		arg.HeadquartersLocation,
		arg.FoundedYear,
		arg.IsPublic,
		arg.TickerSymbol,
	)
	var i Company
	err := row.Scan(
		&i.CompanyID,
		&i.Name,
		&i.Website,
		&i.Industry,
		&i.Description,
		&i.HeadquartersLocation,
		&i.FoundedYear,
		&i.IsPublic,
		&i.TickerSymbol,
		&i.ScrapeTimestamp,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE company_id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, companyID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, companyID)
	return err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT company_id, name, website, industry, description,
       headquarters_location, founded_year, is_public, ticker_symbol, scrape_timestamp
FROM companies
WHERE company_id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, companyID int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, companyID)
	var i Company
	err := row.Scan(
		&i.CompanyID,
		&i.Name,
		&i.Website,
		&i.Industry,
		&i.Description,
		&i.HeadquartersLocation,
		&i.FoundedYear,
		&i.IsPublic,
		&i.TickerSymbol,
		&i.ScrapeTimestamp,
	)
	return i, err
}

const getCompanyByName = `-- name: GetCompanyByName :one
SELECT company_id, name, website, industry, description,
       headquarters_location, founded_year, is_public, ticker_symbol, scrape_timestamp
FROM companies
WHERE name = $1
`

func (q *Queries) GetCompanyByName(ctx context.Context, name string) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByName, name)
	var i Company
	err := row.Scan(
		&i.CompanyID,
		&i.Name,
		&i.Website,
		&i.Industry,
		&i.Description,
		&i.HeadquartersLocation,
		&i.FoundedYear,
		&i.IsPublic,
		&i.TickerSymbol,
		&i.ScrapeTimestamp,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT company_id, name, website, industry, description,
       headquarters_location, founded_year, is_public, ticker_symbol, scrape_timestamp
FROM companies
ORDER BY scrape_timestamp DESC
LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.CompanyID,
			&i.Name,
			&i.Website,
			&i.Industry,
			&i.Description,
			&i.HeadquartersLocation,
			&i.FoundedYear,
			&i.IsPublic,
			&i.TickerSymbol,
			&i.ScrapeTimestamp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET name = $2,
    website = $3,
    industry = $4,
    description = $5,
    headquarters_location = $6,
    founded_year = $7,
    is_public = $8,
    ticker_symbol = $9,
    scrape_timestamp = CURRENT_TIMESTAMP
WHERE company_id = $1
RETURNING company_id, name, website, industry, description,
          headquarters_location, founded_year, is_public, ticker_symbol, scrape_timestamp
`

type UpdateCompanyParams struct {
	CompanyID            int32          `json:"company_id"`
	Name                 string         `json:"name"`
	Website              sql.NullString `json:"website"`
	Industry             sql.NullString `json:"industry"`
	Description          sql.NullString `json:"description"`
	HeadquartersLocation sql.NullString `json:"headquarters_location"`
	FoundedYear          sql.NullInt32  `json:"founded_year"`
	IsPublic             sql.NullBool   `json:"is_public"`
	TickerSymbol         sql.NullString `json:"ticker_symbol"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, updateCompany,
		arg.CompanyID,
		arg.Name,
		arg.Website,
		arg.Industry,
		arg.Description,
		arg.HeadquartersLocation,
		arg.FoundedYear,
		arg.IsPublic,
		arg.TickerSymbol,
	)
	var i Company
	err := row.Scan(
		&i.CompanyID,
		&i.Name,
		&i.Website,
		&i.Industry,
		&i.Description,
		&i.HeadquartersLocation,
		&i.FoundedYear,
		&i.IsPublic,
		&i.TickerSymbol,
		&i.ScrapeTimestamp,
	)
	return i, err
}
