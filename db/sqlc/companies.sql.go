// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: companies.sql

package db

import (
	"context"
	"database/sql"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (
  name,
  industry,
  size,
  location,
  website,
  description
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING company_id, name, industry, size, location, website, description, created_at, updated_at
`

type CreateCompanyParams struct {
	Name        string         `json:"name"`
	Industry    sql.NullString `json:"industry"`
	Size        sql.NullString `json:"size"`
	Location    sql.NullString `json:"location"`
	Website     sql.NullString `json:"website"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.Name,
		arg.Industry,
		arg.Size,
		arg.Location,
		arg.Website,
		arg.Description,
	)
	var i Company
	err := row.Scan(
		&i.CompanyID,
		&i.Name,
		&i.Industry,
		&i.Size,
		&i.Location,
		&i.Website,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE company_id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, companyID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, companyID)
	return err
}

const getCompaniesForProject = `-- name: GetCompaniesForProject :many
SELECT 
  c.company_id, c.name, c.industry, c.size, c.location, c.website, c.description, c.created_at, c.updated_at,
  pc.matching_score,
  pc.status AS relationship_status,
  strategy.name AS approach_strategy
FROM companies c
JOIN project_companies pc ON c.company_id = pc.company_id
LEFT JOIN approach_strategies strategy ON pc.approach_strategy_id = strategy.strategy_id
WHERE pc.project_id = $1
ORDER BY pc.matching_score DESC
LIMIT $2 OFFSET $3
`

type GetCompaniesForProjectParams struct {
	ProjectID int32 `json:"project_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetCompaniesForProjectRow struct {
	CompanyID          int32          `json:"company_id"`
	Name               string         `json:"name"`
	Industry           sql.NullString `json:"industry"`
	Size               sql.NullString `json:"size"`
	Location           sql.NullString `json:"location"`
	Website            sql.NullString `json:"website"`
	Description        sql.NullString `json:"description"`
	CreatedAt          sql.NullTime   `json:"created_at"`
	UpdatedAt          sql.NullTime   `json:"updated_at"`
	MatchingScore      sql.NullString `json:"matching_score"`
	RelationshipStatus sql.NullString `json:"relationship_status"`
	ApproachStrategy   sql.NullString `json:"approach_strategy"`
}

func (q *Queries) GetCompaniesForProject(ctx context.Context, arg GetCompaniesForProjectParams) ([]GetCompaniesForProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompaniesForProject, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompaniesForProjectRow
	for rows.Next() {
		var i GetCompaniesForProjectRow
		if err := rows.Scan(
			&i.CompanyID,
			&i.Name,
			&i.Industry,
			&i.Size,
			&i.Location,
			&i.Website,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MatchingScore,
			&i.RelationshipStatus,
			&i.ApproachStrategy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompany = `-- name: GetCompany :one
SELECT company_id, name, industry, size, location, website, description, created_at, updated_at FROM companies
WHERE company_id = $1 LIMIT 1
`

func (q *Queries) GetCompany(ctx context.Context, companyID int32) (Company, error) {
	row := q.db.QueryRowContext(ctx, getCompany, companyID)
	var i Company
	err := row.Scan(
		&i.CompanyID,
		&i.Name,
		&i.Industry,
		&i.Size,
		&i.Location,
		&i.Website,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyWithContactCount = `-- name: GetCompanyWithContactCount :many
SELECT 
  c.company_id, c.name, c.industry, c.size, c.location, c.website, c.description, c.created_at, c.updated_at,
  COUNT(cc.contact_id) AS contact_count
FROM companies c
LEFT JOIN company_contacts cc ON c.company_id = cc.company_id
GROUP BY c.company_id
ORDER BY c.name
LIMIT $1 OFFSET $2
`

type GetCompanyWithContactCountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetCompanyWithContactCountRow struct {
	CompanyID    int32          `json:"company_id"`
	Name         string         `json:"name"`
	Industry     sql.NullString `json:"industry"`
	Size         sql.NullString `json:"size"`
	Location     sql.NullString `json:"location"`
	Website      sql.NullString `json:"website"`
	Description  sql.NullString `json:"description"`
	CreatedAt    sql.NullTime   `json:"created_at"`
	UpdatedAt    sql.NullTime   `json:"updated_at"`
	ContactCount int64          `json:"contact_count"`
}

func (q *Queries) GetCompanyWithContactCount(ctx context.Context, arg GetCompanyWithContactCountParams) ([]GetCompanyWithContactCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompanyWithContactCount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompanyWithContactCountRow
	for rows.Next() {
		var i GetCompanyWithContactCountRow
		if err := rows.Scan(
			&i.CompanyID,
			&i.Name,
			&i.Industry,
			&i.Size,
			&i.Location,
			&i.Website,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ContactCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompanies = `-- name: ListCompanies :many
SELECT company_id, name, industry, size, location, website, description, created_at, updated_at FROM companies
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.CompanyID,
			&i.Name,
			&i.Industry,
			&i.Size,
			&i.Location,
			&i.Website,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompaniesByIndustry = `-- name: ListCompaniesByIndustry :many
SELECT company_id, name, industry, size, location, website, description, created_at, updated_at FROM companies
WHERE industry = $1
ORDER BY name
LIMIT $2 OFFSET $3
`

type ListCompaniesByIndustryParams struct {
	Industry sql.NullString `json:"industry"`
	Limit    int32          `json:"limit"`
	Offset   int32          `json:"offset"`
}

func (q *Queries) ListCompaniesByIndustry(ctx context.Context, arg ListCompaniesByIndustryParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, listCompaniesByIndustry, arg.Industry, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.CompanyID,
			&i.Name,
			&i.Industry,
			&i.Size,
			&i.Location,
			&i.Website,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCompanies = `-- name: SearchCompanies :many
SELECT company_id, name, industry, size, location, website, description, created_at, updated_at FROM companies
WHERE 
  name ILIKE '%' || $1 || '%' OR 
  industry ILIKE '%' || $1 || '%' OR 
  location ILIKE '%' || $1 || '%' OR
  description ILIKE '%' || $1 || '%'
ORDER BY name
LIMIT $2 OFFSET $3
`

type SearchCompaniesParams struct {
	Column1 sql.NullString `json:"column_1"`
	Limit   int32          `json:"limit"`
	Offset  int32          `json:"offset"`
}

func (q *Queries) SearchCompanies(ctx context.Context, arg SearchCompaniesParams) ([]Company, error) {
	rows, err := q.db.QueryContext(ctx, searchCompanies, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Company
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.CompanyID,
			&i.Name,
			&i.Industry,
			&i.Size,
			&i.Location,
			&i.Website,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET
  name = COALESCE($2, name),
  industry = COALESCE($3, industry),
  size = COALESCE($4, size),
  location = COALESCE($5, location),
  website = COALESCE($6, website),
  description = COALESCE($7, description),
  updated_at = CURRENT_TIMESTAMP
WHERE company_id = $1
RETURNING company_id, name, industry, size, location, website, description, created_at, updated_at
`

type UpdateCompanyParams struct {
	CompanyID   int32          `json:"company_id"`
	Name        string         `json:"name"`
	Industry    sql.NullString `json:"industry"`
	Size        sql.NullString `json:"size"`
	Location    sql.NullString `json:"location"`
	Website     sql.NullString `json:"website"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRowContext(ctx, updateCompany,
		arg.CompanyID,
		arg.Name,
		arg.Industry,
		arg.Size,
		arg.Location,
		arg.Website,
		arg.Description,
	)
	var i Company
	err := row.Scan(
		&i.CompanyID,
		&i.Name,
		&i.Industry,
		&i.Size,
		&i.Location,
		&i.Website,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
