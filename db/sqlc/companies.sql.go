// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: companies.sql

package db

import (
	"context"
	"database/sql"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (
    cognito_sub, company_name, industry, website, address, description
)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING company_id, cognito_sub, company_name, industry, website, address, description, created_at
`

type CreateCompanyParams struct {
	CognitoSub  sql.NullString `json:"cognito_sub"`
	CompanyName string         `json:"company_name"`
	Industry    sql.NullString `json:"industry"`
	Website     sql.NullString `json:"website"`
	Address     sql.NullString `json:"address"`
	Description sql.NullString `json:"description"`
}

type CreateCompanyRow struct {
	CompanyID   int32          `json:"company_id"`
	CognitoSub  sql.NullString `json:"cognito_sub"`
	CompanyName string         `json:"company_name"`
	Industry    sql.NullString `json:"industry"`
	Website     sql.NullString `json:"website"`
	Address     sql.NullString `json:"address"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (CreateCompanyRow, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.CognitoSub,
		arg.CompanyName,
		arg.Industry,
		arg.Website,
		arg.Address,
		arg.Description,
	)
	var i CreateCompanyRow
	err := row.Scan(
		&i.CompanyID,
		&i.CognitoSub,
		&i.CompanyName,
		&i.Industry,
		&i.Website,
		&i.Address,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies
WHERE company_id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, companyID int32) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, companyID)
	return err
}

const getCompaniesByCognitoSub = `-- name: GetCompaniesByCognitoSub :many
SELECT company_id, cognito_sub, company_name, industry, website, address, description, created_at
FROM companies
WHERE cognito_sub = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetCompaniesByCognitoSubParams struct {
	CognitoSub sql.NullString `json:"cognito_sub"`
	Limit      int32          `json:"limit"`
	Offset     int32          `json:"offset"`
}

type GetCompaniesByCognitoSubRow struct {
	CompanyID   int32          `json:"company_id"`
	CognitoSub  sql.NullString `json:"cognito_sub"`
	CompanyName string         `json:"company_name"`
	Industry    sql.NullString `json:"industry"`
	Website     sql.NullString `json:"website"`
	Address     sql.NullString `json:"address"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetCompaniesByCognitoSub(ctx context.Context, arg GetCompaniesByCognitoSubParams) ([]GetCompaniesByCognitoSubRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompaniesByCognitoSub, arg.CognitoSub, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCompaniesByCognitoSubRow
	for rows.Next() {
		var i GetCompaniesByCognitoSubRow
		if err := rows.Scan(
			&i.CompanyID,
			&i.CognitoSub,
			&i.CompanyName,
			&i.Industry,
			&i.Website,
			&i.Address,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT company_id, cognito_sub, company_name, industry, website, address, description, created_at
FROM companies
WHERE company_id = $1
`

type GetCompanyByIDRow struct {
	CompanyID   int32          `json:"company_id"`
	CognitoSub  sql.NullString `json:"cognito_sub"`
	CompanyName string         `json:"company_name"`
	Industry    sql.NullString `json:"industry"`
	Website     sql.NullString `json:"website"`
	Address     sql.NullString `json:"address"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetCompanyByID(ctx context.Context, companyID int32) (GetCompanyByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByID, companyID)
	var i GetCompanyByIDRow
	err := row.Scan(
		&i.CompanyID,
		&i.CognitoSub,
		&i.CompanyName,
		&i.Industry,
		&i.Website,
		&i.Address,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getCompanyByName = `-- name: GetCompanyByName :one
SELECT company_id, cognito_sub, company_name, industry, website, address, description, created_at
FROM companies
WHERE company_name = $1
`

type GetCompanyByNameRow struct {
	CompanyID   int32          `json:"company_id"`
	CognitoSub  sql.NullString `json:"cognito_sub"`
	CompanyName string         `json:"company_name"`
	Industry    sql.NullString `json:"industry"`
	Website     sql.NullString `json:"website"`
	Address     sql.NullString `json:"address"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetCompanyByName(ctx context.Context, companyName string) (GetCompanyByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByName, companyName)
	var i GetCompanyByNameRow
	err := row.Scan(
		&i.CompanyID,
		&i.CognitoSub,
		&i.CompanyName,
		&i.Industry,
		&i.Website,
		&i.Address,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT company_id, cognito_sub, company_name, industry, website, address, description, created_at
FROM companies
ORDER BY company_name ASC
LIMIT $1 OFFSET $2
`

type ListCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListCompaniesRow struct {
	CompanyID   int32          `json:"company_id"`
	CognitoSub  sql.NullString `json:"cognito_sub"`
	CompanyName string         `json:"company_name"`
	Industry    sql.NullString `json:"industry"`
	Website     sql.NullString `json:"website"`
	Address     sql.NullString `json:"address"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]ListCompaniesRow, error) {
	rows, err := q.db.QueryContext(ctx, listCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCompaniesRow
	for rows.Next() {
		var i ListCompaniesRow
		if err := rows.Scan(
			&i.CompanyID,
			&i.CognitoSub,
			&i.CompanyName,
			&i.Industry,
			&i.Website,
			&i.Address,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET company_name = $2,
    industry = $3,
    website = $4,
    address = $5,
    description = $6
WHERE company_id = $1
RETURNING company_id, cognito_sub, company_name, industry, website, address, description, created_at
`

type UpdateCompanyParams struct {
	CompanyID   int32          `json:"company_id"`
	CompanyName string         `json:"company_name"`
	Industry    sql.NullString `json:"industry"`
	Website     sql.NullString `json:"website"`
	Address     sql.NullString `json:"address"`
	Description sql.NullString `json:"description"`
}

type UpdateCompanyRow struct {
	CompanyID   int32          `json:"company_id"`
	CognitoSub  sql.NullString `json:"cognito_sub"`
	CompanyName string         `json:"company_name"`
	Industry    sql.NullString `json:"industry"`
	Website     sql.NullString `json:"website"`
	Address     sql.NullString `json:"address"`
	Description sql.NullString `json:"description"`
	CreatedAt   sql.NullTime   `json:"created_at"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (UpdateCompanyRow, error) {
	row := q.db.QueryRowContext(ctx, updateCompany,
		arg.CompanyID,
		arg.CompanyName,
		arg.Industry,
		arg.Website,
		arg.Address,
		arg.Description,
	)
	var i UpdateCompanyRow
	err := row.Scan(
		&i.CompanyID,
		&i.CognitoSub,
		&i.CompanyName,
		&i.Industry,
		&i.Website,
		&i.Address,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
