// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sales_process_projects.sql

package db

import (
	"context"
	"database/sql"
)

const getProjectsForSalesProcess = `-- name: GetProjectsForSalesProcess :many
SELECT p.project_id, p.cognito_sub, p.project_name, p.main_idea, p.created_at, p.updated_at
FROM projects p
JOIN sales_process_projects spp ON p.project_id = spp.project_id
WHERE spp.sales_process_id = $1
ORDER BY p.project_name ASC
LIMIT $2 OFFSET $3
`

type GetProjectsForSalesProcessParams struct {
	SalesProcessID int32 `json:"sales_process_id"`
	Limit          int32 `json:"limit"`
	Offset         int32 `json:"offset"`
}

type GetProjectsForSalesProcessRow struct {
	ProjectID   int32          `json:"project_id"`
	CognitoSub  sql.NullString `json:"cognito_sub"`
	ProjectName string         `json:"project_name"`
	MainIdea    sql.NullString `json:"main_idea"`
	CreatedAt   sql.NullTime   `json:"created_at"`
	UpdatedAt   sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetProjectsForSalesProcess(ctx context.Context, arg GetProjectsForSalesProcessParams) ([]GetProjectsForSalesProcessRow, error) {
	rows, err := q.db.QueryContext(ctx, getProjectsForSalesProcess, arg.SalesProcessID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectsForSalesProcessRow
	for rows.Next() {
		var i GetProjectsForSalesProcessRow
		if err := rows.Scan(
			&i.ProjectID,
			&i.CognitoSub,
			&i.ProjectName,
			&i.MainIdea,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSalesProcessesForProject = `-- name: GetSalesProcessesForProject :many
SELECT sp.sales_process_id, sp.cognito_sub, sp.contact_id, sp.overall_matching_score, sp.status, sp.created_at, sp.updated_at
FROM sales_processes sp
JOIN sales_process_projects spp ON sp.sales_process_id = spp.sales_process_id
WHERE spp.project_id = $1
ORDER BY sp.created_at DESC
LIMIT $2 OFFSET $3
`

type GetSalesProcessesForProjectParams struct {
	ProjectID int32 `json:"project_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type GetSalesProcessesForProjectRow struct {
	SalesProcessID       int32          `json:"sales_process_id"`
	CognitoSub           sql.NullString `json:"cognito_sub"`
	ContactID            int32          `json:"contact_id"`
	OverallMatchingScore sql.NullString `json:"overall_matching_score"`
	Status               sql.NullString `json:"status"`
	CreatedAt            sql.NullTime   `json:"created_at"`
	UpdatedAt            sql.NullTime   `json:"updated_at"`
}

func (q *Queries) GetSalesProcessesForProject(ctx context.Context, arg GetSalesProcessesForProjectParams) ([]GetSalesProcessesForProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, getSalesProcessesForProject, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSalesProcessesForProjectRow
	for rows.Next() {
		var i GetSalesProcessesForProjectRow
		if err := rows.Scan(
			&i.SalesProcessID,
			&i.CognitoSub,
			&i.ContactID,
			&i.OverallMatchingScore,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const linkProjectToSalesProcess = `-- name: LinkProjectToSalesProcess :exec
INSERT INTO sales_process_projects (
    sales_process_id, project_id
)
VALUES ($1, $2)
`

type LinkProjectToSalesProcessParams struct {
	SalesProcessID int32 `json:"sales_process_id"`
	ProjectID      int32 `json:"project_id"`
}

func (q *Queries) LinkProjectToSalesProcess(ctx context.Context, arg LinkProjectToSalesProcessParams) error {
	_, err := q.db.ExecContext(ctx, linkProjectToSalesProcess, arg.SalesProcessID, arg.ProjectID)
	return err
}

const unlinkProjectFromSalesProcess = `-- name: UnlinkProjectFromSalesProcess :exec
DELETE FROM sales_process_projects
WHERE sales_process_id = $1 AND project_id = $2
`

type UnlinkProjectFromSalesProcessParams struct {
	SalesProcessID int32 `json:"sales_process_id"`
	ProjectID      int32 `json:"project_id"`
}

func (q *Queries) UnlinkProjectFromSalesProcess(ctx context.Context, arg UnlinkProjectFromSalesProcessParams) error {
	_, err := q.db.ExecContext(ctx, unlinkProjectFromSalesProcess, arg.SalesProcessID, arg.ProjectID)
	return err
}
