// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: project_datasources.sql

package db

import (
	"context"
	"database/sql"
)

const associateDatasourceWithProject = `-- name: AssociateDatasourceWithProject :exec
INSERT INTO project_datasources (
    project_id, datasource_id
)
VALUES ($1, $2)
`

type AssociateDatasourceWithProjectParams struct {
	ProjectID    int32 `json:"project_id"`
	DatasourceID int32 `json:"datasource_id"`
}

func (q *Queries) AssociateDatasourceWithProject(ctx context.Context, arg AssociateDatasourceWithProjectParams) error {
	_, err := q.db.ExecContext(ctx, associateDatasourceWithProject, arg.ProjectID, arg.DatasourceID)
	return err
}

const getProjectDatasourceAssociation = `-- name: GetProjectDatasourceAssociation :one
SELECT project_id, datasource_id
FROM project_datasources
WHERE project_id = $1 AND datasource_id = $2
`

type GetProjectDatasourceAssociationParams struct {
	ProjectID    int32 `json:"project_id"`
	DatasourceID int32 `json:"datasource_id"`
}

func (q *Queries) GetProjectDatasourceAssociation(ctx context.Context, arg GetProjectDatasourceAssociationParams) (ProjectDatasource, error) {
	row := q.db.QueryRowContext(ctx, getProjectDatasourceAssociation, arg.ProjectID, arg.DatasourceID)
	var i ProjectDatasource
	err := row.Scan(&i.ProjectID, &i.DatasourceID)
	return i, err
}

const listDatasourcesByProject = `-- name: ListDatasourcesByProject :many
SELECT d.datasource_id, d.source_type, d.link, d.file_name, d.created_at
FROM datasources d
JOIN project_datasources pd ON d.datasource_id = pd.datasource_id
WHERE pd.project_id = $1
ORDER BY d.created_at DESC
LIMIT $2 OFFSET $3
`

type ListDatasourcesByProjectParams struct {
	ProjectID int32 `json:"project_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

type ListDatasourcesByProjectRow struct {
	DatasourceID int32          `json:"datasource_id"`
	SourceType   DatasourceType `json:"source_type"`
	Link         sql.NullString `json:"link"`
	FileName     sql.NullString `json:"file_name"`
	CreatedAt    sql.NullTime   `json:"created_at"`
}

func (q *Queries) ListDatasourcesByProject(ctx context.Context, arg ListDatasourcesByProjectParams) ([]ListDatasourcesByProjectRow, error) {
	rows, err := q.db.QueryContext(ctx, listDatasourcesByProject, arg.ProjectID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDatasourcesByProjectRow
	for rows.Next() {
		var i ListDatasourcesByProjectRow
		if err := rows.Scan(
			&i.DatasourceID,
			&i.SourceType,
			&i.Link,
			&i.FileName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectsByDatasource = `-- name: ListProjectsByDatasource :many
SELECT p.project_id, p.user_id, p.project_name, p.main_idea, p.created_at, p.updated_at
FROM projects p
JOIN project_datasources pd ON p.project_id = pd.project_id
WHERE pd.datasource_id = $1
ORDER BY p.created_at DESC
LIMIT $2 OFFSET $3
`

type ListProjectsByDatasourceParams struct {
	DatasourceID int32 `json:"datasource_id"`
	Limit        int32 `json:"limit"`
	Offset       int32 `json:"offset"`
}

func (q *Queries) ListProjectsByDatasource(ctx context.Context, arg ListProjectsByDatasourceParams) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjectsByDatasource, arg.DatasourceID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.ProjectName,
			&i.MainIdea,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeDatasourceFromProject = `-- name: RemoveDatasourceFromProject :exec
DELETE FROM project_datasources
WHERE project_id = $1 AND datasource_id = $2
`

type RemoveDatasourceFromProjectParams struct {
	ProjectID    int32 `json:"project_id"`
	DatasourceID int32 `json:"datasource_id"`
}

func (q *Queries) RemoveDatasourceFromProject(ctx context.Context, arg RemoveDatasourceFromProjectParams) error {
	_, err := q.db.ExecContext(ctx, removeDatasourceFromProject, arg.ProjectID, arg.DatasourceID)
	return err
}
