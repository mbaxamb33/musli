// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: briefs.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createBrief = `-- name: CreateBrief :one

INSERT INTO briefs (
    master_brief_id, brief_type, brief_tag, title, text_content
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, master_brief_id, brief_type, brief_tag, title, text_content, created_at, updated_at
`

type CreateBriefParams struct {
	MasterBriefID uuid.NullUUID  `json:"master_brief_id"`
	BriefType     BriefType      `json:"brief_type"`
	BriefTag      BriefTag       `json:"brief_tag"`
	Title         sql.NullString `json:"title"`
	TextContent   sql.NullString `json:"text_content"`
}

// =============================================================================
// BRIEFS QUERIES
// =============================================================================
func (q *Queries) CreateBrief(ctx context.Context, arg CreateBriefParams) (Brief, error) {
	row := q.db.QueryRowContext(ctx, createBrief,
		arg.MasterBriefID,
		arg.BriefType,
		arg.BriefTag,
		arg.Title,
		arg.TextContent,
	)
	var i Brief
	err := row.Scan(
		&i.ID,
		&i.MasterBriefID,
		&i.BriefType,
		&i.BriefTag,
		&i.Title,
		&i.TextContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBrief = `-- name: DeleteBrief :exec
DELETE FROM briefs
WHERE id = $1
`

func (q *Queries) DeleteBrief(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBrief, id)
	return err
}

const getBriefByID = `-- name: GetBriefByID :one
SELECT id, master_brief_id, brief_type, brief_tag, title, text_content, created_at, updated_at
FROM briefs
WHERE id = $1
`

func (q *Queries) GetBriefByID(ctx context.Context, id uuid.UUID) (Brief, error) {
	row := q.db.QueryRowContext(ctx, getBriefByID, id)
	var i Brief
	err := row.Scan(
		&i.ID,
		&i.MasterBriefID,
		&i.BriefType,
		&i.BriefTag,
		&i.Title,
		&i.TextContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBriefsByMasterBrief = `-- name: ListBriefsByMasterBrief :many
SELECT id, master_brief_id, brief_type, brief_tag, title, text_content, created_at, updated_at
FROM briefs
WHERE master_brief_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListBriefsByMasterBriefParams struct {
	MasterBriefID uuid.NullUUID `json:"master_brief_id"`
	Limit         int32         `json:"limit"`
	Offset        int32         `json:"offset"`
}

func (q *Queries) ListBriefsByMasterBrief(ctx context.Context, arg ListBriefsByMasterBriefParams) ([]Brief, error) {
	rows, err := q.db.QueryContext(ctx, listBriefsByMasterBrief, arg.MasterBriefID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Brief
	for rows.Next() {
		var i Brief
		if err := rows.Scan(
			&i.ID,
			&i.MasterBriefID,
			&i.BriefType,
			&i.BriefTag,
			&i.Title,
			&i.TextContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBriefsByTag = `-- name: ListBriefsByTag :many
SELECT id, master_brief_id, brief_type, brief_tag, title, text_content, created_at, updated_at
FROM briefs
WHERE master_brief_id = $1 AND brief_tag = $2
ORDER BY created_at DESC
`

type ListBriefsByTagParams struct {
	MasterBriefID uuid.NullUUID `json:"master_brief_id"`
	BriefTag      BriefTag      `json:"brief_tag"`
}

func (q *Queries) ListBriefsByTag(ctx context.Context, arg ListBriefsByTagParams) ([]Brief, error) {
	rows, err := q.db.QueryContext(ctx, listBriefsByTag, arg.MasterBriefID, arg.BriefTag)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Brief
	for rows.Next() {
		var i Brief
		if err := rows.Scan(
			&i.ID,
			&i.MasterBriefID,
			&i.BriefType,
			&i.BriefTag,
			&i.Title,
			&i.TextContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listBriefsByType = `-- name: ListBriefsByType :many
SELECT id, master_brief_id, brief_type, brief_tag, title, text_content, created_at, updated_at
FROM briefs
WHERE master_brief_id = $1 AND brief_type = $2
ORDER BY created_at DESC
`

type ListBriefsByTypeParams struct {
	MasterBriefID uuid.NullUUID `json:"master_brief_id"`
	BriefType     BriefType     `json:"brief_type"`
}

func (q *Queries) ListBriefsByType(ctx context.Context, arg ListBriefsByTypeParams) ([]Brief, error) {
	rows, err := q.db.QueryContext(ctx, listBriefsByType, arg.MasterBriefID, arg.BriefType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Brief
	for rows.Next() {
		var i Brief
		if err := rows.Scan(
			&i.ID,
			&i.MasterBriefID,
			&i.BriefType,
			&i.BriefTag,
			&i.Title,
			&i.TextContent,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBrief = `-- name: UpdateBrief :one
UPDATE briefs
SET brief_type = $2,
    brief_tag = $3,
    title = $4,
    text_content = $5,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, master_brief_id, brief_type, brief_tag, title, text_content, created_at, updated_at
`

type UpdateBriefParams struct {
	ID          uuid.UUID      `json:"id"`
	BriefType   BriefType      `json:"brief_type"`
	BriefTag    BriefTag       `json:"brief_tag"`
	Title       sql.NullString `json:"title"`
	TextContent sql.NullString `json:"text_content"`
}

func (q *Queries) UpdateBrief(ctx context.Context, arg UpdateBriefParams) (Brief, error) {
	row := q.db.QueryRowContext(ctx, updateBrief,
		arg.ID,
		arg.BriefType,
		arg.BriefTag,
		arg.Title,
		arg.TextContent,
	)
	var i Brief
	err := row.Scan(
		&i.ID,
		&i.MasterBriefID,
		&i.BriefType,
		&i.BriefTag,
		&i.Title,
		&i.TextContent,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
