// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: resource_categories.sql

package db

import (
	"context"
	"database/sql"
)

const createResourceCategory = `-- name: CreateResourceCategory :one
INSERT INTO resource_categories (
  name,
  description
) VALUES (
  $1, $2
) RETURNING category_id, name, description, created_at, updated_at
`

type CreateResourceCategoryParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) CreateResourceCategory(ctx context.Context, arg CreateResourceCategoryParams) (ResourceCategory, error) {
	row := q.db.QueryRowContext(ctx, createResourceCategory, arg.Name, arg.Description)
	var i ResourceCategory
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteResourceCategory = `-- name: DeleteResourceCategory :exec
DELETE FROM resource_categories
WHERE category_id = $1
`

func (q *Queries) DeleteResourceCategory(ctx context.Context, categoryID int32) error {
	_, err := q.db.ExecContext(ctx, deleteResourceCategory, categoryID)
	return err
}

const getResourceCategory = `-- name: GetResourceCategory :one
SELECT category_id, name, description, created_at, updated_at FROM resource_categories
WHERE category_id = $1 LIMIT 1
`

func (q *Queries) GetResourceCategory(ctx context.Context, categoryID int32) (ResourceCategory, error) {
	row := q.db.QueryRowContext(ctx, getResourceCategory, categoryID)
	var i ResourceCategory
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResourceCategoryByName = `-- name: GetResourceCategoryByName :one
SELECT category_id, name, description, created_at, updated_at FROM resource_categories
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetResourceCategoryByName(ctx context.Context, name string) (ResourceCategory, error) {
	row := q.db.QueryRowContext(ctx, getResourceCategoryByName, name)
	var i ResourceCategory
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResourceCategoryWithResourceCount = `-- name: GetResourceCategoryWithResourceCount :many
SELECT 
  rc.category_id, rc.name, rc.description, rc.created_at, rc.updated_at,
  COUNT(r.resource_id) AS resource_count
FROM resource_categories rc
LEFT JOIN resources r ON rc.category_id = r.category_id
GROUP BY rc.category_id
ORDER BY rc.name
LIMIT $1 OFFSET $2
`

type GetResourceCategoryWithResourceCountParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetResourceCategoryWithResourceCountRow struct {
	CategoryID    int32          `json:"category_id"`
	Name          string         `json:"name"`
	Description   sql.NullString `json:"description"`
	CreatedAt     sql.NullTime   `json:"created_at"`
	UpdatedAt     sql.NullTime   `json:"updated_at"`
	ResourceCount int64          `json:"resource_count"`
}

func (q *Queries) GetResourceCategoryWithResourceCount(ctx context.Context, arg GetResourceCategoryWithResourceCountParams) ([]GetResourceCategoryWithResourceCountRow, error) {
	rows, err := q.db.QueryContext(ctx, getResourceCategoryWithResourceCount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResourceCategoryWithResourceCountRow
	for rows.Next() {
		var i GetResourceCategoryWithResourceCountRow
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ResourceCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResourceCategories = `-- name: ListResourceCategories :many
SELECT category_id, name, description, created_at, updated_at FROM resource_categories
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListResourceCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListResourceCategories(ctx context.Context, arg ListResourceCategoriesParams) ([]ResourceCategory, error) {
	rows, err := q.db.QueryContext(ctx, listResourceCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceCategory
	for rows.Next() {
		var i ResourceCategory
		if err := rows.Scan(
			&i.CategoryID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResourceCategory = `-- name: UpdateResourceCategory :one
UPDATE resource_categories
SET
  name = COALESCE($2, name),
  description = COALESCE($3, description),
  updated_at = CURRENT_TIMESTAMP
WHERE category_id = $1
RETURNING category_id, name, description, created_at, updated_at
`

type UpdateResourceCategoryParams struct {
	CategoryID  int32          `json:"category_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateResourceCategory(ctx context.Context, arg UpdateResourceCategoryParams) (ResourceCategory, error) {
	row := q.db.QueryRowContext(ctx, updateResourceCategory, arg.CategoryID, arg.Name, arg.Description)
	var i ResourceCategory
	err := row.Scan(
		&i.CategoryID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
